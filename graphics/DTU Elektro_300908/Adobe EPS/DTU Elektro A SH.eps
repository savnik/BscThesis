%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: DTU Elektro A SH.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: PeopleGroup%%CreationDate: 27/02/08%%BoundingBox: 0 0 145 37%%HiResBoundingBox: 0 0 144.1075 36.6602%%CropBox: 0 0 144.1075 36.6602%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 36 8%%BeginData: 5286 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C4527F827F8A8FF520027272752A827FFFFFF527DFD05FF52F827F8A8%7D2752FD06FFA82727A8FD05FFA8FD50FFF87DA852F8A8A8A827287DA87D%27A8FFFF2752FD04FFA8F87D7D7EA8FF5227FD07FFA8F8A8FD04FF277DFD%08FFA8FD47FF27A8FFFF2752FFFF5252FFFFA8F8FFFFFF277DFD04FF7D27%FD05FF5227FFFF7D27277DFFA827A8A827A85227F87DA852522852FF5227%27A8FD45FFF8A8FFFF2752FFFF2852FFFF7DF8A8FFFF2752FD04FF7DF87D%527DA8FF2728FF7DF8A85227A8A8F8A8F852FFA8F852A8FF522752A87D27%7D52F8FD45FF27A8FFFF5252FFFF5252FFFFA8F8FFFFFF277DFD04FF7D27%275227A8FF5227FF2752FFA8F8A8A8272752FFFFFF277DFFFFA821FFFF52%52FFFF277DFD44FFF8A8FFFF2752FFFF5252FFFF7DF8A8FFFF2752FD04FF%7DF8FD05FF5252FF52F8522727A8FFF8F852FFFFFFF87DFFFF7D27AFFF27%52FFFFF87DFD44FF27A8FFA8277DFFFF5252FFFFA8F8A8FFFFF87DFD04FF%7D27FD05FF5227FF2752FD04FFA82752277DFFFF277DFFFFA8F8FFFF5227%FFFF277DFD44FFF8525227F8FFFFFF2752FFFFFF52F8522727A8FD04FFA8%F82752527DFF2727FF7DF8525252FFA8F8FF52F87DFF27277DFF7DF8A8FF%7DF85227F8FD45FF7D285252FD04FFA87DFD04FF7D2752A8FD06FFA82852%27A8FFA87DFFFF7D275252FFA87DFFFF527EFFA8277DFFFF52FFFFFF7D52%52FDFCFFFDF1FFA8FD0FFFAFFD47FFA859FD0DFFA8FFFFA852FD13FF7D7D%A8FD0CFF7D527D7DFFA8A8FD06FFA87DFD12FFA8FD08FFA87DFD0FFFA8A8%FD0CFFA87D7DA8FD0CFF7DA8FD05FF59FD09FF7DAFFD05FF7DFD0EFF53FF%A8FFFFA87DFD07FF52FD05FF53FD0CFF7D84FD07FF7DA8FD0FFFA87DFD0D%FFA852FFA8FD047DFFA87D7D7DA8A8527DA8FFA8FF7D7D7DA8A8A8FFFF7D%FF7D5952A8FFFFA87D527DA8A87D7D7DFFA87D52A8FFFFA87DFD04FF7D7D%FFFF7D7D7DFFA87DFFAF7DA87D7D7DFFA87D7DFFA87D53A8FFA8527DA8FF%7D7D52A8FF7D7DFF7DA8A8FD047DFFFFA8527DA8FF7D7DFFA8537D7DFFFF%A87D7D52A8FFA87DFFA852FFA87DFFA87DFFA8FFFF7D7DFFA87DFFFF59A8%FFA87DFFFF7DA8FF7DA8FD04FFA87DA8FF7DA8A87DA8FF52AFFD04FF7DA8%7DA8FFA87DFF7DA8FF7DA8FF7DFF7DA8FFA959AFFFA87DFFA87DA8FF52FF%FF7D7DFFA87DA8A87DFF7DA8A87DFFFF53A8A87DFFFF52FFA87DFFA87DFF%7DA8A87DA8FF7DA8A87D7DFF5252FFA87DFFFF7DA8A87DA8FFFFFF7DA8FF%A87DFFFF7DA8FF7DA8FFFF52FFFF7DA8FD05FF53FFA87DFFFF7DA8A87DFD%04FFA8FD047DFFA87DA87DA8FF7D7DA87D52A8FFFFA87DFFFF7DA8FFA87D%FFFF7D7DFF7DA8FF7D7DFFA87DA8A8527DAFFFA87DFFFF7DFF7D7DFFFF7D%FD04A87DFFFFA87DA87DFFFF7D7DFF7D7DFFA87DFFFF84A8FFA87D7DFFFF%7EA8FFA87EFFFF52FFFFA87DFFFF7DA8FF7DA8FD05FF7DFFA87DFFFFA87D%FF7DFD04FFA87DFD04FFA87DFF52A87D7DA8FF527DA8FFFFFF52FFFF7D7D%FFA87DFFFF7DA8FF7DA8FFFD057DFF7E527DFFFFA87DFFFF7DA8A87DFFFF%7DA8A87DFF7DFFFFA87DFF7DA87D7DA8FF7D52FF7D7DFFFF7DA8FFFFFF7D%7DFF7DA8FFA87DFFA87DA8FF7D7DFFFF52FFFF7DA8FD05FF52FFA87DFFFF%7DA8A87DFD04FFA87DFD04FF7D84A87DA8FFFFFFA87D7D7DA8FFA87DFFFF%7DA8FFA852FFFF7D7DFF53A8FF7D7DFD04FFFD047DFFA87DFFFF7DA87D7D%FFFF52A9A87DA87DA8FF7D7DFF7D7DA8A8FFA87D7DFFA87DFFFF7DA8FFA8%A87DA8FFA87DFFA87DFFFF59A8FFAF52A87D7DA8FF7D7EA8FD04FF7DFFFF%7DA8A87DA8FF7DFD05FF52A8A8A8FFA87DFF7D7DA8A8A8FF59FF7D7DFFFF%52A8FF7E7DFFFF7D7DA859FFFF847DFFA87DA8A8A8FF7DA8A87DA8FF7DFF%FF7DA8FF59A87D7DFFA87DFF7D7DA87DA8FF7D7E7DA8FFFF527DFFA8A8FF%FFA8FFA87D7DA8FFFFA87DA8FFA8FFFFA87DA8FFA87DA87EFFFFFF7DA8FD%04FF7DFFFFFF7D7EA8FFA8A8FD05FFA87DA87DFFA8A8FFFF7D7E7DA8FFA8%FFFF7DFFFFA87DFFA8A8FFFFA87D7DFFFFFFA87DA8FFA8A87DA8FFA8A8FF%FD04A8FFFFA8FFFFFF7D7DA8FFA8A8FFFF7D7DA8FFA87DFFFF7D7DFFA8FD%79FF7DFFFFA87DFD7BFFA87D7D7DFDFCFFFDFCFFFDFCFFFD8FFFFD5027F8%7DFD2EFF27F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F82752FD2EFFF8%27F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8%F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F8%27F8F8F827F8F8F827F8F8F827F8F8F827F8F8F852FD2EFF7D527D7D7D52%7D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D%7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D52%7D7D7D527D7D7D527D7D7D52FD047DFDADFFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Web</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2008-01-14T12:14:01+01:00</xap:CreateDate>
         <xap:ModifyDate>2008-02-27T18:09:02+01:00</xap:ModifyDate>
         <xap:MetadataDate>2008-02-27T18:09:02+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>68</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgARAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AW/JH8j/J3nf8uhr2pyXk&#xA;OvzXM8aanBcOrx+maKQpqp671GFWSflXoSfmj5Gk0vzxd3l7e+U9UubCG9huHikljCR0Mrg1kI3F&#xA;W3pTvXFUn/Jj8ovK3mOfzNNqc1+76Jr1xY2PC7lQCGAqUDUPxHxOKsw/Ka4uJPzs/NGOSV3jjmtO&#xA;CMxKr/edAemKonSZ5j/zlJrUJkYwjyyjCOp4hvrFvvTpXAr0rzXf3Gn+V9Yv7Y0uLOxuZ4SezxQs&#xA;6/iMVfLn5b+VPyK17ylZa3578y0813jzyX4uNREcqlZ3SOob4t41VqnxwqzD/nIPyx5Xs7TyLrWl&#xA;28bXb6pYWcepqxeSa0SOsXKQH95sikMcVeieffzbl8veY7TyroOg3HmbzPdw/WjYQSrAkUFSvOWZ&#xA;lkC1of2fmRUYFS7SPNfln81/Luu6J5j8vtZapoT/AO5LRL4+o0M3B/TlikURk9GHIAH6CKqsG/KP&#xA;80LLyd+TnlWwispNZ8waxe3UGm6NbuFlcG6cNIzENwRTtUjr7AkFU7/Of8xfzK8v+avJ1np2mtb2&#xA;l7fwq8dvcwSfpJi0POz+ONXiozlOZ2Na/JVk3nv82/MHkzy5YeYNT8oyGxuI4vryi+gEtrcSsQIW&#xA;QK3PYD4l+mmBVK+/Ou90Xyfc+Y/NHlW80V3uY7TRNLeVJbq9eVSy1QKphI4nkGrT3O2Ku8r/AJ06&#xA;hd+bbPyt5u8q3XlTUtUjaTSWmmW5in4jkULqkXB6DpvvsaEjFXqOKuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KvmL8iPzv/LnyZ+V66brWoumrQz3Mw0+K3nkdw5BQLIE9Gre7jCr0D/nGfQd&#xA;ZsPJWo6rq1q1lP5h1OfUoLVwQywyKioSGAPxFWI/yaHvgKqf/OOf/Tff+BRff8a4VY7ZeatI/LL8&#xA;8vOU3m9pbDS/MyW9zpep+lJJC/pj4k/dK7V5SFem3HelRiqYflbqw85/np5n88aRHK/lePS49Ks7&#xA;6WNolmk5wOeAcKesLnxApWlaYq9d83WVxfeVNasbZedzdWFzDAni8kLKo+knAr5u/KLzl/zj1pXk&#xA;HT9M87WOnJ5mtHuY9QN7pDXMzE3EjpylW3mrxjZVozVFKUwqzL/nIqbT5/K/kGfTQo02XW7F7P01&#xA;9NPRaJjHxSi8RwpQU2xVIvzahg0T89I9Y1zW9S8saHq+krbW+vaXyqJo3HKCVgkh4nhUgDup6VxV&#xA;k/5Q6d+Xct55u1zyx5qv/NGpz20cWr3N+jqVqsnpHlJDDzJ9IioJoB74q8e/KyHU/wAv9M8vfmu1&#xA;v+lvLtz9Y0zV4uPOawVrlkWaAn7Ib8SWU/bBxV6j+fuvaRJqP5Veao7lX8vRazDdyaigLRCH1IJe&#xA;RoK/YjY0pXY4qjf+cltY03WfyO/SmmTrdafeXNpLbXCggOhc0IDAH7xiqJ/5yXs72PSPLHmOKCS4&#xA;sfLuswXuppCvJkgBqZKeAKcfpxCsf8wecdC/M/8AOD8vY/JssuoW/l6WfUNVvBDJHFFG5hcK3qhD&#xA;X9xxO1KsBuajFX0LgV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVBDRNGFyLoWFsLlTUT+&#xA;inqA9PtUriqNxVbHFFHy9NFTmxZ+IAqx6k074qp3dlZ3kXo3cEdxFWvpyorrUezAjFVSKGKGNYoU&#xA;WONBRUQBVA9gMVXYqgp9E0ae4+sz2FtLcVB9Z4UZ6jcfERXFUU8ELqqvGrKhDICAQCOhFelMVaub&#xA;W2uoWhuYUnhb7Ucih1PzDVGKrbWzs7SP07WCO3j/AJIkVF+5QMVXC2txD6AiQQ9PSCjjua/Z6Yqs&#xA;msbKe2+qzW8Uttt+4dFZNtx8JFMVX/Vrb0Vg9JPQUALFxHEBelF6bYqqEAggioOxBxVQtLCxs1Zb&#xA;S3it1c8nWJFQE+J4gVOKq+KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvPfKXmtNH/Lyx&#xA;1HUBPd+pcvB8B9SQl5HI+0RXphVPNP8AO6T6pbaffaXeaW96G+ovdIFEhQVKmhPFqdsCqbee2mvb&#xA;q30zRrzUYbOZre4uYuAT1E+0F5NviqF8z+b9ZsNW0m3ttOulhnlUyjjExnVo+RiSrHiyk79Onhiq&#xA;Mmu7ObzTpE0sN5DqbWU0sVpyjEYUj4klWv2/ChpiqXaL5z1y6836jp8+nXX1RDbJHb8YeVrzUc5J&#xA;WDbq1eWxO2Kso0bW7bVvr3oI6fULuWxl50+J4acmWhPwnltirF9b8/XMvks63o1pOnr81W4ZYmFu&#xA;UkCcpFJb7W9KA++Ksl8t6rdanpkdxc2c1pKAoPrhQZKoDzXiT8JJxVh3nu/nu/Muj6XcaZezWAe5&#xA;Z7eFwn1srECpjKOp/dnc1I2wqnc/nKCznXStN0q8v7m0hia5ghAb6urKCqO7MavTtv8APAqrJ590&#xA;dfLq67HHNLbmZbd7dVHrJKTQoyk9R88VTbRdTn1G0a4msZ9PPMqkNyFWQrQEPxUmla0ocVYP6ema&#xA;15q15de1WS2jsZY4bGAXX1dAnE8iFqKmoFcKo3X4LHTvL+kxaTdvPbNq9sPWExlJ5MeSlwdx7Yqn&#xA;OsecY7LUzpVlYXOqX8aCW4itgKRK32ebE7EjoMCpB5z8zwar+X17fae01tLDPHDPE9Y5opFlXkjA&#xA;HY7+OFWSz+arYa22j2dtLfXUMZlumg4cIdiVR2ZlHJuwwKkXl3zjrd75o1SxudPuTbJJbpFFxiH1&#xA;QOrcjMwNTz6jc4qmmmedodS1KW0tdOuvQtppYLu/dUW3jMVdy/I1rTp2riqCP5lWZje9TS719ER+&#xA;DaqsY9PZuJYLXlwr3xVS82ecdVsdT0mHT7Sd7S5njrMixOt1G6hvTiJJIO/emKppqfnKOyNlbLp9&#xA;1c6rfResmmxqpljQdTIa8VodsVQGpeaoNV8qa+kUU9hqNhbutzazDhLGWQlWBB3B7HFVXR/NVtb6&#xA;f5d0sRy32p3tlbPJHFRjGhiXlLKzEUH68VXXPnzjqF5YWWjX1/PYyenO0CKYxtX7dep7CmKokeed&#xA;E/w0vmAmQWzt6Yg41mM1ePpBa/aqPHFVml+dYrnVIdMv9OutKurpWazFyoCyhRUgMDswHbFUD5f1&#xA;mHT08132oTMLWz1KYkklqLxUBVHuTQDFURZefoZLu0hvtLvNNg1BhHZXVwgEbs32VahPEt2xVE3/&#xA;AJyhg1SfTLLT7vU7q1Cm7+qopSPmKqrMzL8RHbFUm1XzZpOueTtYnu7W+s7OzliguVQxpceoJU+F&#xA;aluJViOXIYqxi2/8ldof/bVT/k7JhQzbziB+n/Kp7/Xm3/554pSLzJNo+jXV9r3lzXLa11IOWv8A&#xA;SjIkkdw6tRgYgeSvWu4/Dc4qmPmnUYzP5P1G8pZxvcrLP6pCrEXhqQzGgFCaYqibueGf8w9FmgkW&#xA;WGTT7ho5EIZWUkEFSNiMVQ2k3tlafmV5jjuriOCS6WxW1SV1Qyt6IWiBiORrtQYFUvK/mLRNGuPM&#xA;ttql3HZzjV7m4Ecp4s0cvHgyr1avHtiqTaarN+SNyFFTSQ/QLmp/DCr0Py7f2N5pFq1ncRXCxxRx&#xA;yGJ1cK4QVVuJND7YFSbzF/ynnlD/ALeP/UOuKoHRtY0vRfNfmW31WeOxkuJo7qB5iEWSIp+yx608&#xA;MKsd+KbytqGoICtpqPmIXFnyBHKJpRRgD49PoxQ9bwJeZ2aeUY/N/mVPMi2qytcRPa/XAoqjISSh&#xA;bx2wqmPmf9BfoDR/0J6H1D9MWvH6tx9PlzPL7O1cCpfcBrTz7rqXOuNoIvFt5raZhF6c6JHxPxzC&#xA;g4HYD54VQvmTTtMtfImuT2WqjV3u7yGS6uQYyPU5rUfu9u9cVT3yNIuh6jd+WNRRU1R5Huob41rf&#xA;RsSeZLEkuu9RXx8CcCrvLl7Z2vn7zTb3M8cE9zJZC2ikdUaQiJvsAkFvtDpiql5LgluPL/mq3h/v&#xA;ptSv44+3xNGgH44qltp5o0KH8r5NOluEXUVtJrNrBtpxM3JB+7PxdTWuFUTrq/o6w8hi+ItxaTWy&#xA;XLSEKsZSFQ3InYUocVU/MMsQ8+21+NY/Rdjf6d6drqkfpvE7LLyMfN6oBT4q/LFW7nT9KXSPNGoW&#xA;+ujWr6ewMdy6tEQqqp4k+lt2piqh+XkieXrq2tdTQV163t59O1M1+L90tLVia04Vov8AtYqyPyd/&#xA;x3vNP/Mcv/JsYqxIH0vKFlfOha20/wAx/WrsgV4xJK4YkfNhihPdd1fTNb8z+WbbSLmO8lt7hrqd&#xA;4CHEcKqK82Gw5dKYpSXV7S4uvLPnZLdDI6asZWRdzwRo2Y/QN8VTTzjr+j6/aaLY6PdJd3lzfW8s&#xA;cERq6IlSzSAbpxrvXFUt1DWrzRPO+vfVLuOygnNvJO0sEl1FyMdeTGH4ozudjiqrrVlaQ/ljrd3D&#xA;qKapLqFxHc3V3EAqeq9xFVQgJ408Dir0ddPsFgS3W2iWBG5pEEUIrA8uQWlAa71wKqSW8ErxvJGr&#xA;vEeUTMoJVqUqpPQ4qhm0XR2nNw1jbmctzMpiQvy615UrXFVe5tLS6i9K6hjnirX05VDrUd6MCMVa&#xA;Sys42jZII0aFfThZUUFE/lWg2HsMVWzafp81wlzNbRSXEdPTmdFZ14mo4sRUUOKtTaZps04uJrSG&#xA;W4WnGZ41ZxTpRiK4qqRWlrFb/VooUjt6EeiqgJRuo4gU3rirVrZWVohjtLeO3RjyZIkVAT0qQoGK&#xA;r3t4HljmeNWlhr6UhUFk5CjcSdxUdaYqpXenafecfrdrFccK8PVRXpXrTkDiq+S1tZIlhkhR4kIK&#xA;RsoKgr9kgEU27Yqq4qhrrS9Nu2D3dpDcOoorSxo5A8AWBxVtNN05IVgS1hWFHEiRLGoVXG4YKBQN&#xA;74q3d2FheBRd20VwF3USorgH25A4q0mm6clsbVLWFbYnkYBGojJrWvGlOoxVfLa2ssscssKSSwkm&#xA;GRlBZCevEkVH0Yqsk0/T5blbqS2ie5SnCdkUyLTpRiKimKqsUEEIYQxrGHYu/BQvJ26sadSfHFVE&#xA;6Xppuhdm0hN0DUXHpp6lfHnSuKqlzaWl1F6V1DHPFWvpyqHWo70YEYqsk07T5LZbWS1ie2SnCBo1&#xA;MYp0opFMVah0zTYIpIYLSGKGYUljSNFVxSnxACh28cVXyWVlLHHFLbxvFCQYkZFKoV2UqCKCnamK&#xA;r47eCJ5HjjVHlPKVlUAs1KVYjqcVWx2trHE0UcKJE5YvGqgKS32qgCm/fFVlppunWZY2lrDblvtG&#xA;KNUr8+IGKqkVvbxGQxRJGZWLylVA5MdizU6n3xVSttL0y2laW2tIYJW2aSONEYg77lQDirHX0HzP&#xA;p2s6jfaHLZSwam6yzwXwlVkdV4/C8QaoPgRiqI8seVW0+1vxqZguptTuDc3EEcdLdTtRUR61AIrU&#xA;4qyPFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq+Mf8Aobr81f8AfOl/9I8n/VbCrv8Aobr81f8AfOl/9I8n/VbFXf8AQ3X5q/750v8A6R5P&#xA;+q2Ku/6G6/NX/fOl/wDSPJ/1WxV3/Q3X5q/750v/AKR5P+q2Ku/6G6/NX/fOl/8ASPJ/1WxV3/Q3&#xA;X5q/750v/pHk/wCq2Ku/6G6/NX/fOl/9I8n/AFWxV3/Q3X5q/wC+dL/6R5P+q2Ku/wChuvzV/wB8&#xA;6X/0jyf9VsVd/wBDdfmr/vnS/wDpHk/6rYq7/obr81f986X/ANI8n/VbFXf9Ddfmr/vnS/8ApHk/&#xA;6rYq7/obr81f986X/wBI8n/VbFXf9Ddfmr/vnS/+keT/AKrYq7/obr81f986X/0jyf8AVbFXf9Dd&#xA;fmr/AL50v/pHk/6rYq7/AKG6/NX/AHzpf/SPJ/1WxV3/AEN1+av++dL/AOkeT/qtirv+huvzV/3z&#xA;pf8A0jyf9VsVe9/849/mZ5i/MDyzqOpa6tulxaXptohao0a8PSR9wzPvVzgV6nirsVdirsVdirsV&#xA;dirsVdirsVdirx7/AKxV/wC/X/6dsKu/6xV/79f/AKdsVd/1ir/36/8A07Yq7/rFX/v1/wDp2xV3&#xA;/WKv/fr/APTtirv+sVf+/X/6dsVd/wBYq/8Afr/9O2Ku/wCsVf8Av1/+nbFXf9Yq/wDfr/8ATtir&#xA;v+sVf+/X/wCnbFXf9Yq/9+v/ANO2Ku/6xV/79f8A6dsVd/1ir/36/wD07Yq7/rFX/v1/+nbFXf8A&#xA;WKv/AH6//Ttirv8ArFX/AL9f/p2xV3/WKv8A36//AE7Yq7/rFX/v1/8Ap2xV3/WKv/fr/wDTtirv&#xA;+sVf+/X/AOnbFWdeQP8AlXX6NuP8C/o/9Het/pX6M9P0/W4D7fp7cuNPowKyfFXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FX/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:D87339242CC4DC11B0F7C948713094C1</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:38C0031FE6F111DCA9DBE848ED1657C8</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:D77339242CC4DC11B0F7C948713094C1</stRef:instanceID>
            <stRef:documentID>uuid:D67339242CC4DC11B0F7C948713094C1</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>5080.000000</stDim:w>
            <stDim:h>5080.000000</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.609375</xapG:cyan>
                           <xapG:magenta>67.578125</xapG:magenta>
                           <xapG:yellow>66.796875</xapG:yellow>
                           <xapG:black>89.843750</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Red</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Yellow</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>6.250000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>96.093750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Green</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>62.500000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Cyan</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>51.562500</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Blue</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>87.890625</xapG:cyan>
                           <xapG:magenta>76.562500</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Magenta</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>26.953125</xapG:cyan>
                           <xapG:magenta>81.250000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=193 G=39 B=45</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>16.796875</xapG:cyan>
                           <xapG:magenta>97.656250</xapG:magenta>
                           <xapG:yellow>92.187500</xapG:yellow>
                           <xapG:black>6.640625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=28 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.390625</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>96.875000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=241 G=90 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>79.296875</xapG:magenta>
                           <xapG:yellow>96.484375</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=247 G=147 B=30</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>98.046875</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=251 G=176 B=59</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>34.765625</xapG:magenta>
                           <xapG:yellow>86.718750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=252 G=238 B=33</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>4.687500</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>92.968750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=217 G=224 B=33</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>18.750000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>97.656250</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=198 B=63</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>98.828125</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=57 G=181 B=74</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218750</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>99.218750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=146 B=69</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>85.937500</xapG:cyan>
                           <xapG:magenta>17.578125</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>3.906250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=104 B=55</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>89.843750</xapG:cyan>
                           <xapG:magenta>33.203125</xapG:magenta>
                           <xapG:yellow>98.437500</xapG:yellow>
                           <xapG:black>25.781250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=34 G=181 B=115</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.781250</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>74.609375</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=169 B=157</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>78.125000</xapG:cyan>
                           <xapG:magenta>8.984375</xapG:magenta>
                           <xapG:yellow>45.703125</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=41 G=171 B=226</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>69.531250</xapG:cyan>
                           <xapG:magenta>14.843750</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=113 B=188</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>87.109375</xapG:cyan>
                           <xapG:magenta>52.343750</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=46 G=49 B=146</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>98.828125</xapG:cyan>
                           <xapG:magenta>96.093750</xapG:magenta>
                           <xapG:yellow>3.515625</xapG:yellow>
                           <xapG:black>0.390625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=27 G=20 B=100</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>26.171875</xapG:yellow>
                           <xapG:black>24.609375</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=102 G=45 B=145</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218750</xapG:cyan>
                           <xapG:magenta>98.046875</xapG:magenta>
                           <xapG:yellow>0.781250</xapG:yellow>
                           <xapG:black>0.390625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=147 G=39 B=143</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>49.218750</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>1.171875</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=158 G=0 B=93</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>34.765625</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>37.109375</xapG:yellow>
                           <xapG:black>10.937500</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=212 G=20 B=90</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>11.718750</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>49.218750</xapG:yellow>
                           <xapG:black>0.781250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=30 B=121</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>96.484375</xapG:magenta>
                           <xapG:yellow>20.312500</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=199 G=178 B=153</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>22.656250</xapG:cyan>
                           <xapG:magenta>27.343750</xapG:magenta>
                           <xapG:yellow>39.843750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=153 G=134 B=117</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.843750</xapG:cyan>
                           <xapG:magenta>42.578125</xapG:magenta>
                           <xapG:yellow>52.343750</xapG:yellow>
                           <xapG:black>6.640625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=115 G=99 B=87</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.390625</xapG:cyan>
                           <xapG:magenta>52.734375</xapG:magenta>
                           <xapG:yellow>60.546875</xapG:yellow>
                           <xapG:black>23.437500</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=83 G=71 B=65</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>57.421875</xapG:cyan>
                           <xapG:magenta>60.156250</xapG:magenta>
                           <xapG:yellow>63.671875</xapG:yellow>
                           <xapG:black>41.796875</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=198 G=156 B=109</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>22.656250</xapG:cyan>
                           <xapG:magenta>38.281250</xapG:magenta>
                           <xapG:yellow>63.281250</xapG:yellow>
                           <xapG:black>1.171875</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=166 G=124 B=82</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>31.640625</xapG:cyan>
                           <xapG:magenta>48.828125</xapG:magenta>
                           <xapG:yellow>73.828125</xapG:yellow>
                           <xapG:black>9.765625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=98 B=57</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>35.937500</xapG:cyan>
                           <xapG:magenta>57.031250</xapG:magenta>
                           <xapG:yellow>83.593750</xapG:yellow>
                           <xapG:black>22.656250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=117 G=76 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.062500</xapG:cyan>
                           <xapG:magenta>63.671875</xapG:magenta>
                           <xapG:yellow>92.968750</xapG:yellow>
                           <xapG:black>35.546875</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=96 G=56 B=19</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>41.406250</xapG:cyan>
                           <xapG:magenta>69.531250</xapG:magenta>
                           <xapG:yellow>96.484375</xapG:yellow>
                           <xapG:black>48.828125</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=66 G=33 B=11</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>47.656250</xapG:cyan>
                           <xapG:magenta>73.046875</xapG:magenta>
                           <xapG:yellow>83.203125</xapG:yellow>
                           <xapG:black>67.968750</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Web Color Group</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=236 G=28 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.781250</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>96.875000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=169 B=157</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>78.125000</xapG:cyan>
                           <xapG:magenta>8.984375</xapG:magenta>
                           <xapG:yellow>45.703125</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=102 G=45 B=145</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218750</xapG:cyan>
                           <xapG:magenta>98.046875</xapG:magenta>
                           <xapG:yellow>0.781250</xapG:yellow>
                           <xapG:black>0.390625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=139 G=146 B=152 1</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>48.437500</xapG:cyan>
                           <xapG:magenta>36.328125</xapG:magenta>
                           <xapG:yellow>33.593750</xapG:yellow>
                           <xapG:black>1.562500</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Grayscale</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=90</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>229</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=80</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>204</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=70</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>178</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=60</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>153</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=50</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>127</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=40</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>101</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=30</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>76</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=20</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>50</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=10</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>25</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=5</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>12</xapG:gray>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -36.6602 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 36.6602 li144.107 36.6602 li144.107 0 licpclp[1 0 0 1 0 0 ] concat91.8145 33.0889 mo91.8145 36.6602 li0 36.6602 li0 33.0889 li91.8145 33.0889 licpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0 0 1 cmykf5.33105 8.27051 mo4.69238 8.90039 3.73047 9.18652 2.56152 9.18652 cv1.67773 9.18652 0.638672 9.11426 0.283203 9.05371 cv0.103516 9.02441 0 8.92773 0 8.71777 cv0 0.541016 li0 0.336914 0.103516 0.234375 0.283203 0.204102 cv0.638672 0.143555 1.67773 0.0722656 2.56152 0.0722656 cv3.71875 0.0722656 4.6748 0.348633 5.3125 0.964844 cv6.07227 1.69824 6.27148 2.7041 6.27148 4.06543 cv6.27148 5.19238 li6.27148 6.53906 6.0791 7.5332 5.33105 8.27051 cvcp4.89453 4.12207 mo4.89453 2.96191 4.74121 2.24609 4.22656 1.76855 cv3.80859 1.38184 3.22461 1.24414 2.56152 1.24414 cv2.05664 1.24414 1.71387 1.2627 1.38965 1.28027 cv1.38965 7.9834 li1.70801 8.00195 2.05664 8.01367 2.56152 8.01367 cv3.25195 8.01367 3.85547 7.86328 4.27734 7.43848 cv4.76172 6.94824 4.89453 6.26074 4.89453 5.13574 cv4.89453 4.12207 licp17.6172 9.18652 mo15.6758 9.18652 14.4248 8.24902 14.4248 5.81934 cv14.4248 0.390625 li14.4248 0.264648 14.5273 0.162109 14.6602 0.162109 cv15.5791 0.162109 li15.7051 0.162109 15.8145 0.258789 15.8145 0.390625 cv15.8145 5.81934 li15.8145 7.28027 16.2227 8.02637 17.6172 8.02637 cv19.0117 8.02637 19.4209 7.28613 19.4209 5.81934 cv19.4209 0.390625 li19.4209 0.264648 19.5234 0.162109 19.6553 0.162109 cv20.5752 0.162109 li20.7012 0.162109 20.8096 0.258789 20.8096 0.390625 cv20.8096 5.81934 li20.8096 8.24902 19.5586 9.18652 17.6172 9.18652 cvcp13.0586 1.3291 mo10.834 1.3291 li10.834 8.85547 li10.834 8.98145 10.7383 9.0957 10.6055 9.0957 cv9.67969 9.0957 li9.55273 9.0957 9.45117 8.9873 9.45117 8.85547 cv9.45117 1.3291 li7.22656 1.3291 li7.09473 1.3291 6.98633 1.25684 6.98633 1.12402 cv6.98633 0.383789 li6.98633 0.258789 7.09473 0.162109 7.22656 0.162109 cv13.0586 0.162109 li13.1904 0.162109 13.293 0.25293 13.293 0.383789 cv13.293 1.12402 li13.293 1.25 13.1904 1.3291 13.0586 1.3291 cvcp44.8984 8.84961 mo44.8984 8.98145 45.0059 9.0957 45.1387 9.0957 cv45.9805 9.0957 li46.1113 9.0957 46.2207 8.98145 46.2207 8.84961 cv46.2207 5.90527 li48.6504 8.89746 li48.7422 9.01172 48.8418 9.0957 48.9746 9.0957 cv50.2285 9.0957 li50.3193 9.0957 50.374 9.02441 50.3682 8.94531 cv50.3652 8.90918 50.3506 8.87402 50.3242 8.84277 cv47.5107 5.53809 li49.8613 2.65723 li49.8945 2.61523 49.9102 2.57324 49.9082 2.53027 cv49.9043 2.45313 49.8408 2.39844 49.7207 2.39844 cv48.6543 2.39844 li48.5586 2.39844 48.4766 2.42871 48.4033 2.52441 cv46.2207 5.39063 li46.2207 0.240234 li46.2207 0.108398 46.1113 0 45.9805 0 cv43.6426 0 li43.5098 0 43.4072 0.108398 43.4072 0.241211 cv43.4072 0.241211 43.4072 0.186523 43.4072 0.318359 cv43.4072 0.450195 43.4961 0.55957 43.6426 0.602539 cv44.8984 0.967773 li44.8984 8.84961 licp42.5 7.91895 mo41.959 7.96191 41.123 8.03809 40.335 8.03809 cv39.2051 8.03809 38.7773 7.3584 38.7773 6.29395 cv38.7773 6.19238 li42.752 6.19238 li42.9082 6.19238 42.9863 6.08398 42.9863 5.90918 cv42.9863 5.53223 li42.9863 3.7832 42.3398 2.31445 40.2324 2.31445 cv38.1504 2.31445 37.4551 3.73535 37.4551 5.53223 cv37.4551 5.9502 li37.4551 8.25293 38.6035 9.18652 40.2754 9.18652 cv41.2188 9.18652 41.7832 9.11621 42.5176 8.98145 cv42.7217 8.94434 42.7637 8.86133 42.7637 8.68652 cv42.7637 8.08594 li42.7637 7.96582 42.6563 7.90625 42.5479 7.91504 cv42.5 7.91895 licp41.6514 5.22461 mo38.7832 5.22461 li38.7832 5.14551 li38.7832 4.00977 39.3428 3.44531 40.2324 3.44531 cv41.1348 3.44531 41.6514 3.98535 41.6514 5.14551 cv41.6514 5.22461 licp55.9854 2.39844 mo55.8535 2.39844 55.751 2.50684 55.751 2.63965 cv55.751 2.63965 55.751 2.58496 55.751 2.7168 cv55.751 2.84863 55.8398 2.95801 55.9854 3.00098 cv57.1924 3.36719 li57.1924 8.84961 li57.1924 8.98145 57.3008 9.0957 57.4268 9.0957 cv58.2744 9.0957 li58.4063 9.0957 58.5156 8.97559 58.5156 8.84961 cv58.5156 3.91309 li59.0684 3.60059 59.5723 3.44434 60.1738 3.44434 cv60.3242 3.44434 60.4199 3.35449 60.4199 3.22266 cv60.4199 2.54297 li60.4199 2.40527 60.3242 2.31445 60.1738 2.31445 cv59.6631 2.31445 59.0859 2.43945 58.4102 2.93066 cv58.4004 2.63965 li58.3955 2.50684 58.2891 2.39844 58.1572 2.39844 cv55.9854 2.39844 licp52.0107 7.4248 mo52.0107 8.8916 52.5527 9.18652 53.7852 9.18652 cv54.0313 9.18652 54.3193 9.15527 54.584 9.11426 cv54.7402 9.08984 54.8066 9.01855 54.8066 8.90332 cv54.8066 8.31445 li54.8066 8.19434 54.7168 8.13965 54.5537 8.13965 cv53.8984 8.13965 li53.4414 8.13965 53.3398 8.05566 53.3398 7.4248 cv53.3398 3.43848 li54.5293 3.43848 li54.6621 3.43848 54.7705 3.33105 54.7705 3.19824 cv54.7705 2.63965 li54.7705 2.50684 54.6621 2.39844 54.5293 2.39844 cv53.3398 2.39844 li53.3398 1.12402 li53.3398 0.989258 53.2266 0.912109 53.1113 0.931641 cv52.2393 1.07617 li52.1025 1.09863 52.0107 1.2002 52.0107 1.31641 cv52.0107 2.39844 li50.8535 2.39844 li50.7334 2.39844 50.6406 2.49512 50.6406 2.62695 cv50.6406 2.72363 li50.6406 2.85547 50.7334 2.95605 50.8535 3.00293 cv52.0107 3.37695 li52.0107 7.4248 licp66.7344 6.22168 mo66.7344 5.27832 li66.7344 3.53418 65.7852 2.31445 63.957 2.31445 cv62.1299 2.31445 61.1855 3.53418 61.1855 5.27832 cv61.1855 6.22168 li61.1855 7.96582 62.1299 9.18652 63.957 9.18652 cv65.7852 9.18652 66.7344 7.96582 66.7344 6.22168 cvcp65.4121 6.22168 mo65.4121 7.33496 64.9375 8.03809 63.957 8.03809 cv62.9717 8.03809 62.5088 7.3291 62.5088 6.22168 cv62.5088 5.27832 li62.5088 4.16602 62.9775 3.46289 63.957 3.46289 cv64.9434 3.46289 65.4121 4.17285 65.4121 5.27832 cv65.4121 6.22168 licp34.3262 8.84961 mo34.3262 8.98145 34.4287 9.0957 34.5547 9.0957 cv35.4268 9.0957 li35.5586 9.0957 35.6494 8.97559 35.6494 8.84961 cv35.6494 0.234375 li35.6494 0.102539 35.5527 0 35.4268 0 cv33.0889 0 li32.957 0 32.8535 0.108398 32.8535 0.241211 cv32.8535 0.241211 32.8535 0.186523 32.8535 0.318359 cv32.8535 0.450195 32.9434 0.55957 33.0889 0.602539 cv34.3262 0.967773 li34.3262 8.84961 licp31.6992 9.07129 mo31.2783 9.12891 30.4541 9.18652 29.3848 9.18652 cv28.4473 9.18652 27.7109 9.05859 27.2334 8.56152 cv26.8662 8.17969 26.7148 7.6377 26.7148 6.83496 cv26.7148 2.42285 li26.7148 1.61035 26.8711 1.06348 27.248 0.681641 cv27.7266 0.196289 28.4561 0.0722656 29.3848 0.0722656 cv30.4541 0.0722656 31.2539 0.133789 31.6992 0.192383 cv31.8252 0.208984 31.8789 0.282227 31.8789 0.40332 cv31.8789 1.08789 li31.8789 1.19629 31.8008 1.28027 31.6934 1.28027 cv29.3066 1.28027 li28.3203 1.28027 28.0918 1.56934 28.0918 2.42285 cv28.0918 3.90723 li31.5664 3.90723 li31.6992 3.90723 31.8066 4.01563 31.8066 4.14746 cv31.8066 4.80957 li31.8066 4.94238 31.6992 5.0498 31.5664 5.0498 cv28.0918 5.0498 li28.0918 6.83496 li28.0918 7.68848 28.3203 7.97754 29.3066 7.97754 cv31.6934 7.97754 li31.8008 7.97754 31.8789 8.06152 31.8789 8.16992 cv31.8789 8.86133 li31.8789 8.98145 31.8252 9.05469 31.6992 9.07129 cvcpf55.3916 17.0557 mo54.8389 17.0557 54.334 17.2002 53.7324 17.5605 cv53.7324 22.5986 li53.7324 22.7188 53.625 22.8389 53.4922 22.8389 cv52.9023 22.8389 li52.7832 22.8389 52.6748 22.7314 52.6748 22.5986 cv52.6748 16.4668 li52.6748 16.335 52.7705 16.2266 52.9023 16.2266 cv53.4678 16.2266 li53.5996 16.2266 53.6963 16.335 53.6963 16.4668 cv53.6963 16.7197 li54.2979 16.2979 54.8506 16.1416 55.3916 16.1416 cv55.5605 16.1416 55.6445 16.2139 55.6445 16.3584 cv55.6445 16.8516 li55.6445 16.9834 55.5605 17.0557 55.3916 17.0557 cvcp50.1973 19.0752 mo50.1973 17.8496 49.7051 17.0674 48.5742 17.0674 cv47.4561 17.0674 46.9629 17.8369 46.9629 19.0752 cv46.9629 19.9893 li46.9629 21.2158 47.4443 21.9971 48.5742 21.9971 cv49.6924 21.9971 50.1973 21.2285 50.1973 19.9893 cv50.1973 19.0752 licp48.5742 22.9229 mo46.8066 22.9229 45.9043 21.7568 45.9043 19.9893 cv45.9043 19.0752 li45.9043 17.3076 46.8066 16.1416 48.5742 16.1416 cv50.3418 16.1416 51.2559 17.3076 51.2559 19.0752 cv51.2559 19.9893 li51.2559 21.7568 50.3418 22.9229 48.5742 22.9229 cvcp45.168 14.5303 mo44.5908 14.5303 li44.0254 14.5303 43.8574 14.6992 43.8574 15.3604 cv43.8574 16.2266 li45.1191 16.2266 li45.252 16.2266 45.3477 16.3223 45.3477 16.4424 cv45.3477 16.9111 li45.3477 17.0322 45.252 17.1162 45.1191 17.1162 cv43.8574 17.1162 li43.8574 22.5986 li43.8574 22.7188 43.749 22.8389 43.6289 22.8389 cv43.0391 22.8389 li42.9072 22.8389 42.7988 22.7188 42.7988 22.5986 cv42.7988 17.1162 li41.6328 16.9834 li41.5 16.9717 41.4043 16.8877 41.4043 16.7666 cv41.4043 16.4424 li41.4043 16.3223 41.5 16.2266 41.6328 16.2266 cv42.7988 16.2266 li42.7988 15.3604 li42.7988 14.0732 43.4238 13.6885 44.4824 13.6885 cv44.8066 13.6885 45 13.7256 45.1563 13.7607 cv45.2871 13.7979 45.3848 13.8457 45.3848 13.9541 cv45.3848 14.3506 li45.3848 14.4824 45.2998 14.5303 45.168 14.5303 cvcp37.5879 22.8633 mo37.3477 22.8994 37.0352 22.9229 36.8066 22.9229 cv35.7012 22.9229 35.1719 22.6348 35.1719 21.3125 cv35.1719 17.1162 li34.0049 16.9834 li33.873 16.9717 33.7773 16.8994 33.7773 16.7666 cv33.7773 16.4424 li33.7773 16.3105 33.873 16.2266 34.0049 16.2266 cv35.1719 16.2266 li35.1719 15.0479 li35.1719 14.9277 35.2559 14.8311 35.3887 14.8076 cv36.0137 14.7119 li36.0254 14.7119 36.0371 14.7119 36.0488 14.7119 cv36.1455 14.7119 36.2295 14.7959 36.2295 14.916 cv36.2295 16.2266 li37.5283 16.2266 li37.6602 16.2266 37.7695 16.335 37.7695 16.4668 cv37.7695 16.875 li37.7695 17.0078 37.6602 17.1162 37.5283 17.1162 cv36.2295 17.1162 li36.2295 21.3125 li36.2295 21.9736 36.3984 22.0693 36.8789 22.0693 cv37.5527 22.0693 li37.7207 22.0693 37.8047 22.1182 37.8047 22.2383 cv37.8047 22.6592 li37.8047 22.7666 37.7441 22.8389 37.5879 22.8633 cvcp32.4297 22.8389 mo31.8291 22.8389 li31.6973 22.8389 31.6006 22.7314 31.6006 22.5986 cv31.6006 22.3701 li30.9395 22.7432 30.3984 22.9229 29.6895 22.9229 cv28.2461 22.9229 27.5967 22.0215 27.5967 20.4229 cv27.5967 16.4668 li27.5967 16.335 27.7051 16.2266 27.8379 16.2266 cv28.4141 16.2266 li28.5469 16.2266 28.6543 16.335 28.6543 16.4668 cv28.6543 20.4229 li28.6543 21.6367 29.0635 22.0098 29.9775 22.0098 cv30.4824 22.0098 31.0469 21.8174 31.6006 21.541 cv31.6006 16.4668 li31.6006 16.3467 31.709 16.2266 31.8408 16.2266 cv32.4297 16.2266 li32.5508 16.2266 32.6582 16.335 32.6582 16.4668 cv32.6582 22.5986 li32.6582 22.7314 32.5625 22.8389 32.4297 22.8389 cvcp26.1768 22.8633 mo25.9365 22.8994 25.624 22.9229 25.3955 22.9229 cv24.2891 22.9229 23.7598 22.6348 23.7598 21.3125 cv23.7598 17.1162 li22.5938 16.9834 li22.4609 16.9717 22.3652 16.8994 22.3652 16.7666 cv22.3652 16.4424 li22.3652 16.3105 22.4609 16.2266 22.5938 16.2266 cv23.7598 16.2266 li23.7598 15.0479 li23.7598 14.9277 23.8438 14.8311 23.9766 14.8076 cv24.6016 14.7119 li24.6133 14.7119 24.626 14.7119 24.6377 14.7119 cv24.7344 14.7119 24.8184 14.7959 24.8184 14.916 cv24.8184 16.2266 li26.1172 16.2266 li26.249 16.2266 26.3574 16.335 26.3574 16.4668 cv26.3574 16.875 li26.3574 17.0078 26.249 17.1162 26.1172 17.1162 cv24.8184 17.1162 li24.8184 21.3125 li24.8184 21.9736 24.9863 22.0693 25.4678 22.0693 cv26.1406 22.0693 li26.3086 22.0693 26.3936 22.1182 26.3936 22.2383 cv26.3936 22.6592 li26.3936 22.7666 26.333 22.8389 26.1768 22.8633 cvcp20.8623 22.8389 mo20.2852 22.8389 li20.1523 22.8389 20.0449 22.7314 20.0449 22.5986 cv20.0449 16.4668 li20.0449 16.335 20.1523 16.2266 20.2852 16.2266 cv20.8623 16.2266 li20.9941 16.2266 21.1025 16.335 21.1025 16.4668 cv21.1025 22.5986 li21.1025 22.7314 20.9941 22.8389 20.8623 22.8389 cvcp20.8867 15.168 mo20.2734 15.168 li20.1406 15.168 20.0332 15.0596 20.0332 14.9277 cv20.0332 13.9658 li20.0332 13.833 20.1406 13.7256 20.2734 13.7256 cv20.8867 13.7256 li21.0186 13.7256 21.127 13.833 21.127 13.9658 cv21.127 14.9277 li21.127 15.0596 21.0186 15.168 20.8867 15.168 cvcp18.4922 22.8633 mo18.252 22.8994 17.9395 22.9229 17.7109 22.9229 cv16.6055 22.9229 16.0762 22.6348 16.0762 21.3125 cv16.0762 17.1162 li14.9102 16.9834 li14.7773 16.9717 14.6816 16.8994 14.6816 16.7666 cv14.6816 16.4424 li14.6816 16.3105 14.7773 16.2266 14.9102 16.2266 cv16.0762 16.2266 li16.0762 15.0479 li16.0762 14.9277 16.1602 14.8311 16.293 14.8076 cv16.918 14.7119 li16.9297 14.7119 16.9414 14.7119 16.9531 14.7119 cv17.0498 14.7119 17.1338 14.7959 17.1338 14.916 cv17.1338 16.2266 li18.4326 16.2266 li18.5645 16.2266 18.6729 16.335 18.6729 16.4668 cv18.6729 16.875 li18.6729 17.0078 18.5645 17.1162 18.4326 17.1162 cv17.1338 17.1162 li17.1338 21.3125 li17.1338 21.9736 17.3027 22.0693 17.7832 22.0693 cv18.457 22.0693 li18.625 22.0693 18.709 22.1182 18.709 22.2383 cv18.709 22.6592 li18.709 22.7666 18.6484 22.8389 18.4922 22.8633 cvcp11.6895 22.9229 mo11.2441 22.9229 10.3789 22.8877 9.78906 22.7432 cv9.63379 22.707 9.53711 22.6348 9.53711 22.5029 cv9.53711 22.0811 li9.53711 21.9736 9.63379 21.9014 9.75391 21.9014 cv9.77734 21.9014 9.78906 21.9014 9.80176 21.9014 cv10.3789 21.9736 11.2559 22.0342 11.6895 22.0342 cv12.4707 22.0342 12.8799 21.8291 12.8799 21.1797 cv12.8799 20.8193 12.6641 20.5908 11.9785 20.1816 cv10.7637 19.46 li10.0303 19.0156 9.53711 18.499 9.53711 17.7412 cv9.53711 16.4912 10.4746 16.1416 11.7129 16.1416 cv12.3867 16.1416 13.0244 16.2021 13.5898 16.2979 cv13.7461 16.3223 13.8174 16.4063 13.8174 16.5391 cv13.8174 16.9355 li13.8174 17.0801 13.7334 17.1396 13.6133 17.1396 cv13.6016 17.1396 13.5898 17.1396 13.5771 17.1396 cv13.1563 17.1045 12.3867 17.0439 11.7129 17.0439 cv11.04 17.0439 10.5957 17.1279 10.5957 17.7412 cv10.5957 18.1025 10.8721 18.3301 11.4248 18.6553 cv12.6152 19.3643 li13.6133 19.9541 13.9375 20.4707 13.9375 21.1797 cv13.9375 22.4063 13.0361 22.9229 11.6895 22.9229 cvcp7.87793 22.8389 mo7.30078 22.8389 li7.16797 22.8389 7.06055 22.7314 7.06055 22.5986 cv7.06055 18.6436 li7.06055 17.4287 6.65234 17.0557 5.73828 17.0557 cv5.23242 17.0557 4.66797 17.248 4.11523 17.5244 cv4.11523 22.5986 li4.11523 22.7188 4.00586 22.8389 3.87402 22.8389 cv3.28516 22.8389 li3.16504 22.8389 3.05664 22.7314 3.05664 22.5986 cv3.05664 16.4668 li3.05664 16.335 3.15234 16.2266 3.28516 16.2266 cv3.88672 16.2266 li4.01855 16.2266 4.11523 16.335 4.11523 16.4668 cv4.11523 16.6953 li4.77539 16.3223 5.31641 16.1416 6.02637 16.1416 cv7.46875 16.1416 8.11914 17.0439 8.11914 18.6436 cv8.11914 22.5986 li8.11914 22.7314 8.00977 22.8389 7.87793 22.8389 cvcp0.964844 22.8389 mo0.302734 22.8389 li0.182617 22.8389 0.0859375 22.7314 0.0859375 22.5986 cv0.0859375 14.1338 li0.0859375 14.0137 0.170898 13.9053 0.302734 13.9053 cv0.964844 13.9053 li1.08398 13.9053 1.18066 14.001 1.18066 14.1338 cv1.18066 22.5986 li1.18066 22.7188 1.09668 22.8389 0.964844 22.8389 cvcp143.842 22.8408 mo143.266 22.8408 li143.133 22.8408 143.025 22.7314 143.025 22.5996 cv143.025 16.4668 li143.025 16.335 143.133 16.2266 143.266 16.2266 cv143.842 16.2266 li143.975 16.2266 144.083 16.335 144.083 16.4668 cv144.083 22.5996 li144.083 22.7314 143.975 22.8408 143.842 22.8408 cvcp143.867 15.168 mo143.254 15.168 li143.121 15.168 143.013 15.0596 143.013 14.9277 cv143.013 13.9658 li143.013 13.833 143.121 13.7246 143.254 13.7246 cv143.867 13.7246 li143.999 13.7246 144.107 13.833 144.107 13.9658 cv144.107 14.9277 li144.107 15.0596 143.999 15.168 143.867 15.168 cvcp140.355 18.3545 mo140.355 17.6338 140.03 17.0684 138.732 17.0684 cv137.385 17.0684 137.108 17.6816 137.108 18.3545 cv137.108 18.4512 li137.108 18.9795 137.35 19.6777 138.732 19.6777 cv140.03 19.6777 140.355 19.1729 140.355 18.4512 cv140.355 18.3545 licp140.451 23.2852 mo140.451 22.8164 140.066 22.624 138.984 22.3467 cv137.625 21.999 li137.276 22.2998 137.036 22.5996 137.036 23.2256 cv137.036 23.333 li137.036 24.0068 137.434 24.4277 138.768 24.4277 cv140.139 24.4277 140.451 24.043 140.451 23.3818 cv140.451 23.2852 licp141.426 17.0322 mo140.992 17.1162 li141.209 17.3447 141.401 17.7061 141.401 18.3545 cv141.401 18.4512 li141.401 19.7744 140.584 20.5068 138.732 20.5068 cv138.095 20.5068 137.686 20.4111 137.337 20.2666 cv137.133 20.3633 137.036 20.4951 137.036 20.6758 cv137.036 20.8799 137.133 20.9883 137.409 21.0605 cv139.201 21.5176 li140.379 21.8184 141.51 22.1553 141.51 23.2852 cv141.51 23.3818 li141.51 24.5361 140.74 25.2451 138.768 25.2451 cv136.868 25.2451 136.002 24.5117 136.002 23.333 cv136.002 23.2256 li136.002 22.5518 136.363 21.999 136.76 21.6982 cv136.676 21.6611 li136.291 21.4932 136.123 21.0967 136.123 20.7236 cv136.123 20.7119 li136.123 20.3877 136.278 20.0381 136.615 19.8467 cv136.242 19.4971 136.063 19.0645 136.063 18.4512 cv136.063 18.3545 li136.063 17.2842 136.664 16.2266 138.732 16.2266 cv141.365 16.2266 li141.51 16.2266 141.643 16.3467 141.643 16.4912 cv141.643 16.8037 li141.643 16.96 141.558 17.0078 141.426 17.0322 cvcp133.693 19.0762 mo133.693 17.8496 133.2 17.0684 132.07 17.0684 cv130.951 17.0684 130.459 17.8379 130.459 19.0762 cv130.459 19.9902 li130.459 21.2168 130.939 21.999 132.07 21.999 cv133.188 21.999 133.693 21.2295 133.693 19.9902 cv133.693 19.0762 licp132.07 22.9248 mo130.303 22.9248 129.4 21.7578 129.4 19.9902 cv129.4 19.0762 li129.4 17.3086 130.303 16.1416 132.07 16.1416 cv133.838 16.1416 134.752 17.3086 134.752 19.0762 cv134.752 19.9902 li134.752 21.7578 133.838 22.9248 132.07 22.9248 cvcp127.645 22.8408 mo127.02 22.8408 li126.898 22.8408 126.803 22.7314 126.803 22.5996 cv126.803 14.0264 li126.803 13.9053 126.887 13.7969 127.02 13.7969 cv127.645 13.7969 li127.765 13.7969 127.861 13.8936 127.861 14.0264 cv127.861 22.5996 li127.861 22.7197 127.777 22.8408 127.645 22.8408 cvcp124.205 19.0762 mo124.205 17.8496 123.713 17.0684 122.582 17.0684 cv121.464 17.0684 120.971 17.8379 120.971 19.0762 cv120.971 19.9902 li120.971 21.2168 121.451 21.999 122.582 21.999 cv123.7 21.999 124.205 21.2295 124.205 19.9902 cv124.205 19.0762 licp122.582 22.9248 mo120.814 22.9248 119.912 21.7578 119.912 19.9902 cv119.912 19.0762 li119.912 17.3086 120.814 16.1416 122.582 16.1416 cv124.35 16.1416 125.264 17.3086 125.264 19.0762 cv125.264 19.9902 li125.264 21.7578 124.35 22.9248 122.582 22.9248 cvcp118.253 22.8408 mo117.676 22.8408 li117.543 22.8408 117.436 22.7314 117.436 22.5996 cv117.436 18.6436 li117.436 17.4287 117.026 17.0557 116.112 17.0557 cv115.607 17.0557 115.042 17.249 114.488 17.5244 cv114.488 22.5996 li114.488 22.7197 114.381 22.8408 114.248 22.8408 cv113.659 22.8408 li113.539 22.8408 113.431 22.7314 113.431 22.5996 cv113.431 16.4668 li113.431 16.335 113.527 16.2266 113.659 16.2266 cv114.261 16.2266 li114.393 16.2266 114.488 16.335 114.488 16.4668 cv114.488 16.6953 li115.15 16.3223 115.691 16.1416 116.4 16.1416 cv117.844 16.1416 118.493 17.0439 118.493 18.6436 cv118.493 22.5996 li118.493 22.7314 118.385 22.8408 118.253 22.8408 cvcp112.06 22.8408 mo111.194 22.8408 li111.062 22.8408 111.014 22.8037 110.918 22.6836 cv108.524 19.7256 li108.524 22.5996 li108.524 22.7314 108.416 22.8408 108.284 22.8408 cv107.707 22.8408 li107.574 22.8408 107.467 22.7314 107.467 22.5996 cv107.467 14.0381 li107.467 13.9053 107.574 13.7969 107.707 13.7969 cv108.284 13.7969 li108.416 13.7969 108.524 13.9053 108.524 14.0381 cv108.524 19.04 li110.93 16.335 li111.002 16.251 111.05 16.2266 111.17 16.2266 cv112.012 16.2266 li112.132 16.2266 112.192 16.2861 112.192 16.3584 cv112.192 16.4072 112.168 16.4541 112.132 16.4912 cv109.486 19.3525 li112.156 22.5752 li112.18 22.5996 112.192 22.6475 112.192 22.6836 cv112.192 22.7686 112.145 22.8408 112.06 22.8408 cvcp104.953 18.9561 mo104.953 17.5967 104.436 17.0684 103.378 17.0684 cv102.344 17.0684 101.767 17.6572 101.767 18.9561 cv101.767 19.0645 li104.953 19.0645 li104.953 18.9561 licp105.795 19.8701 mo101.767 19.8701 li101.767 20.0381 li101.767 21.4697 102.332 21.999 103.438 21.999 cv104.135 21.999 105.025 21.9502 105.578 21.8662 cv105.603 21.8662 105.614 21.8662 105.639 21.8662 cv105.734 21.8662 105.83 21.915 105.83 22.0342 cv105.83 22.4434 li105.83 22.5996 105.783 22.6836 105.59 22.7197 cv104.904 22.8525 104.244 22.9248 103.438 22.9248 cv102.055 22.9248 100.708 22.2744 100.708 20.0381 cv100.708 18.9561 li100.708 17.2363 101.658 16.1416 103.378 16.1416 cv105.133 16.1416 106.023 17.249 106.023 18.9561 cv106.023 19.6055 li106.023 19.7617 105.939 19.8701 105.795 19.8701 cvcp99.5898 22.8643 mo99.3496 22.9004 99.0371 22.9248 98.8086 22.9248 cv97.7012 22.9248 97.1729 22.6357 97.1729 21.3135 cv97.1729 17.1162 li96.0059 16.9834 li95.874 16.9717 95.7773 16.8994 95.7773 16.7676 cv95.7773 16.4424 li95.7773 16.3105 95.874 16.2266 96.0059 16.2266 cv97.1729 16.2266 li97.1729 15.0479 li97.1729 14.9277 97.2568 14.8311 97.3887 14.8076 cv98.0146 14.7109 li98.0264 14.7109 98.0381 14.7109 98.0508 14.7109 cv98.1465 14.7109 98.2305 14.7949 98.2305 14.916 cv98.2305 16.2266 li99.5293 16.2266 li99.6621 16.2266 99.7705 16.335 99.7705 16.4668 cv99.7705 16.876 li99.7705 17.0078 99.6621 17.1162 99.5293 17.1162 cv98.2305 17.1162 li98.2305 21.3135 li98.2305 21.9746 98.3994 22.0713 98.8809 22.0713 cv99.5537 22.0713 li99.7227 22.0713 99.8066 22.1182 99.8066 22.2393 cv99.8066 22.6602 li99.8066 22.7686 99.7461 22.8408 99.5898 22.8643 cvcp94.0449 19.0762 mo94.0449 17.8496 93.5518 17.0684 92.4219 17.0684 cv91.3027 17.0684 90.8105 17.8379 90.8105 19.0762 cv90.8105 19.9902 li90.8105 21.2168 91.291 21.999 92.4219 21.999 cv93.54 21.999 94.0449 21.2295 94.0449 19.9902 cv94.0449 19.0762 licp92.4219 22.9248 mo90.6543 22.9248 89.752 21.7578 89.752 19.9902 cv89.752 19.0762 li89.752 17.3086 90.6543 16.1416 92.4219 16.1416 cv94.1895 16.1416 95.1035 17.3086 95.1035 19.0762 cv95.1035 19.9902 li95.1035 21.7578 94.1895 22.9248 92.4219 22.9248 cvcp88.8008 17.0557 mo88.248 17.0557 87.7422 17.2002 87.1406 17.5615 cv87.1406 22.5996 li87.1406 22.7197 87.0332 22.8408 86.9004 22.8408 cv86.3115 22.8408 li86.1914 22.8408 86.083 22.7314 86.083 22.5996 cv86.083 16.4668 li86.083 16.335 86.1797 16.2266 86.3115 16.2266 cv86.877 16.2266 li87.0088 16.2266 87.1055 16.335 87.1055 16.4668 cv87.1055 16.7197 li87.7061 16.2979 88.2598 16.1416 88.8008 16.1416 cv88.9688 16.1416 89.0527 16.2139 89.0527 16.3584 cv89.0527 16.8516 li89.0527 16.9834 88.9688 17.0557 88.8008 17.0557 cvcp84.5781 22.8643 mo84.3369 22.9004 84.0244 22.9248 83.7959 22.9248 cv82.6895 22.9248 82.1602 22.6357 82.1602 21.3135 cv82.1602 17.1162 li80.9941 16.9834 li80.8613 16.9717 80.7656 16.8994 80.7656 16.7676 cv80.7656 16.4424 li80.7656 16.3105 80.8613 16.2266 80.9941 16.2266 cv82.1602 16.2266 li82.1602 15.0479 li82.1602 14.9277 82.2441 14.8311 82.377 14.8076 cv83.002 14.7109 li83.0146 14.7109 83.0264 14.7109 83.0381 14.7109 cv83.1348 14.7109 83.2188 14.7949 83.2188 14.916 cv83.2188 16.2266 li84.5176 16.2266 li84.6494 16.2266 84.7578 16.335 84.7578 16.4668 cv84.7578 16.876 li84.7578 17.0078 84.6494 17.1162 84.5176 17.1162 cv83.2188 17.1162 li83.2188 21.3135 li83.2188 21.9746 83.3867 22.0713 83.8682 22.0713 cv84.541 22.0713 li84.71 22.0713 84.7939 22.1182 84.7939 22.2393 cv84.7939 22.6602 li84.7939 22.7686 84.7344 22.8408 84.5781 22.8643 cvcp79.9971 22.8408 mo79.1309 22.8408 li78.999 22.8408 78.9512 22.8037 78.8545 22.6836 cv76.4619 19.7256 li76.4619 22.5996 li76.4619 22.7314 76.3535 22.8408 76.2207 22.8408 cv75.6445 22.8408 li75.5117 22.8408 75.4033 22.7314 75.4033 22.5996 cv75.4033 14.0381 li75.4033 13.9053 75.5117 13.7969 75.6445 13.7969 cv76.2207 13.7969 li76.3535 13.7969 76.4619 13.9053 76.4619 14.0381 cv76.4619 19.04 li78.8672 16.335 li78.9395 16.251 78.9873 16.2266 79.1074 16.2266 cv79.9492 16.2266 li80.0693 16.2266 80.1289 16.2861 80.1289 16.3584 cv80.1289 16.4072 80.1055 16.4541 80.0693 16.4912 cv77.4238 19.3525 li80.0938 22.5752 li80.1172 22.5996 80.1289 22.6475 80.1289 22.6836 cv80.1289 22.7686 80.0811 22.8408 79.9971 22.8408 cvcp72.8906 18.9561 mo72.8906 17.5967 72.373 17.0684 71.3145 17.0684 cv70.2803 17.0684 69.7031 17.6572 69.7031 18.9561 cv69.7031 19.0645 li72.8906 19.0645 li72.8906 18.9561 licp73.7324 19.8701 mo69.7031 19.8701 li69.7031 20.0381 li69.7031 21.4697 70.2686 21.999 71.375 21.999 cv72.0723 21.999 72.9629 21.9502 73.5156 21.8662 cv73.5391 21.8662 73.5518 21.8662 73.5762 21.8662 cv73.6719 21.8662 73.7676 21.915 73.7676 22.0342 cv73.7676 22.4434 li73.7676 22.5996 73.7197 22.6836 73.5273 22.7197 cv72.8418 22.8525 72.1807 22.9248 71.375 22.9248 cv69.9922 22.9248 68.6455 22.2744 68.6455 20.0381 cv68.6455 18.9561 li68.6455 17.2363 69.5957 16.1416 71.3145 16.1416 cv73.0703 16.1416 73.9609 17.249 73.9609 18.9561 cv73.9609 19.6055 li73.9609 19.7617 73.877 19.8701 73.7324 19.8701 cvcp66.8896 22.8408 mo66.2646 22.8408 li66.1445 22.8408 66.0479 22.7314 66.0479 22.5996 cv66.0479 14.0264 li66.0479 13.9053 66.1318 13.7969 66.2646 13.7969 cv66.8896 13.7969 li67.0098 13.7969 67.1064 13.8936 67.1064 14.0264 cv67.1064 22.5996 li67.1064 22.7197 67.0215 22.8408 66.8896 22.8408 cvcp64.3281 22.8643 mo63.8711 22.9131 62.6934 22.9248 61.9834 22.9248 cv60.2998 22.9248 59.4219 22.2871 59.4219 20.6875 cv59.4219 16.0576 li59.4219 14.458 60.2998 13.8213 61.9834 13.8213 cv62.6934 13.8213 63.8232 13.8447 64.3281 13.8936 cv64.4004 13.9053 64.4492 13.9893 64.4492 14.0615 cv64.4492 14.6631 li64.4492 14.7471 64.4004 14.8076 64.3164 14.8076 cv61.9951 14.8076 li60.7207 14.8076 60.5156 15.1436 60.5156 16.0576 cv60.5156 17.7295 li64.208 17.7295 li64.3398 17.7295 64.4492 17.8379 64.4492 17.9697 cv64.4492 18.4268 li64.4492 18.5596 64.3398 18.667 64.208 18.667 cv60.5156 18.667 li60.5156 20.6875 li60.5156 21.6016 60.7207 21.9385 61.9951 21.9385 cv64.3164 21.9385 li64.4004 21.9385 64.4492 21.999 64.4492 22.083 cv64.4492 22.6963 li64.4492 22.7686 64.4004 22.8525 64.3281 22.8643 cvcp0 0 0 0.56 cmykf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (PeopleGroup) (PeopleGroup)%%Title: (DTU Elektro A SH.eps)%%CreationDate: 27/02/08 18:09%AI9_DataStream%Gb",KCNCFTP2J!ls1g9.0b^hS'FI)+eU;ELI#)ilVg_%GB6Psd2B6Ig[^E5m:R7lUkLUgH"e^`AZ7+H?WMV-r;b6rm,SGr]+n=)a%e(]YIMp%T6e(]A$4joT;<F1ZDdj(uBn^U_@lggt8a)7<MpLOF1a-Ej.:q@Q(hEr#:DG4V.^%q'k_tET_rl;Y*oB"#RZeMP8]8p<[%VH7En^D:0N^9qkpQWMALmG7HgrQ($mJ>qhYo\oB+iqnMs?^>nCO/gV0=MM]+J,=KaDY`r2583hHS+E\9Mrg"nc/lpRfAZ%Vn:c4A%T3j8?mmE_b93(3%m(<;pIqB35mr,D7JH4co:]L7>o%iEJqn'33bM/NdqD1#-oCDaqe_0m67r6=gUr,FrT1ak*j0u$+gJOe:^9#0V%lhUF2JE9!JQbRr3qX3_Jo&frFj*M]iO-f$_LWSBNlcXd3OXUAc^u+e/:CgOM]>*0,hU<;gh_nI,]A&8*<Bs?]^UQ=WEL-BuoU?3c%I!57%GorpRp?D[upiYdMIhaYcHM77,0"p1u&'LH7DuUi)r2T9q7!5KGD`&$rX6R8;2;t1up_#LmF@'nEpdR]s66jj1[-b^5r"u<l%LV(`RQT&8umF9dV5WQ#iAUTqoh'e`&^YW7&A/".GAa,YGcTf5Ra&PKF*7kri:u;?nmdHK$4I/6,ZgUdrANBbX28/)6pOU+tc7T2/%<?QNlO+>ZVJIHGYBD6%GO)3qDdJmDLF#<jo*b_P^5?btn\q]*:"2AJ)JSGYoCCT09%Gtnph_#[@RqgJ2PR8h?iA["$CFE37MhSOk%1f1&`TM-#JTQ\dLWMY5En-OP2WS%\Pc"9dn2M5p[1FTS3^pf4j>sn"u!kr"mW"/KfqFgd\2q#03;ngkpp^2I;.2W`rL/K]P)(Bt=%,D+fL#"Aa1@GHG@WXE<ghs_G@#_#-6KI:LP7KgJ7h!dNn@8-/c_Bur<9#8$q2j@Gr!%.:>4XV3_((!Y'RqgBmWV=ndl5RDWH7j7a%-0PS+_>)qIZpZ]@USdKn`o)=p"lkda-EL$L(a&[1^L2.?s6uM(%M8CEV-n]?Rq@e]K^_V&LGoPL5gP.5ABq-'KQS\3GS@a:aJnp\%F6XRTQWf^NU([#!ARKUHR4p\#9r"S(@=7P`8eHKhp]r6H(Oe^h(gZZs:q!GG_Ap7?W*<q;BLSj/H;9\kZln[$k*5@1]d'W-HO4W;%F.!UX)tb4DakNe;W__O$&+uGn-;cSD3T5]r=Ps_;Dd)O-Vt`kbCKakmVaUDMh*Ujmrh+G/+^+&DQ3GHG*hZ#T8Z82a+aoXTb'U*n%Wi8sS5O^mW7E%Jk7Gjp@km'+&pdtM7:[s^X"A/XBO)sr;qO`4gaFQS4bI]q;9IBC+qO`56;u/TS:Hug"o/T+bs7CAQ6@Yp5l)0J)%`6Vl[i&An2r@NNHs'^;?R2K5>Knk-k^KB-=S'&QWWsM&]-PVt%k,!c-;RZACc(S*e#Q-sBb(UV8'`;n./`+`"*pQGg$"X\-k/CD(%3rEq9#&Ap2_K/%,$1F:KNo8QqJ^Vo/0Kr9N0b.So9A!JF+6l`'W>=!=4pRP9Z-`7GL*^dQe5,9cN0F)[5/SeQ#5<L_/<$e2Ah!s9%[_C]Z06#]s9DB!9+XNgfGV@Xb2X#Y,"+6i7]/a8_hCdiSnSTF-Zp_<8m*os"0?kWI^brC!8l=?io@0WlX.u$UpPg5?^@6_u_W:j>%c(j3:j,^*^6_>aYMS'nC_08g0kVJLKa%l*#ZLVn/-/0=sdi@>">"PJq0P6GN3ho/jE!aS5n(*<)ohZUbJ1Cofg_"u8,.OP>nicn(%(aQ3QgMkHU8?f8(T?f1=Ml]AY1F?3rplr5pf%`h9M_l'>1;s!9!M">I:peqa8V\2"<>VUB#nU?!KJP$[1t2^ja7;$$$Qr7ioago$%.W3eWOY!FFY0\%PEOBaY_I)fW%71g5_:i<K(1e`T&OILuMs>"jaW()2gJ"I,0]*OHK)rI2F6$!c$*I93^CsBf,q-IS@I5c.L=S!-%U`.[9^fl.CJi.9hPllCIa%W_iL8KDjO+:E0AL^.;Pu6URV%p&q'4EKCkBHek/b3+lQr-_51R?E+]cjM0"Hh$h/INFTm3V#!=oCec%Hd[TA/FqXo44*T38+_i62XI-_5'KIan*]l]^1jd9]Modq@BD?N\<8V)eZ1:\5%_BJQ?kli>EfcX6[NL8MtX5aPhN,d-(%TJ>NIql%F5C@ia54mAKj&/V%Zll2hHgP^e[`cY6o3EU@8qjP3gnfWDo&BAYG!i7"PE;ZijLue?f^fQrQ;*7hM]!^L9!/oaH<ehaJh8aU"RY&%1mG\#Kn"H5;chs<h:f.ajc.1^n2%M;dus>KnWn^]VFtJeC\\B_WK$,S4_e-s^n^I'@gPo+T#Kt5'?gaFPSm$)e2@W.YS1HYP=2%Q%q]K2,']8"-[(^)c[V:dt<g`M>XkgKk/Vqu`SS4-t]_`MRG*6hM?Jj8uL_n_LD8,;`%O1ioT%^&=.@&Imrr2g/p)M[CQ&.ZF9&tKb%/"_.URb#+6DORLZap$I:CbSEY+KOEMR9(aYd?))Hb<M(mG-CQf[6[!,hF_X0*qMTeH]P36cgZ-OImpdiGtgIck'tf1*o"R.G;D1H%:O"18F`MO(p.P6=]=eF?o1-'%rciX6Fo.35MkBO/f?=&H%qN2h^YaEg)bOJoJDmm1*l%5`I_9t4?iBZcp>Nou2fEVm5><bJIp%e\%4M-)-RU.Ra/jB8[`%_%/6o>&<o^X(sJrS)/5Q#e:HU$D=Q2KJ%LL:%-H%$hb1E_*lrG[%sgtpEDF0Gi*NM^n1+5`-.^:h4;rG-lt%]?+H66M^S)a,a?]k(anmo]hpU5ke!:]DK9g9.7LQ%H5KYDLH\OF`mNJmd.jgbO`FaoR%b<7,RD$ZGkAIh(mO$5NVnGAGQ,q0=P#L%+0Q>8Arn+\md;aSYElAAs*2;khVQt6q=aOM3^XiQ:N$0:]Xn''FYZ;/DD"EYEH_(b;q!EpD_H#]_@"-PSBuM-r;iFJUY"t\4tNtN%p[8o#o(;u<^,ikd],MnU2@8^tcu7iTD3dSofVj33(h:kf?G5(.'.Yr/hIPODp$V2+19fN:7t1jfIh+3G=^k/4r9'drN'=W57Id"h%s!Z#]3A"n&$-IG%:gdJ/PZC7V<JSUDY8T8q;`.KpFeTXO=fJF$FCg%V<MO!M=%tQOVU_aT>?F`SFK(P.[+7]N?#-@ODY-=moh<^)%M-cRt-rV"#N3T6<c?Rg*M4'g#R@=krYbb>c;q'<"C[8hu)am%TYu<`jF*h@4FW%bke[dZHXm=]k^2E4-4frA9s+DQ+dYF_,6d#^)%_ik,L&1nET"t@I.J]=Ba"cnthlZp,ui\4saZ4'ok/H_?5oAF'P"ccqD+?0o`#Tafr1o*/@CAY5Kk46(+#<#3W/"eFgj8,IoBP9N#%I=m`/%Ds^5k[\_WT&Id:j##5H54d*t#1[4T@].*CZV[F#hG!CTa9&rBJ9Vm-^kTt0'K@]\@A;mmb,48'LCZWSdhhdZGT*)`(CPp@%<-R1K!p!156=kI]^pOYNWGGC.!qjb>*DHXQRt1>r9S3Wb;MD)!!th,XadRp/RtM[O@4pk"X!Z&.($<%8F++baIT?S,Qir!@1NFL,%_usPK!nifhL/%e%blUnm@(7e&/[`VN`\p2bfVgVW%851*GS/]&1,9$(J5D5i:(&;,U\er8p"aa1'FtT./T76NRq3f0cC6VsYG&=\%+(Pg,/rS0;;r]+g)-4,GBjB0lc8@6@\?lpq8rK0@1GS'!^4g>aXR;h%V^&*O^=?QBD4[$FFc0ZElT'.GdT/M5&\JB]"?/>a,(>Cb%MMUrME\+Wf7$nTljk,Ic.O%([PU3-5d$F';?+.8[(^ig+D/i$5ihp7]?AFY7#:"h]2VfX;XN(QTjAYPfdb4eClS$iV'RJV=4qjGl%i+R6MY(6`aS5H_8LSM>7&c*u+8RKP?q3P7]3*'1tE=$9*Fd@)[iA";.[9,Amh^3@+DS$oQ0;H\eo:JH32O3jYNlnV-[4,mM/#inR%QF[A62=bY7W3LI`WkC%!HF%Cpl,W9?"D]D^\ZgDM6^S[NYu=\_[8hN`RW/=-ks[\a_Y42?>H1PAfAm%`-q@I%Q)Rc0`R"tE\ur]G%@$o:K7isk3$Z]\;`dtF$C40b!BK_*ReRf5*"0lQM>H;*A_/)88Y4:.DAVVI1.e*moj/GQ\IPnRQOB1&ap9=+]mHH__*hj8=WtZS^%@AJK=YmLku<h`8=(5ij5*_mN87C2Ik\#:*d@=m!5"eJV`/5Ar8jsRL!l,i"^3UnKbUcu%LeCB,&W3C4Vo98ut5+>@2PBetY`SA`(%\Xf34>ZQD9Q*\HrA2^()B%,FDf$+'9c0C^fR35g;JUs*8`Um\%T?a=_l"&LArR=R-W=:VjSlT9d/;qVZE\a%YAs;Ii!d=0lS(&)j%jAI#nR0lT1d@<&bB%BYF8^fN1ED>9A`e6L[$I#gJ$\.1!IcdPW'(G2pmsOM>OPZ,:_Kn_I[[Xh,S%-I`k?RCj&:en2SLST27=A([%lWMS8-:)G;6$oS`(1REDX9(=0$bHZoc9/$de"H7g61o6+%XQKJg!4H#mYZ/Hh%8hR--.j"/,FKqLNAfEgBI.u'j$^sP%$s)7R_gG%Dr]`e&F,;eG9<uRURqVGlmgV9f6e02KT>nIah+e>4]`o8Uh:u*91A7#FAtaB_1Ln)Q,"qCRU,H!*lY=Y/,'?Xo3t,m1Fjs8//,sb%nr2iiB[7lSa=o1VP6O$QU\qald+ZWlOUXo.b"kq6McJS_(Y(`$WfqR_jYle6g@Q(2iG@=[[QHH27K,eIb$4VMp<un:4?j9='7?[5%1dKe8;&>=LkQ:qh$3?!67R3cg85hc#TX-'K7L>uCeUZ9@/F^=q9N@`r"bmd>-a:#tK&jet"El^19J:?qMYIO;E"QV\=<UZF&muh`%$SMd^iMT!1hDDIb=^\0UhusF-+@r;.T`77m@49KjY]!tBk9R:m_"%SK%Qd2./AgZTdBs=O)sdniF;_[J"';)tmQM(BINEb4a^btd%A/3aH'fH'p=:&2`$X5u30,0n1bp$s_7G'O76,Wj[\-fj)!Ruhn]?i]cm3M$XZ`s%S]kb&A1./,cAhr-i%($-'jS3_NT/MF!!(/0Z%/!-[B/mp\P(hsUL;oB7*kG3_PMtd>>p^VH_W#;OcEFTkFKUGEMbT^MNn5;ch7'&eP+A*!ZLu9Oe"Cc14Ff5AN14e*C0`O=QhilF(%%,r5hMnhSXf\uu@#b/L:=E@n99bF78)DF2_;S`F!(=9%4ZsWp25S)5\+AIOcMac&!dc4E#VXmJbcSTu\Uhe:3D,Qshlrg-^`A>q<%Ps)]djcfBD'9t1qlM.maq"Q]9RE/;Ls.(n]SjbMR*gO,H;;(/iHn0=ir<1t^YgH5fb>0-#a%rAN@@"L`G-[(#DL/`GgCChI2Y5\[%B-Y%Udb-OY>>KbH'KsCEN\IBQQM@)?IU^L*CU>%GX1Cn!MY&2qH49"m5#XD5W#P%LW,LCM)k3fR44M)jTRm?i;UFH#eLI8)6OI:i%6.6JB"r?)bk3L*1W19s+_@)CHa\b'$URZ-u5.2mm_[1I2dGpSZK80)8+kFo(q$]=eEDrqp:'kg"dkCQH:'NiPrhnr[B&0B`ekL"i%.o'<p,^[BH.Gu",^@aI3n?%X8TeP6o6#:[0,i^!k[6WjprAW+\WGtEQb)6mZ[&LJsW*RTZkYe-LYs&=CL$*q""*?J`(07!7pqj[2%CIP+ch'o\GkKgg>'HJoC7@<?PWE)Hg9Z/DaE`TL:[ia)jfUaHEZQbUP<b4&</"cWD=cK&J/\#qpl'c7njp;u!OU6@*?D2<1=_rDA%D/r\o`P#(@;cMM#oVRC+GjH-j$j1@q^pM_'@9`GVbX,-:7Y9DhO:2;+.Yp]$;J22n#&;jke?gFaZ)kmtQ4gf)7FSq"Cf&RfdU>R?%6T$Gse4<ST=B3PpfNaQ`<47Cd[L"!3MjdkId#q":U&p\2>#OBGO[E+YQ+=1cD%?1ud-+#uX"jV"ULjbB*GK^R3l)"]*bosHP$o)J%4j`nS^/puM#>1VDOi)EqQj((Y%/%@q*dCn^(5R>=F[>Z)Tgi]l.g3Nsea:/h(E>EVI%H]iD$R@<aOZK^Pk[WFRl,S5UH*+B6*'3O%[!KVmqFEM#C:28h"l$G<>ZGB?W-_(C9;fmr^kS/,/1ns+=7$:8atf$$KOeO`Aq\CH;RC6kW^W@/=qeuK0O(5Cc%Zug.Kl1k=sSC1%eqIXA+:Eg=;'XKJ1oJ;\M$9&O,fCEY'Iq=?OJu&iYX<sF&KoQ[3pKpBH^ckW*VJX!M=Rp_FH9baVbqB;C2SKX+_pa*gF$2j2lc)r%eF]?1fWN3^n:[W:Cs_nuo1Y&`6#;=S-162m"fCr,457Z^4FK-Yh4>@Fc=\B8T`hkM.2KgY%4=J?Y*-JnC[pWB4M"RS[bZQf*sJ#q%d.5SiI<;P4D>Qh@!GU:R)A$5n$ka!mBEuX2+h90M[tZ/T87iG_18@BX(.j7C-L?S")+h9!A0"88&[mc8R?9n],frk,V@kVLLq*Wt%-Eq!a`C+MhNV*k2.Y\TlSVZfhbU6pd+VP2#;94\_L(oVj>D5?r$T+fDhs45.=^?)Ld::MVdA#/LBGDpW%'sYbY\N.HTinEuA(Oms%g$5n\A_&H[*DXscf!TF=/R3-3=)R-Bm9D$s]G4@HZK<EZNnP*^R7AWf<FX@4Sbb`,]?58O(4Ghhn;5J"2RlcUhX5mmN6cr081I_#%XC/@Y[P"j.Wa\C4>d/O[TW=$Z,7N;k(b9,cjr5]F_6h73+O8j)kaa%ZGY9In4DU>W5TJ^B<O58$2.P`!i2GjZJEJQSgso%)>4)U@%*T=OZ*4<./g(&.Y3,<9q!cFuP;-@ZP%uP$bBNl"%gCH?&>Hu#!d+.&p4$p*jA[[9IRc't&316"P;fgQ64i$p*H>$oCV4lNSLV8PW%(O``HU)QDIM4q19')/2Xe9qt/]BV769SS[QdA?5D(9;c*@ZrBUYqXNK;YI-di?T%Z1-fqT&?BEJ,,8tJD%d?jI>5!YUg5Zk[uD$B%/<P`M)(/J,4!X6(KuShh';]@6*o.s@\E'r;?9rgN&@*unG0KKqi'jcf5R_M5ma)=)0s7Mp6@LA5,"=8%MT0N*\-g)XC3FAaME07q%;j*1r\Wb36?&`tLq(10C>=jk=%8-r$WZf_->i9$ZQOUL@FYed637;F*[;(EfmSJhuZN4d;*a>K+J@'=`9Jm7-h+I;TEO76mWBsF<%*JZmq#J!2hQN8]&*J:EZir8l1c-=r7nm_5DGLZ?eO3Z(HoCM2D4?>]fcHi9WoB?*73^8\Nc_L+'kkmP(5EF+9U\"*@r&d#)O3Z(H%oCM2D4N%GrhR0ln%3D(48*B'_q0@(2*hAonkNC7gq$1qh.c'Fi%,h&^15a'Z'TZ%aLce$ZR07(4Q(.!SF"s/Xj_Teu3`dRj(R!Vd%+7ejE3R=CDq'IiR+aNr_g,-p-B$e_#O[D`<!_^h6-B>le9U%Hs>a:K.NVnC2P]Ug(*u%kHV'p/@Zb*Ve[rpEZ3rQ2D1j6,iK3P7k%X_;^U_P%TDoOr5[%VDolj)"U/G*2$/P`G2'l*H&&iphfQqp2,UO$B/kIl>!]&#W&m^-m]90a^4hPPaUm:M)O48hDfM4itc'&[+=-%!AR_$F":24FHnC`\IgF&b4Y(^\RL(0Q,L!TYD$eZiXC?3AK<Kll[nJfZG*<hH1o)9l+HoG\=0_o"o0XFNpE9fhc/kSH)'WeNMaZ6%=53rcHb%_\B;Y,RD.]*Sr[<:\^OKUjR-<*Sep-f`SG.GlqA#'=d;d(uA;TRDWNT#0;fje6XN_KtcYBbQ4C(Vlk_hQ9$pRI6-LmMD%B,7+bp703&nGYpL<m0"rB"Oil>EcV1pmfIL5Q`Id3'.?l05Ghn;<K@%P;@E&->auODpG,L;+9Z[b>L^$E`#5k]4iRFMCG5[$)-);%TN]I1809I1;aCja"I5g7b-O>Jm5.Z*-@X_!Dk-a"lH*8F1B#r6+Hf!p-?oE3,$72:`EI3S.NrUQ"XJhsNuC(L([K2:LEMHa7:\7F%\EmTlRk@`)`Of^L>@X5Z`K<6t.9:8-F00SHp.(SEHT>.0c?b)fH?,@+VcXa_[Pe,f56riY@)G=YqLd1A"4E)#VRJ2R<I`jU8U2V&%%SJ)-VW9R4R@*$a\-ZYL'on#JqF&HFp.I<PSVhM[nDSQ%LelET8q\K*EtHW$q$5B/dUjc\?)>6<"C>!5QjMm8+2G7,g:c5/W&e7X%p)P!NQ[?)X_+9FR:KRTp<OrG<2huRFo-OesZRDP!@^:'[b=eA*C`G'^9/Ql#JtL%e5j%8OPK:MePe8n(^,89!Q</qJUn+CF>;R=1%hl"u-Paq2>qg&4%Nr6N1(jO?Ce%VE@G[f^WaQ*8k_N$VPc1=ChM+5/mo@AmY'!'i'Qk>d\$aE+KpkRQpLH#9Gj8dhK-Z+VL:1O(W%8WTQ%i2bL>.o"UCBJ3qTBur\g'jUn9'Pooi?/__6(MD`)90gXr@hFidOG#R1UjHO5\R%\#2<k*eZMjC&2t:LIGW/=-*QCMDFtoV/%'CUdO0Z"^I"O)/8JNO:JoljBqQs;f=VcI:Gp_BoUHVlOCZ3>2PK1So"#;i<`H..K86;k`Ug>#lB9._n/F11pYhXh9L#;c<gg-i1E%G*DRe;X)Xg0AWgtlP6i*ZYO3+FgJFf'[(qSan9.^9koPC2lj%:S)j-.WEmWQD2r:fQ>P<[/KI;pYV#=ObRM+ueo>@3(7gWU?;bjQ%DIR;T49h&K1g4\k:BrcEo0F@tb7Wj!'0?!8g.A"(hN7:jq6;QXm;[RRj&H8\?gA0&^=]1Tp8Yir&g/!\!P&oLkL%CFf3!uiQH=AW%6IQ[MnVZ-^>)nM99Ns7oMZHtTTd1ZdXiP<K-;-,IP/3UBjCA3p2p7%q?9I(2dkB\rO13L.)eb,L>A3jB1r\K,2#UrgZk@N%WN,iF%D!QoZ/fn3D*'d%\K^b'D*Q>ks"!ZkIV`)H.Q&.mE@`4_Q2C5kpimu\7(O?^kqngtIr>28XQ6l=Hc6qD2J@?cYFJ--:_&d+R3!_Tl%jRkL6_p!D\pEe]K@dM2#+Rj*3\"5m"&#;.-P@D#;=;'C0/dP[4#6b]Q*&*Km'`,QA>^)^>Cl26M:0Fu8ZHUJj=e98BE'EV;HGLs2%T>g(ojDKe1Vr.K]HJX^4$Mg>hkHW]=[iUl!5!BE="c#^l1QB_>T6YfZP3!jn5*XGULDG]?@t\Nb+^A!sg?RB=KoI[aAFHR<"4m!s%)U$lc_sKFu_^*"5Uih/YZ1\6_FOj:j\n5u48J]n-^7iH$UEr-#f"&RAZa@2[kNLc/_A;m?'>E*^=16NAhRCTCBpY_"gkWGI#;5&N%'jU+>GW2d1<=E!<m@Pur[9-S7.uUfZV0:I)>bsl)RB!Z,_UTC4Ap"l/H,dgkX\DrdVR82NFh+e-M_(e^?^!!A$E^JOT%/WLcZU/q%XL/\AQ$\2<;8h90El&G?iX4Hb@s:?-4olVAlQXL'8\,\j3[oV*<jPWI+uK\V+AS+S9qo"L-m+PG6&J,^_@slK*ud=#G_cgsiDGVd%%6jTYkJmdf%3Ai.WZ;0:fq'kM?me@kEEkg-:b!dj+0W[bHTP,KliKDp@M*d_KpDul[eRk/VJ\k+S:%sZ]([h[>q:AmQ(mV&;j?[b%LFkeCh>!6Ed4278Q2Z#m^.?F!fC9T.i[e.D&ZlSI/6641]5a+lJBDa`AJRhI3EE.E.V_n,C^b1G"u17q;DrcsiZrYe=QPaoSq\6\%H$!g@h\i<_.+TBK3F6cs\lMd#e&!?g&.P'"9_^/]K9r&g1i1`V0JI1sPiM6?j1XQ%FabaQWI9=5M0.*JZUoMganX)'Xg8\mkt8?t%Okm%'hlG>B=flJIma%P]VlblbpT(F0@;UE6]lmf/JQaHc;hL,gFS&`mLY=DjRR2l4FqK#N`:^Nt,fNqk8\^7kCH#D$FVZ!=BA8<l%[\U:4.CnOrfi2QPY5pI9JnAWAY)Oa\=Ya2S_8_e+\?(]f<"(EjH4eV>gGg\Q/1gt'iiPIiN%ql:Zth-;ZO@dbMJ+_=2Uc308S6G[%iA<LDOKg-=!*u\]F'Q].EGS',A>A35XOh;Yac3@+D[@1pf%sS[_D]kRd99rt4UK#bPJp!56FA+sdB/ibM]V?'-M+%iBV#V_62^QE%DE[I%o6caQZH+S]q0hGTQ*]DL62A7\-iaolJJ(L4#[hEb_"oGZ8qP\)!m!_/VJD0UPEq>/F8S0_r<&Q1roEJPB0UY;j+Z98BI%mY%%=[h82VXfurjpFAPAJiuA6Y7V[I]N/L/_X$`fh=%#gY/-J+fMjkYll\*o8;kbn=eeD/;5:JZQK9E(V>qc8Z^sNt!-Lgpt872e&pA%dLNRLU_r2Q#W\?;E**VO;H56cIS2sf[5Gnd=dsDF9XCLn<,,:W<aF.)Y'@BjRuMN/NDD<ip>uG(&F/Vf1LV_G]c0@(+H4$]bdI6<%A'XHag1$CYcEr(;O2u73i6'AaFbB5;QC;:Q4cafMS_-PI<V4H(?5`Sj*E">l'.PFQHT*02@tKI-.0g;/m6`ieYbLlZ6$m9m0VW\m%6@3Z,YLDhL%]a@#iQ3A*1dCdgs5fYWT)Q3/em'qE;UuH(*0Mqa@!cP!i?B&s>U&cQ&f%1?/*jW0[$*s8:SO93EcXnA`d:O>llq[C%)t$\Q@(7e&/[`VNDTTh2]!m;+>H\:2'J58'NpaO(ep#_c:cp:RGL<Zjb='pP2s1E6q^JZ9GYYE>[#a=)YTHZkT#>\mm8KosET\_9%HMLT&ELQL`FQP#:p!dU)X6dF:Y`&/o]5MDa*ir<k3iH?#:;frU6I@VgES:Y_<+LRe=#m]5^5BuBkMf6p-a-FFbk='QS1Ult7QE6P%^;g59po,+0f3r4<_+7JmEdT-kXN(QTjAYQqF'c1T[o;L9BDG("YO&ir;K7`"/>&8c?c=ZErK3m;8mc2tB6hKj>/D.aS`O*ZGYIiE%U;Wap`1=O-Y&Rcj1BE)S*5tOPk]#:did>f="S?T]"A.'R*rOioERm9:LK[_R@g[gn$M37K<`W^IPoc@]aj6MmOdlm6m<!MVYB+SW%l`i3fSf(sE"`.Jf;,lb5UCVGnPtqRpEM.-7=s$q!Z;U4D`?<OFg-BK.eanailQMXtKBggF871&DLm:U1!oHi&Lnl(GUfB=\4fnQ/%W=uu.FA4jF,+XijkJ^LuN/O^@H=ksAFu8d+[l1U:MV#!FXtnP&Da0^-.pJHFOhgS3AWe[/P.n*[%,1)6nqNZ#T.sbRZ/KkrJ]AAS%am%QUi;k*[gPj\c%EIdna#i"%4*%^kVsF>HW:Y4]T/E44JfUGhGhp_<bL7n!A9GRM.6tRf=JT&U;U88C\'Ku>'<?5Y,3"g27HZQQ%dn+^;NK0^_S4tGe4Zh8#6mkhm/"0^3q0CAO)>SOh.pXgtl<0QtMc^oc-`q2@Q.O!Do/,cr-DucjHj;`\lFWMk,YnNjJ#]AmGd_[@%[`B(+59c_"9]@''d2#([HRJ"1[Yn*CkET6@723H7LGbZX(=22g-g5#LG[4)p_uB/:PfL#l$*[X'`c-!T*LT]\2$j]W^-K;=L6(;*%LOhbQgO4`Zh0V6?#Ln2\?fpqc(L#3RN,.6]lOnZ+?)(\Tl3d?E`(u[B+gj1^[>OS\7GV')5oT/4m+n?F^;ElAPq;Am9VgKW4W[Z%%dq$/KN+)g6]LV^@O7)NZh;^Z0a*VohpZN[ed66?]Hb;lCG`V8H44*L=h&WnqT'(?Zmc1;/G`V9*+N<A(]#T/>O8%iZn'O;TU\j$h%go>R:GO'[sB0R:shP5G18,%7hDV*<U]LV^@O7)NZh;^Z00D?MngNu_H`G5NaqVsH)O7gg7O%>DF5rsTg^MdW2'oIQf(-S(7qQg%[%.10NR!>Z&AEWAgm^O$Pi3oWA\0tulfU@t]?g>o`K3!pu+SBO<i-qO[oj/ID4^CsJC/IZ4M:sh!ok5fG1Kt<a`J*f[&`C`JRH%'Vs%DGS%5N\B?2ikJ^dY$4I6<=B:LBi@o:'FU+#YqEN5)VRc>,uP),(?#r0-n!j5e"N9H_Vpm&6oc`oRh[)m4md?>E@buAX6qr-R'Z,)%-?!H2kHs)=gj<G?6W9+dM@EXs[csSV+R;Uo(mOHg9b9$B8W/]b.24:+Un84L0p"FX=,'+>AF?O!p<b2fEGVaLRi)5@=f-,/r\&Y>%D2/4+Rp7Q21u6D7JIVUBIQR:#@s!cO\6*lACl%3*'Z8>0L2qW_@4/d.I<]2*]#NGOQ#.X0'W!))9*ZojUq$<PbDc_X+NZ@\2_gsi%*KcH,-1[P8LR%lrWMoOo5_/8N'b,s*8Q8oqOa^>BT>"U38*h\U83J?dUn0.!;(o[62Te._2pnImCXV?JX;\-Kj3BMdQ$QV#O'CRI%-Uk5oe%T+$oa8qQ(CV$/??oM1LJ(,&jIdP+W)tPN%D.jP7IVb78j;&ODH6%;&PoYUpC*piIaTZkjIYckL7-iGVOfu6\QFuAg)FBo%6"4TnLd#Yg.f,-]_kj+cP#.bfe=S^4F)oe`\[2X=kX[pr*pKSlla'5$M(Fab9_q3:%0Wq.%N-u8CIR/F2DRO=.TgiaX$dN<hlaA(%,oA4ln'Uq_]Y6`5NtR('Lc<:68S<R(1J"1l/B"XaCe'>YkW99Zi?Z@ASC1OX7;Fo*WP;+#"/rq1h*f-GWIB8UgPdQsCD5N9;Go)E%M%PqJr4puc<op+tl3rc=^f"fgOHa5M:Qq$3?:h-\]@&NAC>*mBDDL#Aj^h$Gq\+jWD-sI#(Uh$@4nbM"[_L$dX*oGM*DSJpB.K#K%7-iHgLA4JEIF4+h'XcqYJLf'D=YXadh247dn0_(Kh4$gG`['h]ciq)Jl!fo5Qo9g:$>gmGboNd?9"N<t6n=Wa2gLp^Y&M(jT%Gn,%Y\[:?SF13#"P0YZ"P16nXHU`6aNcK^^.IK),sXAZpH5-*T7!ZDA.DtO(JB[Yf#V9"FD?qJMk9Ri`+RMEVQ3K)5O?;of!9nA6dAuH%ijq5tM(QqPVONu@Z"CRg=a8\3T4EPX.U!(&f1kqhM,*YIXI83rSE;ZMh'k70L:&nN7;HqUdjc"kbFX"F3U&^rr6W%9\r$pB`kBJ_%!@Z,mZR/reP=6([QG1!VP:2X(`0--GdLsETka^L?Iba#/aG"WZ<0F:qP/Ol$]XTV/nX<YmMmtjMch<oYCj`O8C1GD)<;;?<q)d^;%mcFLFcZI(B3Pp^L@H5TBgP,('YsfUjM7]B(/[e*Y%L?D.9tn47Gk2E%=gnW!YF\2;p_5m,FZE_44n0#H4MX#?$fLN0Gj%KaD'1kD%6HC#fa'6[N%I%rT,B1M..:kW,+m4S*7&#]M&eY9l;*Yg#_uUMc1/W!M:rNgg`1WbcG_3d[,WLUsK7L2XgkYjl1t]cWDo5n*P.u86%D:gO)%dqQY450e-.`U>j4*f7&atqA.<l'3L-1]1ml:D5*qbji@KP;r,;!CM(*^VIR'Ir98g6D"X4,>B,Ho('TY(Y?e[CS\O%ZRZ4%KiL=Bb'mCE<)4M!OD)dIcH):o*eTqlGVVGQ1Z>7j9CM,-qd]F#"M0g@o(OiU"\(Au,O.L%80Z#J3,G-,N$=F/:$AM6#:57:_NG;1%?-7pH]++.c&l(]=3k7fGPV\*dVi^@0kW9=PIV_P>L4?D`@bqn$h?a39HG]LTKDB!g372;!\WOs#D4u3FIQT=UcR7iR.5md]lcoAq%"%t_hD@(eNgOFWE"Is"LgIaZD,-tpaVW;M#K2#s\=t:'uR66j1;lddn3bq^E_mLP<kgu`,Vlrom#F?GllR\^T[$%Rhg_";Z[N7N*%lHIkh>J4;p>\aDA*dJ,Z>?U=C@k,sHpQ]YN!ulqoKoOOG[],7%[;C#teG:HFKWk8h'*4R!*-[908S34r&c/9<?aSnm,jRrL583M?%[umc&.(NH$MttLY,fDdrA?+:HUgheOoRa!%Iu<*a(-N0;8&@<(lS5M3GFnLs2D+*2dE^(b8b:@/RCAbjl^>moi.$sAdrZXqON"o@%KCO$[C$jnYdUW%AojU9d\,:ofD;4>c?HL8T)HDs6d9'Ib[3cN0a*M:&Vh!GsZk:#P)bsd3`d"e*<e61-r#3c7l>>NC!V#7KgRB;R%/oU/2Dr/0RPqf*4MrOUEn;X;`IQY6W?f'TA:,RC54T@;.,_cFSeV-98/'R_.;TOVk@<3kJ2f]IQ>e2V`#Ma\@Da/aO*WQ&piT#Cm%i,9hrqJPqts&G(3&H;Er_LJ+7Y;6_K4$!hTm^q1<Y'dh7*e8.tD*L:>dC\mPO+%JO.n^&28oN9qV=Gf\C0+&#D(-BH/l't81KZE[%PbVTj+$U4ihu4/[(OGA8EEtL4]H0$h^4.(#eS`T2/1'r'c@@AUEnr/1Qnr7)$m8D\d#AUtc.FpKSV&'6C/>GFVUI+.]E'VVVgY`P%i%P%-$/IFQX@eJ3d.G34MI$aP/#[=f,&G^4\ZkM=W:PQ?XFcoLnlP#A936p)I(b+fV>Q]8cU3;&6@[!Eq0'@ObWDIi+->N'Zsem(%egmuU>B1]LKYD?D-oPX-.\"d=+JQ#%_@\4t&M,aSYu6XA6$c*F&+T';Y`=B32lbXM`KsMK6(%-V=S>YWA6k1IrpAW'6"LuW45$0f%lSUK-qY$LE!Z=#66j=;kKrU+fl\N$2`r!g\`mWApDUg_4YW]t1FK#/LIn_',\Q4KYB%VpDj0mARX`Ru>.p1Eg<VeF#ACan,)(6(S%]K$OaYM(fB'I^Z-m_2ugY6q<Ra*@e39f5-#VaegJOk[`g!_Z`$f'OoEG_a.Zgm"(Ai>o--D[U>4+l9e2_[+_?<0qQ_6RBq]Fq=3%%<:/PO@+9J'C0&AblICG9m95](h.nSKkb9*pVD7HaOk/RHAIG`H#sah,QVf=.h"/t171oBTYag%F9]C$6$s'k#7i#&fO$2hREZo4;%1KAR1JVPj<2[2!iL==UG).GcL@3u8\Wrrfo#jkX#2/7DjF9sldJFicsU)2JV6[?jse3aI-692R^P&eM6+]r.)V8fl59jZR\K:*_-%?A((.8nEpbh1HK^qBcGJWmum7Mr^F2Gu"g!/%hS!;+3n:Eo'">kp*LJV:rCjqNte81[X5t3#]G-aNu7H-lDe$2U`:!.<`A"<=HLR%iO4?:'ne2CGU7:fJ^Grc>-Q/./(a8mFb7GqJk[1'lNYUhqOhVL8#p"Fh]WWgYC3a,SHIJ@?l-7D3ZWNm>O3IRY*63merki8-,6qB%*nGX;TDX?En9$Cc=85sE<G.N@p[)g>2,"DoeE&2+?SsA#eb=X'8NLdJ-msl8FBts]ge_8DKCqc@3Tt=o6"^Jhh6d%_L-ag:,(WFr%BG#EJTq#D1@D.7a(N7/\KEkdqYeEhPgW%o`Y=/WJ??'9CmhMrVXTRnDB=\JY.kp$N`7c6?"'Z?q3W_hrKhR$/0"UpORB&@(I;>KH%pf:L0)%'H`G-<\=Lf.X)aOt8L9^85CZmY><>B*!LN0B_=2H)`\)WL"Nl.s7tpX2gDdOP:[U)ZnE^VBeL4G9VDiTRahTQT:[%]gf"%>@:g8%\GjgNc?)T?9taS-3p/d^]=gH<=$kh=Ta\DggKl*!(/^OSA;1@\b<5(,M=A^6!t;>Y.g(?O2."f05A67^gXel%,#q&qFrg@%(;Bi*8Y?UlU2CmiXTre_8g2j'[`Q<W?5Ydtm5Br($jrKhN8J5pO>H*;Y&^c\/p:Ba`c2APqpP[9b=liXc=;'`\!Fc/Ru;A)U6c^%%L96trVKUb#dm9QJTES>IJ3GO4))kr^iGm?iZgu:5-!^W<md7iL\lOO,Y%5oS\n_>!Fc!pU)[X=6Gq6Za;?k-$$N6Q9ornl5c7<+?%ab324/U$!rh9pV.8,JDQ"2ut6_!PZk,;Am@BSpmh2Z,U#k/ksNAO)5[ZprhaoYb^bMVcB]?Y]ju%!Tjhcla-F',>Z#%ME&Yq-ARD%&VtcD"%sRkC-i$[IS&JO==J#sBP!AGBXG,RD!DuZcp@$I;V!;^JKF]W-J7qILcR"bb+J`>3WX"p8Qhs^oLMQ#8ltSH.b.$*+!JVW%#0R3EQU:G+jT[3=Pf]D&gRn`blk9F)WtYY/0-)I+'d+#CZt_'sOB#[(V5t3bd..Gu!OW26QaF]I.*r6.K'#YJ,CiEi#sjTS\?,D3%P\gP8<65M,//-5"9m?c=\]C&;UCLtI-:uCLX(?S,<nB\,VN0uk2O,h4;[\r]b#SRCF_m]_#$@4t^]S1a0.a**E5_ug-n<-?%+Kj.%,4>O6Op2PsZTnZ3dpR&.2ds@Y:"6bs#!kLR+K=1SV`$fBB`p4cf[+:C8EF,FXAIfq$FaC_&Cf^i<fGb$hIQb*#en]t#!b8Yc3WTb%NJ8@U@7En((Q8nf[up@6gh7_T;&^r4X!<.#,8dZ1#TYb)p72M6@1bSd)Q!:)^jm6>3[2jc+_4j,KN_E,<R"HHfg&e3<eo)0&Aeo%%0=$^+7R$1'NVq>k8sjL%7V8YFIl2ZqK*?4XD$OL&`6"L-g]L8Qk*SWk\Bu053MuO?pjd(3&I3FpY5dM'WfUk,+Il>qEI\*%"O,<8%#_7_ni<A2rgJYL"0X(`%iWr^ENYXb?[Hr<mH1T)W*#DN*(o1hU%laapqRAG3)41NV%h$D!9(k,Z)`Fp/lT6WB)B]g[!#Pg:!<C0>%nL.083:sk?bg;Gb;T#2^aLA\8+LBW]0]q-BDJ`hXa];4N40F!V=]8mC"4.3$<42(I^hU(S!1."1J3=6$(,V@=-tZ`<e#IUEDHoF6%`1pS$/c*7^Ql#N)[TpX.3(Erck0_PU$OiN6AFH8&!o(*AQ/EVF:.LTWR[XA-LLlH$\9TnGd"F5`%F9<0j/0gI!e>jmH(PS[on_A<%?)#sU)a,jPV@;1JM;)j!Mn(96-KCFqlp-2ho9+Hs69V=ZgtQTsC2crV]O_KVW;->,632nnBBbXjAqFEcKK-&Q/;W&rOKH\SN.<PI%Z&DhHMkO#+,)\41cjZ.U=J?74jV>7/KE"@OXrG\]e5aa+Lk31M$0[g+0+%(KYW%.PXjF3Si1T'k&YjG_2c*86j9uJAPgi%/$7L/=%%9/ek0;E`.X+=-F<^H&:"sB_*nQU8t,(6=<ATfp#T8(?1$k+P$`k"r[,1Y%p$UCb'DtTrl<`RqVct"X9,[SG63GMNU(5))sJPl:O%HpYdVS/4fEoW!_\fUkDE639GYMD_N&"^[<IS%sb=)OKTlV+AfFE%*CgjT;&L(f;$_b_1t5d3$G]?\LrZ!XA1GnQ\/B-5@_<"cP"'%J=[Pil6??E+h4[t2Q9;l8dgqbVMallks<t:_*q$,<%9-E>$,E34u4PR=sSB3B[q_@@>,^+&f%'J.1/o?e+/*lZI4M#b7Z`X9qtFP%R";B0b">P63\#ZO1`-3nJJj;(?^Id)@,ke3K%s;`G)9dq//SXN)\G#DlB8bZ'1YP.'c.:9Xc[Z^_U.SfBeJ^DiOqe9$oG6uSZ3=g%X%HhUno@`r1*fe6At-4XV/Fqj\1Ull9.Ltt<SaNgB^0;4S21T'/s:`t.2'Hhpa1a'&?q$FX-nfP8XU;m?)[jl@qh9pD.*9&DQ5uP%U/l&u$RV1fEs!1+:0pC(&9a8A`#7*"cla3>.]FL\T3#)3,R`Y/?[tZK.PLQeP6q;Be6aXT-)H'UO^Ps9YBed`,(i@Q'7aYkH9&s#%JZ(sajBBMC&RlH.Y^B%%D:=SK8.Df5&qDn(`e#&P\lSli/L8%=p>iMo@KQlC/71p_ka*cS`GL<?"W7\Jj<i*$OhKL1d`);i)Soct%=ZUI&[TPMHWu+53+,pN6@[X$c[WnIb7@Br(A`L\1pQWKtQ2)U(+:)CB`l<;I^cG'p)E)eS([8:=B'c@Fg'AF.<cl%$e9;$f"'$T0%Ao8*1<?SLoW^NL.`L\n3C&eCaaL]W0/I8a\7Wtb@A`\U2U)tG,JWJMG&fXE(!LO9TeqjqFi5ir8hB9Jb9THM)!$O>UA\pYGDZL\C%-^fV>LI<k>UJ6tI1WI<j%-L2'UHqkT-oi5W+u,%LnW/?83sNNf4/U!T"@=nK_RPF.NXOG]lN`eUJfSZpJPt6\dELiKB',WdV"V0/%8[JV&),4>T0IoV3>`#uPZd`>dT`VI"E_.K%e*K+Qeo<Lm7#!=^8qD-:L4OIf4/FM:nc4]>]!8VY!N8Cg5n#Nq7tQFhQuj>+psK0_%(]YQnFlR/W@M?*lj^fGYii[D\UOY+P4'0dCU\4n:+gXF>7UlT-<amfcYSVC]6(qrY%4+fta[duSE*[Q;]Xrc$NRU1t(4aq/jsFc'%W_O=!Z4$kAdlQ0rW`"\ZRV\+dECm?.=s5dh*<SJGp$eF"8cskbXt%F+"1AX^ftccr^rAZhLM0PeH,-<&Gbq^AEX-!6okc$!'!R6K%=4rBNDSdl_gGlgP8\]19-T6k%OF@^"'0Ks:knt%bK`A#bcjJ^(eI1#di?<a!?pnC3m/[u'N[VqSbRRcuYfK\B!LtU)ACL^SNAaql%%11ZTBbmHJW.?^gFch(`iTUQ"7F;lb)RRi!EGUm+.3M^3V,terBV.jpW:5s5V.@aQclFhu?"]U?eC4JgAEPFG,6A^!&;fs%3*MJ$%o=>+%=E[VH_.`'fq>4Lk=ma2OY[V(UNaUUOhQCDTB`V]G[2<*JCnp"VRV:$uZ9^mjF,uI\/Sc.\MU3c&>miW0J>b7XY`\qE3L.j(%:F5"X89SZIP[,VngFGDe\'a)jB(VucO8f,#X\\.Z4Lr"9Gnd_J)A*>8et]8,E?+=`F9/^XR,1\:P>krW(;/5%>ReQB$&gNg:YT7k%(bBQcGp@+?WKEZU]T(Qs!cAZT%OcGM@.sY;$0EDp"!A.FUC7,AMCNN</!TZORhJoQ.%ns1i=QVRC*d6sI'*/986hhuCm9rQ2b%f%%Jp<=81\S\:j9@kDI$2WeN@bCC+Y7Ct-&k7+*J#f\3"X_C9$1mYH#.'20FW_(QmugFKs:b`\)dBRh#S?@(@6b]e;UW)3'hMJi5U"Z%!4ljRZZ,^I9dT"05enu<"JDm0k'j#^N^0e4F>bg>DAU)l&;Ib0!`9=O+<53*@+a2D#HUj%"4kEt[YP+V3]CA<"($LdN7%gf-j[5l%PbK:71GBsQ?,-`a*LSqgpm)+<:6?G#CRd'\H89`6$0/7\&[86,VQcr'LiID&kaJChrGL,&!5m/t-:,Kp+PO^>#Q\NGClIWh9S7PY%&OUSP!#i-bd$-KE.glcQJS\jcW/Ca3L2glUm"P9CK[9<9ENs%C;"1P@aXX;4,`5(VP=gQp",J<In8E%A%$]0?RB-tP1^sOaqZL;'%i(`SUf3pSI!JoEe;kP&J1B[Uqc*(o_fEAKm*\Ck@e1AEo>.U\=hN=bO^6EeD!i:&Z>)t'b97P&!M87ife6#dRZ/+-THEQS>MX>_G%Pp#2iEV'B%3s%9j!bq]>oP6%Z]TS*[d.Z3h)2s<8KJWaVAq:DrAd3iAM`O,YNkf'<Ed+YVdX[0RMj?.#egAY;iUKquE!Mee>1(d#%!neOI#Vjb@aXo,4YVf3EAOrVlhGt,K!"kU,'T<-8B:tS7<-?cBd5#8]kTC<.)1l9:!<V4H.=P2?CEL?CaYMK^e\EUUOAX^@"T>/0%2Pn4q7L`Jb+tXg2ln8>^4b1l[1&K*+cUlcT#2l-npOG17!#d#.%=qTc,kh;A3J\,PBGNH*0i7oRmFjQdC]kY$9>j:6Yg:#%-3>l/%;p[tF!l0a1Zm_WB!(Kka<Z<]'KhjHs"<[g]$HX6("9Tbe)^f3R\-(*H\D(!$VZJOXXu55S,<6<;X%Ja$(n7@%/$C_8>lk:`An_5t%_@l<tRo4t!$aPpQZ'Yk4Kt(HVpB=q9qO=Q^e:8o"/M@PG>6%dIHGP4SrtikqF;e<T-+=6j^dNdn%VRh4/YbX-KC@57M=0.Me^kLP%gtmI$^4TIoEj5Y(&`GHDoWfS`<E0`D8E9e)Z4lrk23U9R>&!4$7Q(l5.!lsKC,CV-N"nqe*hn/uUSkCt):pbdGG10og"O3>!H;bq%/<m#?5o!]2Af23`)D<+`1bU%]WS"A3&rVpl!UV?iZ2sFg\r+@F&s"ko3ZBI+;+,7ik<5cYBWhn2%:M#S5;6h0"e6-=ipmReo^220%eqVAZg=1]m')\DR9$?9^/-@a@32_VF)Q`C+#(tNp_)7:t6s1Cp5KRaCBHl>R[VB9`OICkp_3QsF[C))Zq+qY?A8O!sC/r4W:a8UR%"/$+:7FX.?MF%HpV(hPGV[LmS=N#e/=%iM![F^-k7;,Z@%5c=h"YM4h7N!W_R2i#R;LgCf4uF9&#TQDU?!=-7DOb`=*!9;NSs@_A%&dbKdR<"89V.OM#ZYE91.-j8X#d4f`^m0j&9IV&&^aK7N,0La0=Facm"9sT+h86*V#)XN:^bp?:\,kUR!3B-Oh'utAedIs63F3V;%%'BeJQc32=J`=2?"^iWDJB/PM4jY1j7:;$5#iL4cc"/UjMn5aQ9fTGLdAq@o2dl?c4:*''oEaNk,*Wh))@joo8dtG!Pq"\BrdL_4%k.hF[W`*h=)?c]g>Z*)7h_bck1gI8j0JEc$gaY^.&2;>!oKYJS)_bHk/s/Z?6q'F"PQf5X!F92o?rhpo%3ns&>9/%j.JUCR(@\!I%7L@Ft!3SW%Y.4QQ9E9\+N0lIFYp&OHP__FudP]6r!)16uKB?AjlAXbtFTS:#O+<LReTo&cl4#ar&<'q*mZsR_i-qJZbH`a:n>n"T%W[]o2M96+B`NR>OF[EJ``b,u'or3,a(Cf#D)h'kH"#YoN2eoWFJd5[06sN1+$,%N8g[78$?/Poh(^H8)[7hF+I9d,]IE`5b1tEcg%LfWS.]YOdr\OGJukci]N>(d7!:`F`;Ae7eee</N))]R-LA&Akjk"Q#p>*apq8aJ7;Z+1h^"LN0n6s14s^hqLl!hc5K*f)XTb6TD`%7Ymuu[>GDM;8d=i]EM$f7SdF4FDPVggXBP`:I>ZFM+:qe=&R;QJLr\k2]EV7kY)tuCfUN?D&pI6EXCr',0s.*88A\aM&NUm'd7i9%1GBA=.ASB'QJmJ)]G*e*"(-SD-#VA2@_`7$bQ)j)!i",+\>1qm6rrQ'k2+Zu.`td4>_sdX&YlR?rC/[[4BY';VhK3N6%&h27OU`Q%@Hdcp9:5q%CWq>K0^%9q6lR(`<H6u;/.[k+qWeCm#'X[B9XA+NQBK6h-8lFdSMWSn]CB?PKUE"!2?>P$-1)@FT07K_g02YYiHf+W%N#.<:Z*Mmt($jJ2MDcoHoSobR#lH=C($Oo!:/nS,):/O2E<2CdAM@HD_HW;4i3X8WeRV?2YYWc#/DHQE/@sV^9-E3s:KJjD"6EA]%Q<lNhT'OB#Ce8V"GmA.n^IHkO@oF+1L+6?5Br_AU'8P<Ro<T11a[0sJ/m<4t7c(+TUU%\8Ko@Qb2n@JmnS"2_SI0]d&h4)XVB2[,%oONi0<l*<XG[WHLJ<A;"YW#/b+N9?P]pISj',`"c*>jC/KW3QIF+JD\MpVOR2@pF0,)LSSUh'O@Z":^Y[0Ygn/p1EBZoe>%[.JlC%&QY*ub[dA`C]L%#oJ5>>V[RI;jGA$h!]k7QpT^hAJ;m6Jag!GIJ.q2rH#pBJ-CSLFP3"6^M51AJ#I7`cNtQR]ILL"tm7LDc!7m9.%QE4+h4>#bQ;Nc2bAYi\0An4,cF=h=$1,cR^>75V(B`PM%BfF/*Z8"TdC*hkqf?uB33?m.5knX(GaMB,Qgk3+D)-5%e#B<%u<$1ZA%[:NETl,7pAppF.]8g90i!uA%$OGWId]W9U1DJ_N!Q9oQtBP"Y=Yj;CF2/gPZ@:eh/Fp:5ZL<@"@@LRTnmIPJCXYs3V^k)Od8NICe%)B2Lae"KTO^rIIgM;>1b=XVC_Xm*2(0-*>['$4oIbCkII).c%gW*!EG9n^BJ#T.bog`-&`>,9Ioo!E)7"/6Nk%mZnWLO:G#e"4aR%Xm'eJ)hk[:%YP8PA_=s[!t@?#X`EN`J8?/mGqP-.KbYjA5rA<99]c<W'M1PP7aK")1+@b>7,CYU",iJ`S.ads7MGG-bHRiVSQ-06%0Nbbb,T1@JMjk0k,W/\rb@msp=YFBEL9_03\9_Ee?T-,C+U1GQOiSLKkc1Ru6uao2KlMqQau3_5CQ`^RRnO!bq.Ke\N>#V2n_/e]%^*u("dCC0K7@C8'#m!$.-^K)Z^e30:"h,[0an4e*U]qNd>mn([1(RjPNu.s;2VZfJpq`V6.2$b'b8r(_8LR_g=bhr$!4lhci)!ea%f=HoF(eMGdP!c<n%D08f#hbK7`l/,.dWDkS<`.V53*_*E)>+dn_IsCXgk:l!2?a*G9UsCY8RY@L'80+p=bs!eEnO&SlY'T,%"2J>%YL*^^7H7]g=CJ9?7<#'17DPp[`gFiACI?NuI+Kf71Wk7(?GP,=fmk'/#S[K\np#[nOp%)KAT\+-92T,f!U._J9bm'G!0"K-mP<8l%=9`?Y45NnOS$<TG*lGgbLfea.9*7@,[t[o+!,[\]-ugC1kE\!o$knE@X;4sFFXDIeCb?.37%IeLYA:E>ML7l&3/U,%0uuJ'n\R/@%bg?E,o$P<HTa&<;.9_S30M)Y'1%:auMjS_5DDGtY0op#3=<t<?`&S&3e=m\&2F#_$*U$+rJK)tD8;L^aW7fD9U'1k1Y,(YIKNe(#%_<".ZH)2*\!s!4D6in6N>q%r<,c%;H+A-e#GXQ0K0MC++MZILd$KFZY_*CU2J4^l1=-C+_n_H`YSE9/=P/4PdC5jaMQ0\44Er[_1%:hGV""rhDJMC!\+!W-[:9t#Dh98LB6U/Q>C*?B7Ge"C":!jOtXU.N<e$)[aUqW`%<?B"W<OsrqZ4IVmS4=p-gcj31r^nF5H`_'bA%#0BN(QdVj^g/E8?3B14rUab@/0<1a_#sMFiDrLgu65`DTELLFjEtFQa4\_CiG/-Q.QInEd/]Gfk=fZSR"ga%0%*&:hVW,eOJ@$c>%,!7P-"G"4o%Fls?:ZPOB@s=2_TR^@t$riHs"2Q1'44q;9OHp.o9Gf*,UZ1;O#\LOn;LE:'fu_0_#7Y2l<2fm\K>mH,X"3D,Y)J<-%lJi1ml9M'E*JGV)\Y0k-<]>q`G]g(nh(Dm4*Lml]+fK""P1/D)JsT&ON#YEB.Fm`$?WTi&8:\k^/P?(#?.nG\HNs$$R?:=#A0f;!%ThGKkbOSli.0q%@N2;ggScH0t5lr=l>0UY=#]GcE2U7dk2Jcr)'Ub-!3gmTbOp"`rQ-$%)#!RXh%Ke&N.,.^o:Mb/RRJ-]s`^j5=%%<*Z:kph!E*/%sd>,7lB&&@tCjHotPP46GJ/R&3c/%(8Ya,4@J\[hnK^_)4I0XKAN^C4MoqEp02eqp5oRcg7n@f_Bu]Qq9a2R[C9%0s8&V,c:X^?j"CmD]"dl%9eo*Zl@7FFYqZ234LTaV^]`DjM4>)a'3W*3,pI09LP*FXsfeN7L#:r!L68]Sn49k#ZTriJ7_pf!,`GT%<bK"#=QT'Y\g-CKRSF*a4^6W7JssUu"JGKEl"oM%Jsn&bjn2n2j/U`[n)-a2[j'dm5R39<,B"efN,t-Fb35LN7[lm(AOnAmj4V9b%1'.sq7$8,iV/r%)/RbKCq(L/c<MpmK>'hjHI0[%(;8!-kL4D;.%b4#]hOnEc*i!!oobXC1fTm@5(cW[S`/DlP+U:N.UYV&"&d,@p%JQWkI40VQhf<9H]L*Oea\VSGbnX5.lNE"e*X&(]a?A+i'EpY$SaXh3FalLH^cTVI:!Hu<k'L_Um8TBMO4sEkZTr\hINE/W")*+0p%J]P8)O`ZI"8;7an+EAqA5Co>a:8TtQE=R?c;72JiZkftZb*UmuZL`)j+EYdpdmNcm6J3b6LnOgk.M4PWJe"uAG'uC)Jm^L7Jjq;\%F<_sW!&W+SVhC:/U&p.ENq/ZOAe!Vb3Z:sgpN@MqaW$V*oc"Y32b($jd>Ue?OEh6@&BQ*l.pO;B5c?>LH'^IqM/h_c_J8$@d@1Bc%ZHl((=oOZ%AR3F-o!)a/F*K6V'GGi5?=ZJgBO=7/)Fr?$]/Vbd2l>*%.qK)#h$VkHl_]Ie*],+XMMmUd*X(Qt*Y,BWRS7b\GC)(.%T\VAH.=-Ii:`jutNF/7t"jgorPo\bX0tCso&B9\_F4!fO5'X9PKh6&&7\'d'1?qDpWolOG[0?UJ=%`ls$"+Q,7bO-AMC*Z+mf<^N%(."sX(,Q#l[.fZ+b#`[A52U\g9Li[777l06PgZtYjh8eV-k0Cg@'"?V?sZbLJSdde<c%d*O9O!#,AI9L<g]C$J/MQ\-\Jl?>nU,U%U,Kg&'@)/0<N9tb$jGfB,NtDZBN.i1!g*.jc_i.d!>YjF!&1VI0EsE9!mjIT6fLI>&`sA#9:7Gn(2Hgl$61RU1)'p>a<Y.W?.pYh%0eEApj[rJX%pDr^%:c&1!+U1OSck5P]I&PIRufLu9qtETp9O`n)`;@r!&V7BhU-6#9t'L9.qiT=Gp=c=!WnpMS"/[7WM<T)F9XIX%5m%ff#%2UI6.m*S,s!OVRqU(r9Bh"a*aM3=#kun/*G,fAMO&3lgT^ualrPrL\]%F_!W]/EU_V_!dK,h\/iJ*%P6I":%KgUaG`!k<%7R67.dRH9nXj8BN+U0-:S&OTaP!ScWYU9IJT"Q,XVR>+jWr`hGXDn?)$=*-nO6CLE(S&>O$!8(%6+!q_i^rVVPKY?YW*d^l'J1:s%dUIc67bQQe#nl8*%>S'%EUmd&nqu*>T$!!Hah5.B<+Y\kMsV"3##TW0,'m$&bZYbl6<[+BbMo6#?nLD*97o'j!`Z:@BKfKnh-uKT%8fA"/a+ONBJ8m=s`@_LYVr5P8V.0U%N,QZHEbRea4)o1Q@#[RHTtj@\L);8o86e#ja?X33KMK1a!?\kb%4k+nd]O96oR+M"JsDCL%,E]Se.Fhl7mNu>W[g^MLOp0u#Vm^s]XM^uD3A4<O*!T)PN7h7>N%AX.nVi2B14s1KPcKJu,#70gZP=7U3JhUk#\Ie$q)!hMo2<f[%.-E=(AI(<VM%s_I7EC_1%ib$H@Dk*u$Vcs%.I9VVQ3JVudYk@7_fuW_qEjd/")AVZb!A7jcR2=I\M'=2//j*@#gmAiAC!=;e$e%.%p*=sPD.JV_9$Sr]og:-,&=ZGU!SGO,`qV;2c].aF,R"qc+-110!7!le(JH#']SgFH4<9htT#*u)j(Th..".`6A*uLM*LBd$35FEm%U*:(L0,%!BF+OkcZja$Ih-qWW1F_mr@7c`1?n)JJNr(Kn^@<V%8W;*?fg-EM^*3M6<Aq7l3bg]88PKIdb^knfCU0NE0M+r=[U;ce%_OSokq"tP6BS.R<&pV2N-H@<-eNT6=0HPcZob4gb8kqIROqrRj4O8Q'3SB!?4I@T*XsEoQK-_XHj?P"aSOC#o;*&J/J7UjpJm!Gp%Y3glR:%U`&VJ5-CXfF<L-(q7fX&7Sn9J&FmGO&]P2]d<_P-19TSp8kWc`kU)&6K]]&&qTmli>6@V48D<7i[m^aBJ`KA,.SS7H3e^%[7(aiQURXdlAi;+4J;'"A9C7J,[gIh_@S[0"&+"T*%3c\PFd[cPL'lF$'rlX)Y[\h1fhdDNCOf31b/)FOgY:HG7kLLf*J5mXCYWk%oEe4*D"[>?FJ\##1t^=21nc@eJm/u!-$TSqn8P17!\gR"`n#a[kV892L5nT)UO/(55Bs^CiY?c'3T^H(&M"%C,IK:dV*l7f&mEP8%hP5KG5V5V]S8n=g_5rI0-of?^>f,?25m"Z4+d%MBAu"`%]ZQQ0.#C/"-q**iU^*LVP*Up!_scRckL_'tK;FPEJ:,AfM),eBno`4P%8o,Nc#V$&UL=B]=3)J$(T>D_>MWA<^kWp,KZSdb*Q_t83U%<N^M[r)!<$PQI[*.WcIHG[(W!O7)fP3smZu2,<`N+5[bp=/rX[iJj%qQ*3<V3l7"nDun>LllaP)a6:c0XZl&)2k)(:l;4SN_VPH;"7sa(\@-(j@iiO"6(T5/4)(:`=O1n$[g+n9Ai]%?F.e@6@V$*PU9:p%n2ZF_&unGL^kPmtQ<D/92ep.IKBY"/HX"OM,uFoe`He(HNp7R'hKg"""'^ln`&O!S>0KB%0NlUX*Ye->me$Z9HQ9"d'%:$A]bj:-%U7afTY.9*#`s@7<UrX`9TQP0NH38qk'Z"`HkkurD^58>cUBD(1.#Qb>@4'pK+CJo*U`n^'!,c=eeElTY?3:!dT3>m#F&#bQ4@'W*%d=Jg\!H4K1E&64$Y^8S#QuZY7fY*P-K:Y:/3\)TiV_A+A0^:Ct^d5S5,c=9)q2JS'0gQ?2YXfcM]kmHu$3KX_.XctjKRQW(JB9co%5`V@$TY9h8829IACQGAn1`^f`FE**GS?,;qML1Ucfs5PUE>^cq$jj`g3JGBm37!FpUqW@ULU9=RYl_/0A-=IHVINH4Xk0NQ7CH29%(l.=AnX(Gs(a<@VK64gBZPD$-ioGJb):K&iFC;#BA;/6$SW+(t>aP3EhLs?`;,NF"Dr&?"-'SH;X6YMGe0T+nPel]C^ce2sf!Wg\%+Hc?)P>M+'e\c)q-`[=Od9k;3haV8mKst-.*1B$@hIU?)i:&atKE<iS![-.r71k+ocQ9_kA[I034K&97:WYL<a!rT%+<sOa16NJ?%%f!W&!=clJN%D,p1_).#To#0T>U^mgP-\oAA.8F2eHlO()Bg\0#lr&eHX1ge!g=kNAhUl$b-`_CS8Ie`E`ho5;Q)S9(+t<-a:SLS%ZH5$3;:'iSbV\`nO=.u'#bn(l!anstgnOg9^oioILj;$t?np*eMSgL#(#OQf+/7@e']^%FFVJ=.c#[H,?fnTZOqX#-X5ZF'dYV%!%<)iqLd4j[V+h"c=UL`0&VGc\m,&f8[UJr@`1R"ge8u%qX$$cY1!+6m[B@5(-1CsFGV'H+PBkBK+.Sc8I6$YZ?Ylj,03d6M(E2_lq%bfoN)<!KJ,9%86K`^_tILhO)g=*qa9P!"DL`7X:2DKR,,NFt^?7NJVG0g(l9#/D&uDPNC1)G$RS@[)o(gEqVp!O.l/65r9KHp"`q%Y1$Pm0TD:+nOCafSIrriW[r8J<d6DKK:Ou3@OH8VO'jUW!SIg2k&TFVX6lML$WTTK,0T%)K<%U2.Olr4P)=F$N,*.G7q-R?$d^4j%(X$q<m,FkC`:0fEl*f;s=mR"VAJ1=R4\Ng/>jOir"+%ZP@L$RU\6_4U7rBbq15H<:8Y-_,'bU1;kPa0j#Vtn/N/]GuA?\rEX]7uT%JhnlGKfB*R*$b8P7:?usAepThl*(EgB%]M`qKhC-$<L*[,qoTbE<2D'hoE[^m!>WWr$6RLOotfoJJbCbZ7Qs;`_Z_6psV6Q#`jj<%s1D-$Ed2V$HlRMq1'tX*%/`O1T,\Ip@lQ,F#>Y.8iRW-'M7qgT?r5G`:+fs8`<geq@f0A$RD:/m-9hbDc.5eMZ8eiT,HKhF>O;F:%O"TNn*SU!'duEKGjojfTQj!,G^&gNip,@#L8H:t0iLg+&KR[H@(N*eiT&#-h9ae$c"V[G=/bHkWFh1Z@Vde<'jXP?iDHVJN-k[$c%+[fYR$G:8/4Wc,`@XXP<6)-i@X"N%EU@##@Fa2*j"/d6ZHU60fKDE'%%R\.mf(FPY[W_4UE%jgJ(r:>"lsdO]D^=q>/*!$;nEj?m%D$5+/G&oj^PEg"-G(]EG^\>APM"N3U+Z9ujD2HJ0Y8#o?dHY%E2@_!NF_/q_`@j3;J32!&&b#u8KOeSSeZX\$WIn:XMLhoFaXbtZ%cK7=@Ql[unq"Tdh5\oHoQqm1%AOef3d,/jZ;#X528J#l(aksg<,6hRh^![bhH7D:TP<EkKV%U!:q_Ce$JLKUa\K"j)d]lREnGl42%$dhg79==j\UBU1!*W4S;Mt]U]'+2W7*JTAHO,"nD11ipBB9;'i&355_!kNWuB<,Z9lOf5oL4..@rSo-8<#Qd,6r_=&dIYuhg#s&J%5'?Z87p;Xs@TZ`lpid,qIJH4;r<kK]SRg<ob8NEfM*O):#f-slKG0<k7_BHB&)P_][>C@KBFi4>\0T!9@alWn.g`jbaMu:u(H>e@%F-31:m$JMYDDN,md]UInCd6C)-S=qqCt/^l/o?5hUc@*s[lm]pSn9`s8QjkEqo=*<9!(afISc?`iO]fm:odkGYor2Z'(@EY7jpF`%@8jOA!k*>U!^e@pCGT,%/gd8u\iOI+(l(t#AIU!fCpf^^XWAa,f%\\h2Qg%"S/9Y]:"2&C;*c<*CTOa"g*Wn2,BKfal*qD(**-K?%.hnp*56.ds!!HB%6J37*,]VDN$52K*!ht%*Cc%5fbjbg(H]Fpr?3ld3+r/uDLHlg2U#;PQjhZmVE[n#dDOXNDE4Q[744s'S@p^0H%8cX-l.',a>M?ACASpUbZg:0+G&lRsZMFac9-*`*%U8"g(*%hc3ME0`WY9F%qpik#l4%fcW8>Y?g8iVK^&G"IEmMO;2CBeB?BM1A@%"5(Z4>K06\=)6f(T`bL2%iFBQM\[->,>%SI.iDD3!8ET&$V&%BFd3uC_i.=N9MmMqd$/WD%g"';7D])hQXG(O,i\>O"H*<bR&)':%&3JU1SQYH0Y33H2bnrjj=t?T>G\SDK="L#,$6UV)MI[8)#%G[,adu$2I*/Mn-Rs50lqTs'O^alBCcBa"WgHe5)*hk`bu%s'Oo\W?%c!n,k3/fh$KbtlQLHoYe+PBKqVZ:D/(*Y$Gg?acO%,&Wn"19@$0fFR0l=an:N<Bu"YhtOA!a/7=VUE?eAm[#N])>$6$3*@mWHRgu%%)>Wm0_F#]Q:fX/igT,sjmAP`YC2tX>[EC0R'BNek$8*70BBK_,?>ll4r4Y]"4oS,qNuieE0PR]"d>UX:()#WaC+36*,0uZ1K%Dn%)7%Pqd/kLf?"*LC7#gg+_6ORE%+Q$2lZF.]3EZ*a%<aTtAp(mL/h@.%YrfT?S2ZU^o2fP^I,7qN9qr[dm5CnR*.]HH,c)O*&@Ln5%4sS'pT!FBY"6Y[9j._9D]3X*`XW"?Hirj'Z9-V2;?EPP'8S\!Y:973-ikA_h`o"gJ`5D^\">D8=o)]"oQ4_e03CkL)YM9"o%lSu!%\+eV(Xs'@dp[QU2LTu:g7p+W+*8F`DO>;pqJ,RPQn&TC:ecP?cpU<(GhHf!n?f&GBonpQ+JFbFOmm"THWhch)s8-.>QWKlKi\0i^%kj.4]J,es/qqI#TI%4Q8hd>6sSDF.Xl&0ILJ,8@$eP5i(<Tr#ijY%/=bE%,orEJfYakbcUVo8E.bH$Q5jUHTENW/M9c$fEuIbk&'%@0tiiC%CY\ajl1@B5c:l7t:?hc/j6Gno\XEk$>U95L-DQW5dpf.+qZ)Fr_tC\cHCAmAYk=IPl3Qs4gj5)ot79@2ubkr:fd[IX:m1%EtPuA^"q,k1p"/W>bUB[a2%joeTp_ZWcIm1rH<I+s*jII\F^gUiU;E>o)#$)bkpM`]D)&PLEje<D*Z_IKh^Dgh#6e_[CeM,%Rg_)%*Jb>RcVkMC\?nWDo?5h-jl11RruM4SL6HMQeru0ak4\KHjo+uj^6(n\&PN.OH*nX;6<eT(I"^%sU"qh9s)<F:p5^4`Q</A&J\dKg%3juZ^a+p_S*(YqtiBV1iXu:C8?TcL)l/g5O45&EB%=!B^$$gsrE-K%oleU6LpQt&qV8\q?ZZ:?_$rj[;Iq^1;+-q+`pU>@!a-/">%p"Hshftp'Z;cGp?WgV[LJ%5H%Gs>ieI#/?+W4_fZJ!htINkX1fD9j30]q0cp[Cs9$.?<-=^<XqE5hgX4G8A-RX7's[5JAh"Dm5Mq%W:'&N\i4lo5,rs"Fml9s*S%iu](^t\pSQ,`/?`Bp5J+H(m01#p?<&XIm8N/DksE#+c(8]<43Yqk5T:UmEdk[9QnSJZGm5;C6(H4N%4o&?HP_2H1QQkJfEqQY*C,oNjqQFNB+$X)'h+VOALE]A%?:#IG3TJ)"Yf>W()8?&U4NIH5b9GX6"b6FCmDn>eoE?oF+)ll<[,;1E%<IB2(H[BqMI!pHe2;ET3Y4VAWdGVih=Iq`^S__P.Da*$Mh$b[@eV_[\'&Rhr-ia*`HaA+<-r\)4+6=5nUCb[rIX?3ap[rIn8_kF9%mesj-bu3dNU]6"P!5\U&Y_BlaKZiflT++D*p_esNIgsE:^RdfD[Q=n/^TAHYe1T4UUG^ttA<7mO05p8S=keE9HfX`Tmh_nGZk#\K%g6$ID4!T3BDM1O56?`&Llo4#HRV&pbP@S$f_;L=3f.H->Ca,P9r[L7L%UUNs50"ib4sO9dS.A$Too/+n"4>H7MdMkGrTrtCrr)N\%Ie\^/C&?[g`nC*goBPoGa0Ws+#)tkBhK_)lo'U,LSb^A`:#pNA]6?o`j8fQQ].U7Q3#>r)"36Ls8!;upgGcIngT0SpEquoTQJh_$%(U@D]%"m7Ul'.!MEKO*[`"O.9UCKhh;WGTkYOBah/g#g$5q.7"2Sf:B3\N+hcA$['%nYe$4@P=^bk?0E-ufZk\VoX8L2ZNE]YD.k%IJ<U>W?s9[XW<h_hD;JkJ,3qf#BXKg?W?fL.C$?D*:_a$*qmcb0?q<ap"bX/*PbiC\;8n+H=hX3db=;(?Odl&O4achNU_;#%h&q`%5IBbZ^C8_=%V89O4JG3rOq'7*_G>g_&$u"C2`Jp\f?:5Vq(=/OC;hQu[4SX?)9:M!R*.:VDj_"lej"?'<\#6QMPoBSHQR;"bM]4=%0`05T&KT"X1r&t`iTfcWH+gl$s6f6k!Gt<XB;)<@Y2_mrNlmJHUQpn?ol92on^DHV<Jp8:]%VB-4kN)F0Ka9_oVr/3o4Dr(oK-J'%LViM7+&kG>bU#=^ftK7m_.JCR@/tpMoE?)I^9#&X42hcF]tCr1,sq"a)5d(EM1XX3+e;nD>i&ieA%3)8.QkCUDi;]#\]M;!O6:tt%LM&W'0pnGCF!\$i*d^+n_V2Dh5-3`.\$OrscWjk5pLe\3Ytlja^W3k@hVDKKk8IIt)33,"/C+Nm\Mugc3reXA@Q4go$I@Z"\/ER#%cd*]9+1;EXjJsf3ZG3Q&qqL(%o'LLsaFj<+05t:WE,Q\\IO:?@m,mm8m+G:S*blb-=8j$FZY.G,q25W8)*Xc^Z$m[F@J7Xp])ud7%q6E4k]sqg041&[gi@+g=/KEpN`J)2<+46cu9#kn<hDs8AE1"I.p+[P!ZnLAl01W>#J^a"736_2V$\oT`U-mUhNo;ZT1U8[m0^=]3%%^X'ag3<Ppikf,YO6BDbhD$"I:D\N3E0qZ%Cu6,GM[P:X5,(DQ!2%I7F#_Q043ZZdlg'u$n.;o1mLWKDS:rUS$XYNUa8nuOQg;FC%^&1;ED4G*BQoDW[(LC4Zl#:.[JRg?YO\*?\0S@boERS4aj;^26Ar]plOZD.R_&k\kOeWpWg7EAmPIgfSMJ,M7[dOWA$&!WcB1ID/%KV'7gZm.dso!9Q*4+)LC4*BEHk-KMFCi/\"5DuH70RS,cAM[lM\3KPi)*I]SZMB,+)dA?hi#"QpmnZ#uiFOm<5$\$?2a:XJF*[H=%e_0D0Fup$jL`JVJE1Z[`Xi'+FGK]=,D2D!t/(][tWGeeWUhog3Nl&PL_WUFg2rT\B98fBi_23$YnGEOgT@mi7:2imBZR$%NRF9f:%quF98L5tSe$"cCW_0kbU.Si0ubF=FOgWQ)0i@`<X4Y4qIk<#ogXN'*ELtNR^l=mZHB<`u%W-]h?g#4:N6]'=MAP@T\=T*Z>MEP;r%g\UZ4]J#'!/)0qgf=0?RDEe?qi.m(>*:#EM[qF\,1E#3R0ndC:_I'd^DmG4MU/.tU%j&g]V=NqnXH_["Z=V,Q5h',daHch/Hm&8N%Gh9ZJSnE86p[>;PpVZ`m_qRS'<"'7N$iTYl*=mE+4WG9YUZV2n!-"87*8S_,GB.n@/U-c'8c4V:jJ+e^?eic56G]@#Q/Cr8>)t;s%dF!YqF<U+S1qc^%o'nJtdF!YqF<M`3aM%1cF<PkXJ3>jY*F6`V(\3nl3X2pCLV(#]G^mD254VaN-`=<.QWI7t^C;4Be`FF;pYl!N%kE*8rn//dfp=D)fl[?5[Ct74rTj:p;IJ`MR3P2s2;YSFT(:[7\^Nne0mo>=kQaU2e333pD?gl/o]$V;`c+CULo&cFG(73n]`T?[H%m5P'T]Y.M*Iri*3pu_;<m,m-^;'2o[UM%'U]qh]dG7dK.-FomCmV%bFRcKJU\O/-o.6lJ8GP85`l\G?h(FJ;18'4%VZ.4KI[(H`q%lss\OC-8!!B7>[Uj!j??cP7$J-cP/2-%nW0q%mml)Lh#8`t-AbYeAl[Cq*TLp^C'oY+n,TkD(044CXPSi\RN)>L`Jd2^#g['9l>;%IN2&7(O#]Hlo&[V+hJ1&ER9)S[+f[J`hVAPBX^"UD2re/UYTO)A4O8Vd;F$4gU%1XA9OI*fT'<Bd*Y#oTjG(FFb!Mk7js;mY5c5s%1`A%6"Rpl.._Z1,39JR)4^S\Yi<.d)*#c^n:[E?:NSu\!k;bA*j:rdj4,Lt[6&^0*I9p49s*/^tc'`\/484rTmJ5UabWiLRHfp=/%5IE$!3c:G5\SXOQ6uXPYk:uGTVr<)3[b[M;o9aT6QOZ.,b7?i#eE#@CYMYsXh#;K0jQCH2N3#^*ZYpkj$g`T:p*A;pSn[dUckH5-%0@mf2I<YnEn'=7'_[!K$Qf\DGkFO>iI:)KQDr6"KhSYMd>@-[7apr:as*u?m@jh><T@K:,$1,j:4H5]g!%-d*RdI@pG5)Ab?Rbm&%cp8'V24d1`GYTRVWU9MY*'@rM?!ck/43=>nRLFt0ma!&e.m88thCl>C<bB73ieM'oW/jE-:D6V!=C4-HXl_m.)ZHQM222Y&B[f!A%p%Qh!s3[e88(F=-AQFg\NMB?\T8ac`B0/L*mB&t?k\VA_;9@YIq>K!spU?L,".Q:\5g7<=Sp4N'?S7H'WP_NPK9HH:EqXL`\6JsI%LZQeVE$_/UlcBBVF8Ph5o)=#pFXf<^5j=moYBEGod]2p2`h:-k`&A4Y5D8_)Nu`t@=*aXR2V@YM.%.)jO6Dt,qLF_L^#5,>0.Gr-%%Qi;tiQi;=q+M*EG*#e^hVDKKB,k%K)$9btq25_:J'iN1-!g8S_f_C%B,JcGFjUj>NIH>dqrQcdCc[>^8)-C0h/aV2Qu_<Y#N),p%cF_9qYbS2*O$"cH^.E/(c'BT`#@MKk*q43/+PW4gZLXh\O:<;XT#ZoZ0Je3/pp'^$5'o"ZMK2rCD>UetD;--Pc#dWrI9:MC2$W7e%e\,68jJ_Pg'u&#,Ar[5Uk>h9]n,,\0n#5^r'u$H[pP2ZA?><_K3?F^>iMc;6VoCZ?!fn8W;<'`QHq01"4&JM-mgl5arQ"<m`Oiag%iT.b_lJ=%6<;6r!iNk13iS0%ppKZh7@;c&E.c4XEqJ^LD]Wg]cSg6tI*foP^m^P@*N#0MkSsoq)b]rZ76K$=*]Qf_S^,0Hql1mE4%g6@"#<'\%3r9I^mcH^q<Aji<H%qk'lpV23kK2).$rU3h*D;8Cml-E2oEaAR9XJVNmFXW/^!JG\_CMC7Lf^g-IAXZ"O-0NXhhtls8%AVQ85d<>3rH/0Y#"unS5ki9S:gU$M5lgqGgjF^L0-`=B0hX>E^nVZd)Il1UAaG/?Lp@Lhgh)N>j'A0=k^I.%>;eNQu+7IOa?/(_3%\D;I$L%c8#ZK(VcLU(FWH7SI-c.\oai9fOj?^K@T4#hRrq'VfkH>r;Jj]2(c-_EY)j2o>q)q/lj)YtX5f)-.@odMu'Sg.tmoDoiH%.I[1)Bl?53]tr-Kg_[T/\?K0,)5;A"*TbC-5MY*H+#1o;nL1mh7DI/t"nNN=nD"h'H^'j,9jTl<9:rs0YF.<hTY0oqS)sC6;nl"u%^sds.mm$Icg8Tor1mnm2s*ie`FjDB9ME^u9Z,$M[^/BE.NeK5joD<Z'aa>4GY@hB=2QqKNqUtZ6$]@J;]=Y_*J%aXrmYXBc6?b;.%n,;s*Fa=#Ig#Y-0a)US':Bn;kHfslMB@$=tiA7e&Hfsl9g%2mu=2&h42P5'FI$BKG\95N9Xn-Mud)T?/pJD_&idC_*k2OR,i.)*l%V5>G_J_-20oBCEfH$J#-?LD*E5OY,[qU"<3K1rRmI287iS,q[^(qU]Or:GDpOJ,%]:W(eO'L.-@[I;l'?UNA)gLL-kQXSf4U[M^o%*X]s_"!f@A;,ZA:T%A=dQ#rZJ5$e\afCqGKa/^#?jPrf?;,9<O+.iJimP?SLK1h91Z]MN^[.Z7Bp`@2%p>;JDrWX4mcS%6Ynf``4%W8UfL+/5_4(p_n?k*M-CnEIq[>>#2NCqmKN(5VAHDjP[+bI`0VOmL7Rhk0j&I#\`RTNR6Y3sBTis1XuAZ;p)`;K4kTSH![rguQFO%g";;,d3""drd(BHB;@?V7q$&Zk6`q0AHr^cs*T$6oC;3u>9rothB*ulm(8qa1//sR4@O;sedrbRT#fGPHO.q+7a=`2Y4c6up&ub'%,M$A+jt7[!VO-anrR4i3DcQVqjQ7Xm!sKeTO>l(ShY\4Z^hbd0#WuD,]=c8#.),_sD;\L!J%u!Ep8[o:o^)"l76-fiIt.L#GR4?J%:o%Kf^],ASptt&JIg=>=,;]16oUl.`N\7!s:W4jIWbUlN?&cL:bue]A8(Scc)qV6-7KCruVQ;WTl`k0H$A!A*)-(7`=_PTT2g3dL%%"*rjAm@76[@6T-3EE<VXdA-7mMNAO_7%j'?[HZL"5C)`S/UKBZXl;.A`H:+a!,J'cnK5%o!5/!2Ig#BheF>Ya-L>mkgFU(H>K*l%h!PMu:Q+HjJaEC.[i6HPMp]/KZ]!!L#`a<2kL$>N>cLW-$<-Yu$1g,/X%G<5TCdL,Y(1!N'8EL0ESZ;W]i%=Z[FKH=hppA[1A7^h%2qFqThlg7l6XOV7Dlp.ZCtUMce+:4q^eS_Kf!iB*)E6O=dI]0^2U7Ak<XR^^2ULi5aqI^BJ/E3P3S$CBD$1)cQVM6A;,u2%ROUs+%P8Hcb]Zksp[pb`=ahalKcFsU5c("4R#F%:(H<CH:N`!Ci#%Z5`QM$?T@<#<(NUiDZI5M`lP1[#F,l3[47.=oQ%lnDL+X_V>%ciYp%qXM1`DN.)reY[@j7Cq$`EFp6IL@/^kepe@!]$^Ta.L`dDqj$eGRD</rKoBoCFu'WH;/NFP_jIInQ9[O*@sY6A;JiV6oN4%\<W]tO%E5n^`K@sS3%"3/bCPBNFV70JT<FB'?-JD*[WA*#@`&?3W%!3K/-loG0[drN\PQJ6n[BK1G%S%s%D?gi<Q=JQh!iT"*<KppcQ_nZ)%Y4H'n^]tmgNR=ppmj9a)`k`G=keN^6g%mBsNNkM=ZidJOh?Z)VA.:LVneT!E@q-Eb-,'[rWqiKj]R\TldqWD&3&U98e%-RS7^%bM%^n$Ujl,u,,CufI'\"Xc=l-H->s$ukVeXI]Th7'37YMPM=^J&QaY==!K;M>$(8;YO%S!+eq`VfDfnq*[VYMP('PSO$D#TOrTn'DI<%1CH][]r>$?6H6dPqc"h34`=f5OoRnE9></:qX4(9j)QukrU"2sXr/0s["F?)f=LM[5%m=am$kGdC`p'Zo^i+9HOoVeY4>uQ].U_(%=6m.MY%s*@8>@r8gPbo-[F)"WHJ-]i8=J'c9j-5m(]FF7Q]Maa95t:^%UYA0!X+^KO!IIC^O\Trn;r/,q+W6q+Ye4U`j*>`s/4X9%pYNG1C[E%b>4Un4pRLt@ms3Z5:Uug6oWtu]mTVMjht/h^[p\@4"`sDiR(I:QZ2:CMgpaecm[J*Kaoh9-Eo"Na1HZ%MQZ^LYaC@6g%h'H.==?8B+"\J6=R$.U,-<RQgD%Id%5ch6Z-6+6t^2TS"?3Z(le2DUuf-2U[Hr[-LiZ'&`MO[S&jB./??41]i%%S;4J;6Ja=s3Is%NM3dJQ:#(h7?Q'oG$nH4#+@[Vb+[nU3FIRZfE;GO*I.:9n(B?qIpOamEdBrV#"H\+QeXSiJb^Ot1shFZK!m69cGTFKJqdP664B_h%fT2uM!h+rg0o'+em>(D,o'muV]K3,`E8&/g*!ZQE5qtE&!CZ$+ciIFQRR3DDe::F*mBQ`>C0P8cA)N5H*<f%YCd=gt$`inme#E]b%YkI(+Rtr/nO(DFuJk\il^a=j],I'f_$02k9&/EQDJPB%9bU/4?8KB@\%-I42peb8G'^F?s(W-_[,3dN6$>3<hbAd_=8VJpd0X4e`%V-@]0-6.P0,.3SW^aBLRJ\XR;VSIq#$pg%mZZ;#N&3#[P+J!%JfI9ICaHU.L/7ATD9/E=g8<JW%"AjZb&\]7VCJ4j[%@dDZ^r^jS%Fl6(NalAJ>"`mX"E#]\rNlR?%3N<7#;l"CW#,n"V86RG4+MOa%W>N2KaE[3>'r@jiL#,cYKKW6_^`sAJ@A*[1HNp6sD'E.T1iK8`%pgKk4LG5ip1n:($@RI#9(:6]^[*+[96,62n^X54X.rOW8aC+^HZ;=.?YaJRMKBZ?!T7T#ilA@s.,4mW'oP?J]<CY;c@>Fm3.$],_%A[<V\FL":5"1a5E=:qCF=+E(-UY$*k/LZ5Y)2HE]m94N2K8INZG/G4&(1B3#>L5na"9&lD[i6J#`CdBF(JTfFZ\-k8Z(k+.&/Z7E%7Y_3M6G6Rfl<5aOmPiJ,iuN&be*Do"S[D@8h/N4M%t46A5P`rATDI2q+8YZT5o2#b,FJ>Ps8B3Pq:^&,qq^^gm9`'NVf,9*mssMZ%j7iN??[_Y6(S5pOq.D=-rA/s!?tmgob8\IHrQ\dLe(;>.bg1b3bYqksm,<.&:GorYgB/D0rgpn'ba6*CjHJL#nn1/_mPh6@hLY4j%-\(6Kn,M-4s7%0QrTc[pqZElBR@nnoro>`InZ?_ZqceO:gmJFrO/?EYcH&g=3Z&JJGK-"#+I>A^!-nu!@mD)U:o4Zr.<DI6eS%Eo%7EWC;9+SP*S8&*9pBh=^Pji0o[MA]An:d#<l/3>OWU-K5SXl^q'gknZr,?O_Cn_IDOf76'g^BW=$(No*+g_5\Pfs+MC?o%<0e/!\%*]h+bTh,:"Q<]C4@L9+U((d\U6fHpS$`7K,6)tr.bn(&1hRRBgIm3kJpOC6*cX,VdMiUfJ0?$-B"mu3;Q]"0,/(KtfK(b,UQi3S,%0Di#Ho^>45p7(d3p1(jOhJGLNS(?EhA%ua5D*R``[_:nFIab^Z53t4&HdRoQVJ!AdfPaseU*'8,a$Ce"Du*fmI5q!^pc8+0pc8+0%pc8+0ppo$AQ[?sKC5KV7qQTuaQi!<LeX"gs*;a/6s/Vt,QV0R0keA,6iIq2'\KBS"s&/4(:?]HWqQV"9084lA"o\>OO1h@hQ0ui7%UA^A@b:?$Y`TYKod;JWf6tec[I%3JE^@KFId-&P%%p,k9TWc)lk]PK!"/"n_]Cs=r<un`M!l9p=]BRm.m^i;Vah.#Qj#&b;^[B1n%!09#4[E!3rg[/R*Nm>o[JakV.m^TgiW'ut=LT`mFF6bt@Ht6]+27^H8[^n:Qe3c*a]EM7hWH%.ECT]mAZ:,a>b.[L-cbK(f#N,?c%2nf4GqTOK:Eq70Af3E$kETkOia)>nWLK7$^nHU02l]4:,M,-81n\9AEO5KJ^Xed2Tnb2!5$oJN#H1]+g]n-!rD`mZYTD\VR^[\H+%plBq)``KnLR?'T1mPf%."h]':GZ7`H_Oi(YPHT>b?[V-G^\-[^J,Jq7Ie*,lJ,%N;^AdmTs5I=f9+I+4FYs.^2kHh>Rr<WAs7?#p%^A$[fros#-JC!gOHg[:DIeT=ms203@Zl,]8hPa=pkjUIMmj=fthu:u4?[_K8ci3:MQ[XrY0>7.tc^t*_P@&b)6bf1KP'8"_7cr7[%X09:o41P+@+9(Uc00B?Q?^<m[cHi)mnBK:.ppW0e]sh?ueKMI*-Q3*/2gsnrhtk0q0<!g=c:]fQqh&g8p-Waj"r^9.h)Ke)bt3B`%FmjbFRm2/C#`i^_pOdBJp>0/IAa_g+oc]:PQBn5HGQ#E\00K,`&KFeriRnTGq=sDi,>C*=J\=$bos).)V-j8l(]N`g(LAkJJ,/2m%??kVIroMI55==7H*ULc(,<*.X\T`J]Rm6aP"[+V@5Q0Qm55($0*nPBs';4Pin&0!+nG+I3gQWgSe2-"XbTEGrnc5+DL$S/7(4YqN%:ON2?joiL-00]-D00]=1e*X?Lp<#aXY.FTb+b'E#htZa5<X:rDIeL[_r6:^sQohI''oq,+Z1cI5^\+r[70(<u5Q8[Ch\I$r!b2Hb%SEsF/n.Yil'>"T)4T4`0^2pFJmUK.KNSjPBPmTbOO&%mJhK<j#'gDFT)nW%F]am/emd:3_qKH-rkrK9oiGB[G*=!ThiCGW8l#4<,%K:c;,1`3_EVuq8*[BK*p^$\6pr8+b5>0>9Oc[P>@+*ub-%uLRQesi.`b4#/u[sqjYe'FZdagXM5T(3Fl#cJ9Sn*NlAJ)nf1J'J*!%OM1+4q2t9jmX(XP6ZKf1R/E6DIcfB\5B!P55C_qnVn`1up\r;\EVjlTW=K"=C@JF!s6D=dpV0F&m\La!qn$53lgsHAL7=9^?3(mi%#;LDZ6]Z]`6A<h&B&gb[*e!7d1#`\bc2]qLUT7nh%Ia2d2ns9GB"n;i:VZ?-9-(/SAP741WbZPCK\##PU!J)g)`"saAB;LTR1HuF%/`aJ(>02jl=*!X;hpCLirZ%EM(F34aR*%XCbN=oTNao(n6,o1?`qUVss5nNTprmeDHerFp$&rZ<k50ms">]_DI/N<fH0U1#hWrBK%EUni/7L*o8E%#d3Dg_;s+90P$^[dA6s*).D\`%4U$c4N3C$Q5spu@/0#5B`rQ_cZ1@:3^Gh!<ki[WbbnMNZ`-j^]%T1GlMHRTrKd%EP#*g:il4KXsP7_lr>(<<9;2Da)?D9L`Pod*]frDLCR[6ooX#eFQ+E&_,Z`pa%?'$<3d"<e0>n$J;4&J`[T1&b_*fQHZV6-OY1g/%a%-LYc,-7Q5e]XDJ>]>+Of^T!kMlg`*VL7r"?^Frq'&$ih-gSOQ`bb076u!HcJlq776^RU_m<\5M@&cfai2[\f)2V9$3Q2?*<'7:%X;<1%ls?;tH%eF$DgBr%mfB&9hY$$;%Vr`ErEm/*m.2mCpu2\-5C;?r5PWh&W`@@D_&"c;W:a4F54ui!hen?jrE]I"j%;9,iX`cm%#M/)GO8ZjV*-h8aT.F3r.=U]1M`NN+r5.XACDB'P*SLKps4R:olMRto*T3-r:l3@:&&rbL2Y!GDT.fL*p+Ot^!,h_0QLjGBpk",Z%0>Dnn?(+B8BJhuncbJS+3ZDFF=QedYhQ9b'g\77>HMIq?\^C^hX:?h1^@rD2\h?(HoC?sP/ld5@"m;.Wrr47H^['Qi<-miS\C)I%%$[:^qg#'i8hW&E_n`T_'E2ETrS9[AahQqi,0CGdes*DX6]k7T*P8Wo;G/d*cq6hP8*o&\m8+nQ+@Xe#X[o)C0fh?e/3@B:PB<i/a%om;]L4aCA:P]0CT^SDPgn^,_plWj3JeV%M(.fAHb)T2;r:H>HHUt/XSOnc9sZi&9JVR2Vk\Bi0gae'A6UNZ^bePrU@dc\n]@Ji7W%ch=kTqOErU/_O>"QTf&(BbISp5%e$]L!Nr5pT;JbA5VOes)6#Rc4sDs^?Z0aX2O_eGQ7Kp[]rTuXWMlK#?mVe_Y67oBBN3:<R<,d%NXpO-aetd0ktcg*m#Re:_?\rW0G(i?q-1W6LO\qdJ+SN2s'+#n>_8Tkk9rP'r$_m6oEkIVIG1O0B#np^^LA*T*__313=Wtec,!O:%!Lf`c(V2#\@MkU3NChtsYlKFSJ+ZPmFCtr9QjY=?i2qb!o_7pipOo@(4&$P!rb"8.VR?/i?o\'ke[[BUF8ROH(O!=2GNb-o^/nmF%m]*=k3I:>][FZH_HK6!33jXQ&HL:A_a)AKHL?$=8?%;6=$eRgJ?@DIW@lN1bo8-[YF6fqUDSGZ9Z"oD*D3@XVI+:++*kUCn>Aq.6%c9(L+lcqS0^[9UADE)h,2-1g$!'G:-btY\(IcoN7n%I?7](_e[GM`^7CT]a.!'PE=arK8`pH>[jq?HGgYB/N@2bkN&V9c>O!s!8O%lQ0,U6Xu;bI$trml<G_*]FBDV;P/`J^:"4Iei#@2>2-\rDd-G(Vm2rhT"AlmC!=I5gddF]oU7l1WH1#+[e\XN5.1:A>+,HTSZfTg%Qj3TLX09.oeiQXX\im10G*8T9LEbKdXT8"S*OjmEXjSV6o&e]pFu;+aq?Vt5eq7OIMXUXCfA3oe7V,1&?%))L[fY?E/RF$<3+-n4%SnApun?t1)h/gVnj%@&_n28hT"Io%j[6m2erBsN@3JM?g"-)11RN&HBk-2du,KF]9r?Q()8(&qAG//gb%ZtC<d&=SMmb8KKJB[%$%m^T1/W>.;t(N@!t3]fb22!SjFk\H2bV*Nm`kIpO_!'+j.!!6!D-ptDO2Ut/]'hHt#/S%WfJn-;qB`1)<C*9(V$0]%N+e:JLhdP44%PIKGNoGqnmPb3J"&)udFno2HSIgmOM@Z51fIdP\VBEIfRDV'q2X,d)%a,VXM(KVZgr^J/T5aD[EQ@,eU2j,JH/Ap7+&EJ0]W)o9\%+E[$4+NcWo-5BC4b&IO!IrAU[;[\b6Dd09?WM/`d+S1+UNHuSYlKIm@'W=O8]?/M'5+X*F4]%0n:Y]p&:?CEf_6Fp[kfJ0elPnX;%dnjCu02OV.GZ:ld#kWibYIObN\n](%Fmho3%Y+P=Wub=a^&Ie$d"K3bK"LK_oCgp6g]Y$u_DHgENrX6B'<k*<h1#6<\(qDLJ714>%@E?r(GO5)62r8ZJbr=I'6d7>Y@g=EllKTV:`e^B[Y.i&sdRg*e%KkX)NaOqaDjBG_)-9i>PC]9Bqq1l1nqgaE[sQko52;lU)/c.0%8Ul:+cT$fAeQ^m!6,4:WMjscckVfuINu()e.o835dmVJR1!el!Ipk%RqFDZ5RgPlaPKQ"$bp@Y0i"KdTdD6.mj.gm[e[;D+PUXDA%[os3f8n#<ZWZ^4=!Hf*tKfF0TW7A[u\uW8Cab0BMI8(fEmMlG)-k.M3K_[KR$4JK&E;4Y-E0]2$]?"m(f*r/'a6gIKimE`<DpQek%bhV!tpeXajm7l;Ia'DsMF<Z57COc"Y?[I8d1#:14>GG58o1s;[pHR"(/stq=qfgroJ)@_T]!#,:I`rIqcb8cE+27b.rq_aI55H(F%p?qOeR[jh4No?m[F\HFSs,K>>MiW;OT0E"[J,7[PJ+ugrrjq`9nLjJ'\sE?JrGR/K_]SpN(]NfY-bf6Ka$04d6bdbnXM4r/iassW%rn=j]n,N"$J,Zp\IcKa$rR0jmnQ15:p=HH;8^t)9M.lH]hY*jsonh"Ckpp-@g/n:HZ]BRr:Ytdq8a5J^T($dr2uhfgO*p56O+6Ce%O+6RrJ,=e@rC2&mm(lr@P94$/+)gtm%t+!k55!Q<TDF?CoDUuLX^>BVj6i.XeBfqaIfC?/I*_[Sr/m%fq#,^7c<if&)!e+b-?o5k%G%`>rbJ3b:#Cl4:*dm:W4g;IN^tb\?l\_/M`1`TDY'g6Oj]m1ZJ8`dh)Gjbpeh]-@2)R;=fiD<;8lo8;infF0`eJh8<#KDJT?GAE%34H<M\ZJ]XR=3ID,m"BBL;P2?@X,,@/-p'$Q['.l`3(j=W#rXoKt(3i()C2)'cSj)r]umc>fsU]S>C[+o+!QZ%MH>&j9h-+dFD^3%E%[P\),<B"Jq9`@^"\M`N.61CQ51pr$UMA[)o$;J=3,K608WrR<D7.<O.n2Zh.A`*C#0?fPY8!WH$Pj;g'0r_eHU]fWe+3*+Gj_/%+:Mk?V-#XI>_/2MAM=8Z1VYl-P3Le>4+#IN7F.\&L$qgWbHOu0+#N\J"Q7s<(>c',pB$eS>p""`7MmF=$ZqWb)QkPk`Y3;9$+fPs%U4?ukoYgmn6SFjYAcMtN+tlQs8<ba0L+d1K),6fp^SQ4Ee\T+<i(6flFffBcAI@KKj)Hf&b66)%[&pVZjl9M*Z>*'a;M_)ER9D2D%dP"=q-9Q71_5.FMNsX[sNW.87(`ldL$GK8%jCtc+)\W[3i.]AT#sg$?pW="c?NctY0I[F.al+;"eS`A6:&YD*7L94QB?"r\K`N0@%UEFqmO^Y&10\:lZk91!N`H/]_J$8c8l3Ta4f[V^@@(<Fh[oXIm^9KB\c,'ERXu'0%:tD+7s/U=>Z,#^SdeaY;8lPD(\K,1kgl@J%%NlUm#$(CUWp/dF>]qTp>B\k?.qapBSC#<iTG=)1Ue%$.GpRAmfd(\CZm?I>CVJ.E"ml*BkV1$*mfa6L39uemoh(nBp9u@"f#<rGX%#<rGX#="ROcfJoV&*Q3MgF:sF)ss!hI-5OEqpdHo^DpprUA8i,qbj9()U4Tmm7qB0P\Ar,c'JM!4/I3eC#:MeY;GWn7IM`us2C`.%@aY3Jd(<BO?Na7:*BFTnN_XU7^@LLX'=Zb;bDG7LWuVe_o#U>7[l8F?O,f20G;n?,_W6k5(&$htGB\-UHiAF(5Q($Jc=^dah<krr%9>mXPi?K]g6`K\GqoC.Vps5k0HKm_epr#\ZG<QaV4E8;a1(Sc84B<7l4ns4sr7?WE5PO/10>7#;F$ID.?VgUUK;i87Yq%>U4nIhY%q=97&Pag@a9l&'\q!oZmk<2<(.uuP@5P4_L`r#(Nro.up4oWfKZQ:(f^ZXLG2S&/Ak:]$tDsu)+A)Nt]g_9Js4o!uG*c#-igiH0K%bb68(o++t+,OgKNl],Ae?[3i?rpcn'0@kFFnajR1LmCCu)cMe[AUck`MbcL!EhgXX4;!&3bKj>K?O/k\J*r0b4ZC1"!fsiiO'JW,%o>cbbIW4j95g#e\h<1E/dPRWp7uq8NNZPdkn;6,urFaYR73F&8`rYfa@h1e(r<e>ss7:ZV-OsL'jW-.,FhtoM5>Q]@m$>PEN](H5%n`+@p6g0:K[%gC=d*=\O5i4?nU$k"Ok@,fUDia>RnHAF[,EDR/7R$*jE+pko&MD65+?]8ZO/e?5iWVmoY.SWBKE"s5C6kJVpZ2Xt%8C\4-d/E)[f]]QpFQ65?X6#JtKg5D0:[KQ3Rtg(DS,GEQ224_^Rtc6:9?>[PBFI:/o)gS<C4$`EAnEkc_`riU<\\DK"rT>sPHY"7%K`tP;]`oOHqkkM8PAI(>O;nRI%asOZkC3'a'9AYjnD7(-H*EJ6NX*-Do_Hf\*rY^%aR,@>20<=_FD;=ZTD+o&9_Ptj?()2jL9;8>%TRXZB#&Er_3TF>>&,+hFYQu;*";Z!.rFM-=pLm+L8Xf"Ic!1<3C\N=&EV7#YdWL_;aMO.3!'Tca):A[!`iuhnMqJO<7rk+JqH/Ic%_,lNVHjiZ3k^!\gQ4W$SCRX`!*$_ChPUE,J"JCt@n8T8)+?A9NP3TS$e#iTj0C9u%Oqh]U\V`Yf+-2aE'=h!L_WhUj!G'bO:@Y;)%'7nOqfTF85o00c!)LV0k=(3BrIG0D5=<9PE4r1`i,Hg`=\^El$Sgu(:oYJSu7&t_[),$%/!/CBu;7E3JY[8$s.<snV5;G6-!be/V%4ciFAW;%ZjpADjniOfLN*GI.$/aT6il>7I,'b@[1ALJ>O[OUc'5)Q!^A[&b]6IA;e$n;CT_b"Lci:_Fo>DNeCK96p/,:j4`6Km-&%MD0'U="`M653[U'g77)2G_%`FQ3smn<68*J2'#S!Xlqi/[!Xl>0aj5m-_KOB/\0d?#h--&"uoS@@.E^NfBZ75c7=AY??l28++FuR%rumCYIL*\];:^Zp]6$-s;[=FMZhjX8`O-eun:O6t>kR3"Soog4G.ka*[g+;A0,_knanY`<!piMRSXRb%o)I?GT],X*NAmAWg]'Cj%$,=s4YC6#3s0"3er-iSARB<TV?5Kd#dacn=$S?Wb@B_a1D;ln$jZ@DqW/2P,$=%ooc3!`J2t#Z?4;2T$nA8M'80,c_P.F#Zg1.'F%&=66J-78pnJC,p(MKjC.]HWlEE^Edu_-9QOE(@bGb".kX#X"0nh[/dG+7"gLMIDlI#Tt>/`F+WqP-cZmk5tkg(Sa9oUdf$TVGOMt%jG[Uu>!iTK-@I]qa1u<++RJ2T5GY`%T1DnN9ekfUiQNSt"XP-aMDiH-7Ka>XSKk7p[02pP2@AF\Bne+XI?6;*a"me.%u0g5'J85D%!,Uh$7ar,Bou2H>'EMfT;10Z)`G-W5o#T0'B1+4'p^[I)[92%lg5&2&(2;;jgig)80FOY'4J0tN8^#*"'>R44J<q<4@&cgS+sRO1%-t[1-4Q*naP#VVU.2!F(KOd/qYGDC8T4he]d$,LdZP:!S!f@:7:bKsYJYo50q*kWd#V7/LA3a($65Gn7"eZR;bMoC<+U&d:Kq+36%3SI<NqZKNb5V31\:Je-G%,Gq1FHcp.98er<&\p&)aM8kVR/uLhK4_k$S8;)d[AO:-.K^.'*e;,I"3`/B6,$3QnW>XQ?n9'5!eut&%$mJ=%7AZ)22]mT;MIma&!P)</DqeZMID@TGpr3o1<!\'s%Wd/qH!ZomcibdPL'5>TjOck_TJ-aBOi;;Ri$Kmd$ZQ82I'ElmJ/*UP%UUA28KlDuRoi<MH$r%p;8QUq(IK?L'>qjMo%7&SZ789I<"scjjH<<._">BRiJg>=Z#AaH5iDC/#:33J#jITcu!@K1DimT1H![@=>%qEc6:Q!@ZJ"l'fgN!/Gk6r(%=4@tDC!QaID'`n)L@+DO10SC^WJ4Urr/.6P2?487FMC<#,@BXs1"]-NpA=c4308C>P6SQ$+jEO$0%&.FFr.nc^("9<`c<4W?i"$.XJ"m+bnCf@/s70m<s9+S'?%F?TLZE0`2(ipT`/4"=ZPK($LW\kbXF<-@^!j0W_MLg`e@je5mZ>uTL%2TM!o`CTpV6Fk8r<X'!a<,melE2sBnacTa4.%k6>0jSfSiM-RBfCKF-5/p2d.%'2W[=pB^#R3:F/ZdYZ?romVGFA"%-3[RJj-t]A%9\[#A>pbc?6@?]/=HpJC?3XaZ>f*tY&KE5)?U-;ZJX</R)JV8`5qlD.A>_am,V?Q7RZqlm+tH2VK>M/E]NKJl&5i^9&EMfE3JNj-%6.%??Q?3-U.>7q)!1&K&,UqY[6<F_I8<KZQdNrt1I.NjJDZKtT78&?!aGDme#^RdG4qDHO.nUuj&E'ULJDp[Ua23[b#ZGmMXmWM?%U`4"*aL^BA9KlP'-="NL=?bulj:Y$YoNjC1+e?)B0iom+o/.pVn@'D7iC'i*"Q0N^$nu6m"^?UOgP,r1j[&"lR#Y\<QqM9tb)"QU%WBckD?A4WD9cG-APm<SkDP@i1l4^O62Jh&5JirPB1D]1s[64.@`5@sH:i8eqUYil2QmRI0N<lO=;+6Gf9SkmJhQ\et#C>Rq"I!5&%:ui#3G%"9Zp">$rYtQ9V_lO]qg+sKpD60S>M.FF[=\b6Fc-d`\NpVDNfdisG?.h^tf<:q5'^5tTaDMtn5/CWG8fT%2/1ZFWq"c$4%`/kZ^:ERqG?!;4\#q>SE!3;@m;-AofETBZ0B`8$r!FWEN/9X-C;c9Y9NC=<[qE.>"d5Qln8K<'(0O2PY&@r&\#BU"n"a#nIX-4VJ%&sOM5hGF9.FT]\cKd0hD#%]-PO/(f.R4fhu@1"Fn8q1BIUk?J*Qb"[<&eG=(KLD.t8U&Fr3=]5N6`C;kI7jZ0d#p^N'I-/=+_[Ic%dm0$,0P<or_'+[R7L?<7j:\DK6o-K-lo8RQ&b&`5),#i1n[sOO=_1b[$:kihbQoiE8p5f_V:d:fMK4emi.2T9m@AT)7$2F_fS]QF%%@SgJo5gO^F,_/qDM@9i%n,#UFGkJr\u0<h>AG9'[brhoUdg2)JX3)M-;"PcgDuZ4o/%l5TqdH88NqXE67#,13u0>,pV.*<_Hko]%?K%!+5jU=m:h_H#mUT:7HP]S[KY'=4;gGKW(YXc"AL6dA)$]EV@[dsLV89oGKQEbC1oo(7'D&sd,5%s5YH3_$>bp&'PA%[F!+Zl6%l_5S?e5,A)r]OVhRG>mBXUrL")S,V.1dIaJUn(oQ8$S9ud(j*AV$p1D8T^Xo#ZA*1KPSV7P_phJ:+d7B//:d-ZeAk[p46/.>@du7%OPsaXGX6$D/HqiI.SUI0/3srt9U>o7a;"-&1bV<r/]W_oaj?Jc\R3J^=Cagd.1[ueqqsbal]PZLm:bg](FAo,L6-#u4:"KBV*hd1%=@J'-n<IHN.9DP^k=,2r]W@e@b5$OY(23lP!/rA4%,+b46AYb(*gV^5?oA:9btDqSAX\>T/V>q1C1,S@Bj.Xs!G&F?lrZtB0eTg]%KrcU'PnIq)"r9p@77L2qPrJNeJr#DR!#$pS\h$8]'XiZ?"\U4o8dtgO3%MB`o(#\4+=O;'!&om<A`R<&ch)cDZnNGPQgl4,A9\<]%s%!YkL6pB@n:kaF>4ra9MF$`pg.JDO,0@1D=<l-=06pJA-0dNU.Bfk8JcmaT"KtQun</t9*dLsV=srB=O6!Z//Zi(SD^*Pe":tGA%a"WZ<&E.3<Ekg#eP$/:Q%<!sTDVVc>M\/mm<J0BY[F^Ns%W*Er.=eHGdG#.U]IKH!(Q37aNJOE(/Og,%OBo)P_(WJfH[nZ.1g!<E%#e2rt/OTsN*)%C$Uo"u#/IR;9&4p.@4Nl[u@4a7B:a$7TWtrn7Lmn&j$MV$!^)g/tRh<j%>DfN>#74Q:i=G>8iAM$NnYHIIlEam:%2Oi)p'qJ<8i6o!j$H0ald4dliQGONF5R(1r!Ipg:fN3VWXJCBTTdk$'Nb$7H<MX2F<.tBRGc"XZ\/#KH&ZPkdQ/dBW<2fn4!HJb(%2W*G5[KtpV5[6Gs@)$@"6M_-%<;G-1fT?B2nC(&9d"C.g!H,bB%kN#F7?O[_:Q:VPC,khed0nap%t\8N`p\3S&0`h.n<I<2SDe;8%@/a)LUD%;V4jW>LTt.(8;39:)/Z,dW_3>P=..%h8(AS+@DD2d3KilSgi4?2JOc#osp59p,kaDL8*&&eJW'dF6PR,1ob/Ht3U?9/,%H_h4RVJJ-[45L5T^13(?Gt%?8+-@^\_:jQg.27"/\geF5NeC(iE94n%k\[77(^#X^><csTdpU6gJ-23:_C6sFWO<'!"Z(XZ6]q8S%.Zj^1XAT@ABbCTW&ga889D3Kn^nu>Y08X$+``0&C:LA++hX3Gc2;G.Ho)rj5]EcHbdb(",5i1O&.#H]-o9&83D*pC6/IuJ1q\&/u%I$,P/PtK.b2OoIK,5TK^7']pW9U()T5X\j.(!qn]l@HU4>bNVJ_tW>8KoueKm:\SH:7Aln#L;VM+G1h\@6$^H3sK6r$+)jP'Wj,D%'MK2JVEm3O-6F4nHe-5'&^+,h'0Lol[8IF0%8;XIP@>Gf,BauE<uXaL(lP6TUj9438^s9G-sAieOTS&18Ze%#d&o%7ZN\Q:,Y(L!%apVZLQqP\?'9+jkJ@C7H5Y^!1F-P%._c&0q7P<(<D7i?s,`,Gd@.jq3cKL../R'@QjtOV@87'Z9N1*[sWCA<>aB]d=!K50ph%#q:%K4r/.;oVAIdPbC[@Rq%r17Yc-XJoA(.A]#""pE.f!3.>C)/4#'"fKVTZ#((3Q/r@;lL'#7(;L9EPEFBuhMZ;HBZ9aK8rD>Y7BqlI%*G,T(=f7N`\a10;l6Tij]jAsaO0fF4:?CFJ!C%GpQbi.<e[*ABWCHFkJO6oWi>RPaA*_6gCUB0o(7OW_\a[LE/=fOekV0c6MG'%0%^pLS_-s+.DF,ccLJa\ksbq:Y_64;,n_WsI$"H&Y(Ugp7$n@30G:t1.uq\(ZG?aXb#"CG:4%-M:>k4a#F_2VP?Sl<7WTMQ::TOZ)[%4I()8>uM]AXF7.#(ht7a"iE]."%?$cHaCnN70:Pl:*B74YUgUr"@s7=n->?Q_g`Yno=IO/r[56Q4$%S=Q<&Y>Tr#Ri&c@iT&f2-/%&eG3s8J()Uo5DtFZMMkP/lp8BM&.,119_<=M%FuajeM@eOr"-PDdY=2rb[k@HR\c&$4,jY1lt*Dd-d&EfGFgC]@_:nr"$c44MrA@%apSW8Z8d_rX#]S"KH`"1Is+#Ep;Bjp`6rs@.@(MKoJ1VME@#"QKa14%RE:@[X)(ulBr+d4+URNg,_r1V\l][29XoX);D>#g)(jU/%;\;6VYIu@8Zk$ejpLV_o+P>&:"PZ]QqS8W#h%,+"F%I7D4X_n!7oF%T_1He0_c'\S#/I&pTAD2O[$ap_/B-V<p6>]a@OeO_;93T$%D6$LsH[<%A_1G/CmM0HV?rGT]cF:ce'M!Ku\`W1!e[R`1B&G5HdtP$;3br!fA$JABUbBPh2Gm57/@qOW\0H/9YX+l5=0U_J1.a]9%9SUk>Z_IhkE^6-q=Z:(Zf<sI8**<B^[E[5=P[dVeY#+&<l[a.5S(K_Gg/3:+b>&l.<.`X)/1<FVHBJ*`CtQ2HMjef87t_qV\e_`/%40URI[Url_NUo#d9?Zg0"GON?Ktu)>jYfP=kC[$%Ag__,<g39l==Oht*ff@?[6BcHo4V(p;lN[+W_lVQ<K_,iBlB4r=.\Ej!d(K"%[PYO\#%?S_<![D=",1]`=)qjRBLiQ@!aj\65:slbl/]WP,Si&p$>,:BU)Fa]`fc$8:cSB7eNKGR5%LGlINF0o\J-Xu'-4VM-?fs:%QXm[d/a;IsWsm'Lj=QhRE[I0sVil?YTgkcUXAZ.[81;#T8E*,EITsP%m_EaJ&q9^5EPZ\X-*UhCNU8A8h46p9C:6K`>i%?K&PM3Q%X"`>u)1H+1\TQFCgMUh82KFLY63^.rHp3iGB[,(B3h+Lq*A82ffE*N,&DfE[i?NW&_s86]O#CIaCK5VhE('KZDH,OFGMsd)nMDTC%-ci+Eo!,^S*F,h;/f1bR=1XoX'fPf'c?9dHD;-e7_L^D<`AX4\haIrIWu=(e<JLc_LE;0$ej(d!C$[%c=D7lCa-iWR(H_5QXSOWV%/6dg*QNF]3gdfQULtl'5Hm]sPW_:9,>u"==JcJ(@%211BJ>_HP-bqb=_,Pg6;fNYlD/Un1!O&&1'AK"4HV)Y-+qE)[Qc_Gg;K*bK%,N!L/lM"U\qFD5H@GuAd0^BBd(+oH7q&^jLE>%tFC)"bV-KbZHjP2Y1!b%[h40StDJ<IDVJk;=8f_]pa^kO!O-Ddll8TK'F!5/=?%Sd_M&P^!enMdjj&+_RW`S9CL3\qG-*eDB8f%Qr!eVqDk^Zi?&?^)1"2bL4Q6GC[u2Ja!b#AnXnB?DW,4Vo#+<R3;oMcR%&NI*r2B%Jnl]6aBM7\I-=N<OXlYb&S%DmV9=[(P@k!.6L'oEC6+:<:+@:h>sX("&31a`5J37a4j=a7(%^\B"8GZ_#"q?T%d+Y[Jcl$ID9n#>%^h_.N[EXtaOtjB'E4>=f):qC\Zi=VWc5-WO^li'#q#];%6!Vi">fhoib?qBpDjQZ$_`)hW;sGVl=j!Eg1_(/kHa%.Ch<ngq=CG9X%jplRY=ZA9Y^D9fO8J#XK-?Et!K4WS]>ZS6YqD("lHa5#j-..#In-a3^B\%sAI3F"QcghkuMtm]u7WF`QheNP6>od3T.jdpY%,s`F%?h#rIaKhkXlAdYeaF9c+QL`;SWC8/)b.n'iI5n]:F?2FrXMgOC`-E4GajdI<mU)o`hLY7_.W".\@I9Q%qF0pC<T_N,pr[If\0RDs%%qG_(:[%a[Dgh:Q;\'Z9[[RReOF^aa))s=[aP_*WAWj6O([LO<W-hajJ<-Q5)K!Ei70]q_95fdCO6,P+I&E.Za]9^nb#ThJ;EA3`%9\oI<JDI9VYPAHM]<9C\60Htc4`P=.W\+nPp?GFboG:sI\Bn9?>dac;e1Wg@9la`!Q-#qhjMl@*WQkAc/psp[\`8q)I1/)tOu;V?%T[?i.FE3F5=02*]#3d7_FK$kA?Ri;fjWh<Q#:lSn=OB$9'<P+#'n?F7]*42^4N<MWYe+Ir2+lh1A!d=)Rq%CV==8[B09gfe!2Zr@%]!PGUW2iNFi@+?*\:WS5:S`\18!c]"ZO-<IaK"u0Ne*Q#`,gaiZ.0b?T-`am/826S?\7;p>HBQFer7R*rUe<M_"T"H6:[.r(_P[5%jAt>?W-HdnB;.WK!mXb[%U[eJ:8m.]\h_?317\X7MkMhdVLa1-;Iu\[XE5=AH8R@V_?:s:aWLYGY5JRSF#'g*'nDc_0bhSuRt^C%%i`);-fK/NB0aWf'q^_5Nh[]EJOm%$AH;>^#Tk`EQ<>GJg[-.j=1T]A9K#Vo"*6\Rd.%1B@-im;@3JDmo84iS97Zcbm&==UA0Sg0[%^as4?]o>C1K8l&P2ZP*;5[&VVK#$oP+=PSfCmF'A!6pBVfo/<Fm&J-@Td`MdN@:Z8r[=u`IjA,/FcKq<YS*VI%>f'5!D*i2UE$Cl%*JLJG\&2&]Jm$Sb:cm%K1\,Lk,/05!`%m4o/*&gPl_*qhfL8R'U*RA?nhLQe5XCY'21oh+,dfK9fEG:s;]\.m,:2RYL8>cA1:Z(8%K!os(VVF??AVO`@=nn[i689]&9VW$?i1Y`..#Lqk?+NY#V.^l+C)XG]RMH#4=<iRKp3;1DlJti2'dM^'>m=0F?p'gSb.@g*gi5I%%BUGJqK"8*ooG#\PO/QjaO9?7FL.-o/N\R8+=!EsGDt[#GKpVIkA7T\ReJB@T1./kWi.0fZX8j_9,"4q:8YcS>JL.(UW0HA0Ouk"j%C*`,@%n[:Bct"&7JKe\&6:pkPk('\?8Q$p?$kWrIJ;.FqMCb/(,oKs5AG,)>L$",c)'j+*m'*e3@AUW#O!@ah!jE8j*@)#0$07eQ%</#rOU)G:()nrfoPqXJEhg,='$4neP6&mhrPD00oCJ%s0Tp*%q`rJ^N'GXa_Bs[mR,*@YMVr_ng#">Q96('!\2%_7IY,q@gVbh1U%?UZBjUbORE^*lSXfn:&<l(i.[5c]]N&u4Bp,3pWr?,-oV@oK/$MGQil5ZL6D0^c$t=%7?U4>!Od+BorO@fuha6sZXOk$h3)o0o$d%L_Z/BW'"@mROjoC95WoLcR=:,G2@$]]LjB<1`OeBCX&Z0g)`j/Cp-.R.]+4..i1ILk;)\-9(Ng`+9F7!9?&nVJ#("dZ`Y>HDaDk9%Ot0mB7ueOi0D%N\L,6gY4)m*hZI05#!JPZ1;=V?hjlhkAFKO/>L,Js^`!*H;ohkL&62m@nJ+N6g%/u`[s(:fYXSb#4s(2spK`@@U%+eO;bVW>K\R3;<D\O#l^=?m2-jX>I;pUs'_TWOc$-sM)#P>!m61F9`0gYQ*g@mES/E`p*TAR)I-.j2[);D-]TIrUJ/b!e""#Eu-!%l/fFH5cfKc)]k_tH$KU7)>Lt_/5/1dG?Sch9(&)Ml5JPn2SNl1UUTZG`9C)N?HrQ5^_``=Qa',3]1h,O2EMO7PtNAs+*P4XpLhoW%nCS*_ZB/6AQfL*"[JL>N9O<Q&p7QgC<.#pU:)&l>>K#XZM=OU?X/*D.c-r%3Y+1CbMOg1lITk*>ntAAM$d4GDE%n\V_'DX1]"]jr%mUUClU]\W4F3pdGiJ\2u[_McE9k=ug:sqYeJ8e1/9;bT6WqT9s]gouT92:SWS8d!X'RX&X'>^k5Wr&m]nT(n!b?QSu^RVB-a#V22%K:pLYq;TM)7kk3HQ-e[p'ltjb(L8Zo/XI"tY6HR1Y2+:.HfKNTK46kV^YEZ\%GtYE&>Hg$@l_Dd7X)V,0?GpCm@%%$F'gCog2PIb%$#kB@"m3<Y8t`+t]m@IcNulsBhU%dRj+s_+fgr!k2k67V"`g5(:L:fDlHj8U9OBU'jB?9)O9-(c-XEdSEs[)@AG.?kj[)'IJ9q[t%h>IF'[GN6?P,27^]b5a;FGRQ)UHTit+.Plg#$<7hr]u]hN>7VqADpeA23khhj9d84V:]N4SLR5)6f+Yo@$R5eLjI3h=#?4K0?;Y-%Y-D6G/A4j9W/J$gG9J&$,a:2A!?#tf7or[6k=UK'=?7a"4YNjJ,+nGb,$*PPOi'6qn/La"?2ejnkF.2A9?Ddmd1C86@3h73Pr#S"%A20E'98h=-s3/%[hlL!R_H17l5*]C<1m?:k;.d(K1CL)7\T5g"?HC5^+k:uQr^"phOt:K![%TmQL*F`a'"T!Vj\d-VBjX@tOQaj-%npoq5.T9*_<"P($BiZ*Kd1n0r<cbN4_?JSY/%A.%3a)WplX'uANKo[0<Ob=]\rTFjRBTPqq(j)pZ6"Jq1mgl814C[Of=sr=dVr(m%-!1gO!OT-B<!ChEV(-:I:68H:O@hc<:o.#@.gagr,#^a#d]%'2<<B1U+W4"$P3bKf*&#@*9"L`N)dB;\Ao/=2DDPF8<'#0;"XHq$%F%NlAe[6;ga0K][T/0H'Vc.lf6T?[1+7sLmaB$\np%:L`1792>Q%40LF7E?NW_j?k2tLYh/>,"+(^t+%[?%6D$k-UQ-TNiL\D4W*%+V0dK7D3[K(34\M+W81E(b7$*W2hEo4DYEi/tNkN+"MaUeF*Hs^,NrE\:@EtWjYC^Lk8^qT!HV@5Fho:0p0\HdmZ]T45j+LO->.V%`[t"JL5<!K:@5eHPso2M/#Gp14YLthkUTNR#,,=^>h\3U+2FF@BcN6Q9Et8Fa^Cb7:&8*Na]2Cr#Ad/P[HO$K)')ptG+GB.1J_X^%E<%NDDaQ>V6>eB?:>2G*,pT",?rPAU$c!`GrFlG'?dEQbOSZ0#$EB3H&Zl$9_OF6[f%,65jBBY[E%.,t$sQOQAd?[B$C-R>-$Ub;%fIZ<eFo\U?m/U0S[0((oeRl_3Q7_nFBiV+U`XTiH$Z!9[gL(.7Q</tjgN^S)/FUp^ZJ#;Q!^e,../H4$#0%oc"_t00ND"BG,=Tta%Cc82k>pW9dPEO$=(7Qn@3*udjYBV3h,q/Uj;p[/LJn1)21"Fu]!'qP-1p<j;EQmCI-+%Jt"-Y'?CU$c+J7X6]DT!106IJ=3+Af?H%RAI43Pc8rP;ADgo_Zlg]H!Wn-)-!;;M"jeOBa2+cKX?73I"PX\ebI$UJQ+TK;qOI7;gDT3\U6M@"e]NbO9ct+2U7L96l@X>aEf><%MaLRo5+P:kF6t240[!$g;-./Ii@,td75aEjlZ]Uup*DC"jBcC6;+33J2$mTs$;TmI'@<8GZ]9mb-QG(*)5kt<Q2c4ta'UXh&4XMh%"Z@Q?WZhF<PC+#\apLb1rZMFqW)Nu>.2pf;%8u^h/C3'<C:o]pR&dh#X7]'RP$/EY-X<\_\3^@,nI"uB!*di2M+U0U"4sW*ZqRf?%.YhmaWnNg@X>3V(:h]]<%<FG:$3[,k>0gsGV.P_l![@#6Q'+pd/L!GS]OqTg/$>aAR@&u)JtNt#BLo1;&?KR6iT'0ScTW1s&@0-s%kNq1?#cYc7X(ZuFAg_L(>tFa2"h;ArB($QZi#8i[nrXYEb@6,k'*rGZ-Ba"cY5<$(<J$?64\9_P%&)%Q8@bk&E9HTb=H)FlnHWkW%#RDcK/_Z%DJ17>C8g;3bIpeepZ$^[X88pJoU\M<5OGKQend1V^P)H4jaJu:UjJ37sq%>e!,uLDIoXP#;3!>V<cs&,D_U50Tg-i!'%ZdE1aOpBPtQ!L_Q3"T1XF&GGj77?B;3*l7$n1HTQ:d(:=\bq)')+8>U!l5(LDC$^m<[P2a'uC5;.]%EfPgIZHFu)6=l'*;!m#3+s%>=h_X*.`D1L<MIk2W.'UD8I4t<npC1J_A6#bhXFE!R+UP`?[if1O"V90]7kSP%GmlPZri'$XMoZ-Jb%_>,C'e'MdYr:ZIsL5aQQ@%k(th"Z3;0'jGstpG,\qU$#WI\q$X\Fb3KusOTqOL%@OIn8Z:?'%-G'D(jrsO_mQr'5DabT#MT>0=Y0N8_8/Eg%4.^9K+FC,dDgmk%Y*n^TcIcsf&D]>2%J1D31E.A#g"N,jD4@FPR#:]s%G^3!0N[/ZGIkP%K^%l[/iJ^](!:M[&uJ,$2p!cH"AoSu%B[)O%=Oej^6ZL9%[X>?`3)$a3\GJ=^[07F]W"`>U(m"B51!.OFWk0W"o(ea*.o8YJEr[:(MRYbCq>O:Ulr&A%pU9lR\S0AT3*FsKmG[?ROV#tq'0)J!%R]1:^eqg#"e&E;NEK-S3?Wcqr"b"kN8@<CW97:*8OeodPU+at6C3,^dT)QZ3N>jT&Eb8mi**QR8i</>YoPDQO@&"Fki9*ZP43f[;%iad/3YH,-H#.F\*/d@ZoQZM(hj&ThI0j#Ca$>1=UPMZ-eVI;BK.+buJZ_#`m36mP2JfDp+B:%LM2mroc[@M%!$T=Q9"I%r5T';sF%NQuc2[L'^F>/P.'%?-]#g1,LReSqB1[60ZZUtr^YhEpO;fcQc$gk,/WpN6s_co#^DF*ah3T8bd@>.[9cg\K'&GDbS<Mef]7&0E0%%2`jR,`HZ'p3"=N[2^S8;RRhOrK'b9H^>qhoa4lmgV"q8(m_N/Xh%q'tWh0U,M/3c_bMWG'hno\?bH5(!M1lFS[=/E>gQQc4%eXcm%ol*G;\/B0H$i/9cfPK]_P%[T<U'/#+58%^lFYuX'>NZA*$O7b)UK.psNLO%P)e@=iet,F!oW;mU4H.+/D;d:\0ku^e"JRtN[.a-F%gSds;HFMDL9QsQNip<XU1m/3^TY8_Q.q&HDJK]_t-'\JYdld__OpigMCBL7F`9L1)fZS7*gtB2e.Wi*V[+7FR'op8%)?S^Zl1(p-%cq9@KC*R'UO#=jGr)4:=7c2NFc..G-M>?Z-RGP6d+tU,_0jWX8)\^Z6_LOaVF1KZOA2o/8$(?i2\+\<qcJT:d/_@MM.qIsfJ=.F8%oG%]PVjWR-R9h^:!h1ZY@.7@R=p$d)fuQd6a0g;]q1Jtg2HAf*D!`j%,,$h2+GSMYn>i0PiHBOWeQcJE<2n/-2,l&,ZI1Fi)SXAs%5?k(?AQ-C)D>@(Y,G3*l@PZqWbVobc\;C%N.accZ8eqbN6uoB@;]u:M6X`HkhnLp7,&-B6Sr#^,*VP0kcgiflqfkA[afWdkIrm\)%&db]MJP#G%C*F9aAEK!D1`:rF5aq#1;;:5*dI-hG^f5`kJVG(%THZB7lJH\2!NPZBBOPR`X^`\Z8Z`RW%_f?9qX\j1U=e2AS2,&Z%F0M$9$`8e1%U)No_ALg.5<,>0W\`>UQiWX<d1"!0UpYP_IRlr>^'O'B%A(/+/cDN27)hH:Agl0#lLmVb")CU5S:>9!\)'&,2&M7)%L%3h7G?6:,?<#R>&%CXq;3=>N@ht#K=U`>0[i/f\83tZYCmZ.XR\IS[FuT4EdeOY1gj!W8R(ju&T@diIq1n,[ZScW[$(%9foM+k8%UVZ0F'WH-k/WHG]J((^K#>@N0/'YI@W#NP7As5KVfN#gfC%UBU9qA30e8>:^Zp,@ERu2Cl/rn6X`L^p[mHNbHo[H+Yes?iC;WA)9%[9<hk'cJ,7n4("+CbpAEqm,(A`SaZ>II9@HM"&6c>#=mU(OB"39],JW4$PVW1-r&qTD$`n[1-QE\R@Khp'7@@n66D7EO)')Y'0H#%D4Y.=;V"e,f%7a"W!rYCJ4;8L.\]/<aXB"VT6@!`$A'BO$fIo[?/>k5H:&@qb'ZA]6+VS@L>]9YUnA&[TMoSe(^n9[Dk^#N^.50M%M*N1@@u)Bu"6^,+a,`fCh8C=g6p^67_6QhcR#2&)@:TrqfaK>+;rSX1EDk+V<2UBn7G[0-=c%\QEL;[;p!.Q2"d=b7$C3;=?dupX%YoR#g"(<%$)Rj,tE#m"N[;FD&`$[]0\l#Z\5>b>dk'iSM)Rk/HHd"n'G"==/kaU!NN)]`hbF#8:3"QH'**%<]MMb8CEF18beW"p5%1e2.J\(YI#4DMl8K;R50'c(s3\uG1p6f1;8Ssl<U(HjVuQ,Z8C4,q2B7^YaO=p,6oiAXW!:5-P>`HYc6`I3Rc5,)Y[Z<BVJXh5dB%K@,I%<8-ap1OuE>MJ@$)%+0T5NcccV&<.?n5W4[tDj^Jq:O-j3[g!99=^(BCU-It9=BcjO@HDIbi%Y(-e&0j0+%^A$\GP+\.tB"K%LXX0gj`,KGA>M-5daq'Le[C41B*VsKk&&Iu':Pl83(q]:!D/"Z"!##T(Yl$YRZSe]YRCcH-4p#203HMsps/\K`(t;0%&%rs^-f#9%Jl(JCE^KsOp9q(XU#Fi[7Z/RsP4VO\-VsUe97rXOCUDomJ!uDiM=/#=WL.@"-XR_,i54!0Il%uZK/&<!?"J,:!AdOhL$<ra#r_S(%pur)L^Gn%^)Ci+a0l+SN%P/(cLM+UmS1IN\g:c0H*).3EcnENFJD4E&.<>`drS55<joD.aH0tYOj8%.sal1V#G]C#P27<M%k3uC_%a4iFN[pVE<ZCD9P\@%MD<C1-Gn-jZp58jj!SQQ8rc>r<CCDlk-Li6Kg^lt?G4?ntL6/oOlHmFENPNaC$.3Q`1A$;bt"kTL0"+!<"%hWA.'@%?XF!s5mXVVjr0>d-BAe(l1,Q(Cd_\]?*/HXB13#Qm/c*J:Tt`.!6$Y(t,O.$f-M3&Q@k9e%'.Yaha$0K,!s1CH)>f15iZ%6H.41E"I+>d2G$OdNaMCkP-ng*=l'Oe^'0kRiS\L?8P>RY`+9IZtIBGCStD6JXqgSW9-JbCET(F66@=Z_mS:M\7qd@Ht7N%V*5O;%QHrBF0dB5ahpp<)^*)q8kYPZ7X:Or7/osXRi0WW^rp`pNdudIJ6@PR7H`iLh2p8737!*Z2YKi8i3<s;J'9#S'A$NJ;[ASLc7@(#$%*uI<$E+!a_'nl9jCT>['^eDpl@$BlY<?EWG!2:^#8JBI-S:]Of=0ioT`b0mMY;,'.l',4ko=jbGhW`[YN*qP3lPuLs"4P;M>(,/#%rlP/X=YMJa"fh$5XbassNBjtN9I6CRXe?!8NqI9(b@m!VEF;`HQK8rs@]C8OacicRSYqs)RNrciVX$:pb%#)_;l=,H!'s,DLb/8I%J=6MB@\&JbN#K0mNo\cm,_f8@Ve#2F2Wdh_Bl->e?@N9=o/DD)RH.mYmF;aL[<EW^Ehmt3h&-O(o2KMOgepdVM[j@pRV&<5m0uHb%2@r*h\Fa`-jcFC)iU,qjF`p]';,^_*,TDtGK0]4Eq5mmOe3;X?-hFYnftNSR4p1U`P_eW9F\<KlVON9WSdK!tH[lp]"WjS/^hB.-%#HXLFL0Ill23#XSjUR.\f204.oQAAoV)m34<nI40Ag?$,Yf4V'GB(%1NBDAcgDi/&g=H%:$'Oe.H$UnL`c&RIPg#1X;)lDB8""[*%7YQSp7d<tFr,at\"WUfd6[4=+/qqlR6>JIHE*I4Ult?4n$fUk_]%IWI8X[\CpEhSm@NAfl5;hi#MY9=n'YTdMGBs#l?Eri=RqQ0o%81b3b@)Q\]^pn'p)siTrgO[:2><m_EGWN.Y\^>:_9(d"3^`]i4p20KBPNi60<b9%MRU>fO"4M*b)&QfoO%hKJGpAoNfPGe#Y!rXF%[0age6BY,i"6g6!#39?:T'PVXSa5UcMe$DN,WIb9!0S/<F"N\C#c&]-=P]t[RJ2FAEP<k79QHX%WDJN^UkO,GT\?hPI3#*CBf'39%$WA3;BRQU:5.^fZ-8a_SR-NG+P`>NK0\&<am-BJ;@pCZGgE/NmSF0CO6Vd2*Hrhf3&/pL'N!5RdW`1_BbOr9YGnB!JcVSOZ**A/a%U``bX6luuI@BO[]_7pahY?tc6Nk@"N_P'qeg(]G@?t3uo*#,u<Y3#r_$C't]n7qiJ?6=H&b(Qb6L<7M/IH)U:?gD0Gq.qL?EfcRa%ln=&o""g)_GK36)^#5NOC95ql9CJP%CfJPT8R`:N7TfY2d6^)&l6AUp&dT*H#%rK-$ai^69$RuH.rP4$;gr&C=;RA]JILaQJ?T0-%NZ\P(9$Q4/gQW>BJQ^XTFRNgK=&48Lpr[]EBJaEI);&aT%0`-0]$gc;MbK>0Sk<F_Xqd"9&RsE549_T(iLEs;\@rsTL-mZH$+e=.%ojEY20<.`gO@&?68FtV=aZhmX-8\9*LJK3_M2^)a?*aNqH%;/%h-=%K0/g\X1E3Db;jGl@CiETSjj&V3`1_9d[3aoMULsp>&UuiG%LXMk#GlaZNQh!14"ksh\_o#dI3)lZm-bYWr\`S`jpa>@f!M/`\b<OP&F[u?m!R@6K6\DYN]>FQCa-m$IQ6r7VonA,*l[loUl4p7u%XZSKXkp&eN@*GsXOkQ*Z&kl_0_`AtF1l"6se?E$$1eY<&RdoI%TAl4![AuL#Ie?EE6>+4mR.6(RMl5hbTs9a%Lc`o_j"cg'n"U!V%N2he6(^.RP!>\kVoCJ1=5sP,^kj.g9RSC%PTZ2GJ/7&HE@Cf@Wl8S[#-ZD-5.BY9h6UD]Z724M=d0K`kp!-]LR>_?Kk-ZYe-HN'X%"Iq4Xqf<^O/_ZVVSYdU9QY1]SK!-HW(XOW3*%NKQS*XMKGP<`s5[H@l)W4LMZ33Y3Y5s>$BT3YEa^!^oa>^]XV30IQXt:H(Bl;rr%(rWr#<2)%*()o?!@XM?_K&_S\CO<'U61e';cF,cV!ad*\>.:%uX@57hrM"IsOfXQrf#%`,s5[pD%F5e=Y&6CaW>!Ql,,N#)r0FFL%Wdd<:B'?B7h`3k]k+=2sVCESn>6k[M;FTNP!Z=73RZ![REJrB[^h?6i"Q7p',$JnKgi?(3Lq35(GVqG<XTCH333s<ZSJeL:A6Kp0%%U,/Q:%Zh[C)2bM9!`DRBM>1F'g76\AShSZi]t[&#e:19aW;=fca/>&fgoU5T+!F8!1<#$RC6^&N^,?@!E`0*3#su*G-!>RQl%K1%L-2%5>Qu4elULkq/;$9aE2di]<lR7$#17[,n/=0B@&5Qc:nN8YfB+/n=TKR!SftN(Gc4jk"rI-J%/M+>"U$7DWK'p#X6%EjAL[dn%N)g_CkI%&6SIB2U5Labu#</ou!1^s.-a_HlYNJNqV=)Dsg=NLFP$2a-#GY.4iB*?0-fKAJX)VD.jt$rC![d&BR[S7@3A]IY(]'%9%\8;3KFG$jO^1-\M?"eIrBe,G7>-:d/%)r-W(uV.?o"]W([W<IiUQ&#a_n%%Z>R_*0<_?$A87,;9b!2$6D/$s#bc7N;R(S_L2U>1$%PdA`>G)+XOXq!FC`>$q1eIn1d-5)ZXP@BOd'.-p:a^<5tNNpLS)L$BI?Pc$j$6Z`BIPR&OlH_C?He$=c*]5Fu1)<E-af59mq:TRt%D7gQZ;h*MP>q0d.*>hMl+ejbpYOQVf(+Du[ZS38J%P6`Y]Y:u(>.\t_)?>g_]=M<JQUYg\V+D#)Udh9\PO(&dA2))G^oL4iQhA[;%^atkF;L'X-p771pIV387kt/tV1GcffjGBV'kW5!\,Z#Yj\cYZ4+Qa3BUtXj:Q8BTN$Z1O#`Q".YK33,"*ZRa'_Eb=-EW>7l5Radu%c`)X1hAV0+)QsOhkE64DYo++B["ltZ:5ZS]G^4Jm2"l=N*amn^h!*4?ZWQXmU6.l3gF=nI,F:H4iAfH5#"G&N;g`b-]X9ND4Ur[T%O[rEc445f)p<F!1+EXNpRaG1NNnYJ4ol`!COre$'\k$=<P]g6A4'+L%]0f5j\U'7.WJV'h&2=,%;GXUH!'MCYkY$.fKB_<Q5NcDF%k]T<bhC0TBa6),sRf;VnhAk=^ckMM,lVc(SZf0H60WVA,lS-Wm+A`qHTK0;:LJt.E<:$(lDf%=&fQR>1EOO,amB%CeSFJ.-:`1$9%6a^]_L,c1"Q0$<-d=DV,A+oOEkY![_15\_;qOsiZ6.lgS%YKRLJ7-d*kpb4]^Z9(?&M(#kL.>E9TQRAR-ufCgIa8"-luZaO5s-/o%BFrd.$@oD_##:GLnb*hcj(j"+Xc*tL`98,a_ejE_<sW)AJ9LJQU2E2g(2?`14c`sF0G]O:)b8l4h])hVmX*KmTPcEbZ5qG2;e@Mk%R4aeQnQ]3\1b.t:*6`<3i73h`%@PAtBu:8.Hn6ci=fXlCB43Kb/u-\,\UmIqHiG.W'8!jtr*,R?`Nk>&_.J0Qllq*&Mle?3D>,^,%OHEYM1m;18:*oA8fjQL##N5=@M(3.*FMLcH8<"&n(c5g5,?G)?.\ngEn.95TclbGJ)c0;Zg(C"Eo9<!::hE36A70W_._J+_hf:U\%O7)dEF6Dm[d%ofC.\!AC#PGs8'#enAWkg2\<E6EaQ2T57[UOteTu#]T;JmX44fmlF!eKV\2'm1uYB%iP<ZC:O&eA[Di351X@$Io6%bqUW%aRGH6n-qMDKZda)(mEHQ9&;jOIRmDW4-IeLiZ!SV-E3$7EJq+i3e66=V=7WeWl@Jj(OTiG?a)UZXlp-RdM2eY!r2Y5Kh[P(%YZ1Z_r39.?C87;%c,NXq8N5l`P_"j.YEpDLff3,@KuE)YV$Y3C><,0s3aGE';4c4.aK[Xl=HKF;2jRFH"N4,H\*WIoB'dNXl'0u5%S[Lo'&l_XiX%&hp3X)kqiD!)P>?E)EAD5c_8>4l[fu](u]o^75_E3LfkQGC@I+(nAl%#%$*T;Dhg!U_Of`A+*QE<5Im-6n@Ua)L-%3]6Dq_38bRZ)q.$l4tbkou@HNeQ=7=HQZJ17oC6di<dD2V.aba<[\/WF0n;AdEuMqp;3hR[Dof4,<0FfAVF^/5a=DXABmf13LGd.%BfE9IJH/g0X]$eeZ'%/fOcqOX3)sH$domO].QG/\MQrEM8@!BR[OhSX@7k?3dFgIZod/NVSfXkJg'=;UA%\?\e1Ag?LVbjT!U+J'%\)o/W,[Ji4Hl!n7Rbsk*^5Z[S<K*K$4c3fVg1_)YM(;V[`TjO#^&lOA!cAc3$%D1ZHQZC5jZs19!X"q1<Z[sSc)nl"&uKc,g0=WG%;DeiPR&cI(9uN6u'Y:+hk"<Z8JCgb$)[pfp$VdlGhgjbsAjbc-\_7J3Q3H7Qh[bfQ;phM#Y&\\!^73C13:MeA;L.)\:f*/W2lOsq%jC]2@8bEO.qH!p;_8EGjJ1&t0B/O@![3_\?doq+NcmI4'HDZHg1f!b<5C:>"L9p.I3ZucN2pZ'td8:@;hU#4@=@i])Kq;DT5<XF<%2/m/<h!]1)79[Sb_7J=n!WW'O+E;qt%7[4@RG#=J;HFI[*m,#rB?#P*]c/8dXUR1L10ro\<,:spC-+^<2[Jmq6Qrtj^KBeD?(O(t%kmB4Zn^I3_BX(C,MQtmdH-]<(C]@F2XX?F0C>?5Rakl8cYM^^AgG[>PeTq==%+3opk>AIB1I\0X!e(N=/cJ2R=a*_uMR?)O+f_N>%/n=s]EVnIJ69j")5HkP'qU9t3F!3,HS]0j1@TjTqg6kNk=jsJ!n"-BQ`]YA>NQc,uhEA\l'UF>&I6K\APi9.Ef/>BQW]5UW,,@nM%@PV_QFLeW_Z8$'E[/19DeWM9g8-'KZG+"gA6YK2U%b.CXgZQhDG1A2Zl_ipcb`Rp02t_7q(PZ\[ApnO`N&+`T8D/ugL0eK1*%<[&%914T%&Hbp]"ei&V,e+&-UA:#k;BdkR'='mGe[rjKrI-8mB8HQ`q9o>%=^ULk]mWV-X1h`c;-c:'j!:F19hg?sV)q?7"@<FuE]&f;%67gQ`c4uYDTi2M:F60@s(7=NP?n4Lbj=3Q3\LV-GPYI4iQ&tELd4.[sL#keuZj"lKSBEg1ZmjFtIu-'+Pq3=V,pp)TQSV.c<Tbeh%nVm].UkS@WdbX9S?!&jLg=k(;&HQ'LhH-koI]GTWRj2M,(5U%Nf9g8JlQR4oc(#-#X%7$]>#EG=L+JHFNf5=^XcOldrpfi1F7u2o%+_og#c1^BnJ<nM#qH@_#?]c3gkOf[RZ<Nf^',YG.EAO=V3o<:m#=TOTD*^_?Tk("'".NLW'Bj#OO:osb>1+%_0G7\u[6hG5,^D40%3iSk(+rtQi+85MN"]M4\,;a=q1tp7a1Fc;4R&iTc^^sFsPKak6bGE<orrR+rFIFVS/<SMnVimt32_=g:0M"kj2t`O_NJ^HZT%[,V%VFY@4du>hT0J7[Y1O`,4]bSs01#LQqCl\/;@.J,N]Z"B8'TC5`C>F\W?T1'p9g][e(OM##ANs[bFL8G.hZA`u6<`D-p@ShWl`ii]%2n.SjDN;*)[^K"gN,:nWXTkRYm\2C-osN?W?#bD'A'8PNb%,[!6FnVS(m&X;n<j>E$G=&b5hFKIZ.=q?.1D?ITa_A6?(G_SO/>An%!7JTUZ)?PZGsXi$l>8ER<&`4/JsD'o.Wl0!88I#-5`?B8nEC3Hl`2jrmb4P6LS"Z>,A!W!lu)RC@&1KsYh+E4DJEhlRthn@h0V1$%eV-quCb6AQ`?A-RU8QK4in<!]<sq8S<,6#_Tb)+,IHjq3,.a_L`5+=;kP-JH+7r`#D=-T5V/;fa2&6nL?hp2tG9tu(Viqk#5dYH;%6%1k3oI<7N@VS>[=t.S@`0n,Xm?-,p]$40N_.WI@iYXCRhE5RZHZE:(D4YWu"4g8G-?>k2a"!Ys8o9gZeGA>Xc/WMe97FHc<&8!0%4]kaW<cW#R@B@;Vp'eFoZ$AC7&Me\_F)7FRBXP"V[-8I9I_+lSAo4-B0.0b[<BLNS]r/pI.5U@N=[2<IXduoZ(`<l&`k(lC*]ds4%FEFRYdtV?QNVV@eAaS3kefZJ->q$V_2N79Eb"l)uQEQSu65c%upj(^M"+t2t6FK*'NTb(P^:>a)m*eL+1-Mn!JFr6Q:p2W5)!IOu%D3D_#q[gE!Ucpdq)<u(0S.`KBNFhU]IgjOTRt?dU`CN=d^O[`sRhU81b.%6@<;1,`(rX!>Yii\53m1U'URJd7]Fr939LmR`SpIsS%c!ulUKeo8[e_mls#h^OYopdU$2Zgs6Xih,%Yid%&+Wcio8l6q&ku](ilJXj<aTC_^U)DAt2stHe,Ysp&'dJDg*D<2IT!L$om8%M[%G1AJqUe3bh9K$Q%4N:8;Ul!+2H5.ldrY;69%Oo!jU]7\%.@_\U$sqBU<KFL>'(]6M7FAjR;D90qdJk(A*n0kKR9Qp^g>B\K,DFO[%!@aH`8YQ>tMO5.,$#??RWSqQ,UbJOi=Vu[t!BtF#^3QPoWMR5_&KDf:bhul9FHFG/Q4CZ^(/_<4=pp_.@5M+1S`2P!ZWB"=dj+S4%#-"J+@Lt;L`k5;%p9]P.1r"Y!QCp!9#<%EV(l)Z9W\smTZ9Vc#"1dD?9Ek2,JpDu&_JCo#!<).:n7Nui6^1ec"?>t<&88![CWssE%PC:"n*&N#\&F4M?^O#IB`0:rjUNTVU"i,Z8^+Ba;,G5a&"77&LO;n0#o,!*B/R!3HG8Ts[+[j<gRKaH1C,t2#'6[$`g.$+K,f)SO%-7Vp#-*!PQ4&*0"?OPSXM`r/;=Pi?M%i\V'ED4PtoIDg=;WlSBrM(;mLSNDr#CjS+6('7H&T"IG8'l;STRP1"k;8J&6b0q9N.V^a%0RcF\Ci\6'5&8qSbd)#c\2glI@E0/'9\a]"GcB?1)p+9)Wmb&0hAab8i5UrK2=BjOIP'bffY1pIrl)hNKGSu=oVO!P1d.:LI9"ak%Ak4&ZkLp8("tCna9i#fRf8,'b9&>9\>^Fa^NF",:b"][[O0g@Ko2tL"3D;#i"2j85gHmE17]oY9k.GiKmojYMpk\!<Cfl+_\In(f%"X.`.7Dl3RKlhgS;&XirE=X^W]Y!SC_D7J09"LaO3XaCBIna#T'<t$Xbuq?K`pK!FG$[5fObBTYUg<CJ:?e-=Eh3W^MaKRBbc#Zh%])Ga+F`O>qI#mV`n$LTG;J!a:.P\\#QL1[JN]-N&Z@ZbP_F,qaFXqUbLD0WTd-(3TUa&cG"gs?_&]rJcp'SB3l"1=<+0-?S/-WJ1%,M1XT)26`P$'#Z66\sd-rb>;tA(-Y*-X-Xb,6kW1emFrdN10:m'MA(:ahU>VNN[AM!V+@p4c,d,+VqbfY%1Rkf'uq-PcV28$!;Y1%*[a@DKlf(AUD&O1)TPX1/p&=?/YmGMI\Ois3#Y(EAkdX>KqW*_NVU"/=_^n3XL6P[q[OQ$Bo:P9Nfe\10kr@%7dl(AP$=4TX\H,!%\r#bL!0LrPKm+OX;h<VT`bo0GAj)D5f7Qt>XlJp)8h8KuoKI`e>$:--W$Z!h'4nNlCW`32gO>Skj+'4NgZ"52Dr?=aZ'EcJ-OZf&%+m@*A'g8^>6HXJKGc$/D\03;$<7_F"L=fC"L_<omj%0t[29lV?FesQ;6#!(-!L11PcCDPtA<W.gWQ>f'!!Q^8C*P$>WOQ9g%K`],%`n<YaWO3AVR$eI8"^*<m=o*AAOsFgW7arIs!"^Th*R4>L(kAHGVf@(TI;>_/^!fn)c7QIu;PekG.W/55A>@XX7.PtD8Pb?uG:QY2%>1;'(]k+.i:OF_Uj?WQ7gIs-_`_SZhK$7]tN*0<fYN@>cQt9*6Ei>q:322.F&G'JN]Ll[B[Zf=d%-^dI,"!Pe'',RG?I7nj%Sq`E%Us\G&@L0sA%Pf:>;R2]6IJe!L>)fe.(0tE4]1Hq6ltC"Pka&]MpAo;2ek[_P*NF+KNL"jF`%B\`)Ju,@dE'rO>27qFh?U8rXhur5%S*Mlm5]ef.4a1`523k$=@aX9UoYGWrjVgsE=<C.:6(mST1)Y`$e#i;TjB[4:Fb=pD.d:s<#Wp%q*(WJW'1W>>f!0RMaUd]c?ko_Q%6&;#;lrB&"?IBROLK2[0r=5fi$tRE:oQFUB3lYt.hN#%%a/UkKF"lC(=B6)rl+*RMA^.dG.$fQ[<Ho>PKQajkl1XeqXQ.Y1[i/k+%432[P_([V;Q4J=(S@Ps"GHe=^#7SQH<jT"tA!:>2h5+E2Q.\a985\1igZRSTW,:;N.FuqoNd`1_K-_2`MP>T@e@3nMlrGUc<bgF?%g8X^lg\6'C$EnH'E*J=de)G>7f40Uq@92?'dV!JTS>OY@;hS:Pdd2*\o.JZtMp7uW`>Y@;&-;NG3b"pDr%tfpZ;s<T;/+ECfq);&%3%i1p?*E5k/%/F@m"Ub8EYuX1`hLJpM$&ZJl<dq/A$rqVBW"jg[N"$-UZTptg$:h<BD3/NmMt)39S'.qMmZX9No$MpQ<qS]<?/>I%5^PBi&"-^d9Xf+WSoMqh<TQnqX''=fG'^>-@/K-Xl873E)Qt'I_;R5YN+PPf`a-R-K#XmY9:Zu(fd;?kFuj?e.!'WQd<+)pf3Y#J%o5qsK->,fa-tC`<$12l;BK&37#^0kJ31j#OAk,][2Hu6BL#fhB:irsT\SBd38m_jJVsdK1&+!EqmUpo5?q=ns*LO5feEqmR)KWWb%_D\M%Rp)rGk?rKXBJX8jrV!oA(s?3_[%u+,")eIDZ1WfG]bkS+=aY/=MD>i8mHiUI)@+JMT=fSjkcINrc-@5TTlsFX]A@M'@$=R@%DOkOkll<J#s"$jn%9O$qQBeI:>-GXD!SUQNLsg:=$_#eJG@LB=BK'U@dlrOnZ.I]a@np"YDK;^Knk-`\T%gB=6<3NCV68A):fY!R%l,Ch@8Lp#5O,L,M=tNc9VUa\7g_07EQB!EXZVEqMft!uPn#mMOdXYrp<F&Sdp2IJmB[!^Xb'*?7a2Mfd"u\p\8,">tZ<D@7:KBiA%b$BhG8@G")^9q,X[g4_HIKJh+?RHFhP0?u@&5`o`_JZQWU_Gd`Nq2<g$f-(gIViMQ&'[VA-i;UjJS;QtgqBGRTsHsL#OU/MS>!8R%6&4o.g&2dL1Sj:B3[NOeb;486-g9V)WOk;\Vt_(W'6IuDA9V\Mlqc!-VZh9gL<fc$S],<ZD4dM;[66gRSeg,;)*7_`)UG\12sTc'%%%[>'3m@uC?(IZF#r%"?l]jOm6YCn#%`S@S)j7=!!d3\,:O;\\i2ocVc$B1<joNb!6M_>%T@VW[%(u9'^nTpC(M-sG_m9Ea9WoJ/%WapEC7W6'%Tpr-aZ;8RkT5o6JDmI]*,Zj$q0\BoZH[O7#V4#)O.[!gon"4$0TDnbHgd>`Q>I6UAWZfL`jC;]&lK19#,WWtOg$m,B%OZD0E8e)"_]JsSM6q4e0\B4iPC273W[t6"?m$tP.f4ea*CNIMFQg$-1.UCg.<fi30ORTJYlQ.$>e>_:71VN:^gGY@7XNnN)[H277%IV0#uO=eIn(60^c<fL+Ijjps/)q/`AC8hUc@ZbDHEecP5@Q*W0etcB<,KD"_3b2uH`,q9u1?c""-?!g?&"$q7QE<lFBQpK/,n??c%r;EKhYRDnf\RG_g2/BndkO]IUEfR>,f]E#NT?.RQrI!Mu3Nt!r?_H>'<0Ae6GnU)P]oG-4\\4bl@_L#-G]iMGSW2'10MV8V4$Hn_%b[<IO5P&rDe]u*L6Q"0%#Wf`8X2aLdaP]5Nc5WgiX+#C8ZTU+N9tEAJo6\J3gT(mcF3Ka@/bNot[Q79:g#X\l,KsCQ#d?rbAZ*[g%Q+*i@?I$7kfKb^k7%g_'RjHIc.bYo1h6PULqkXe_Wp#!)ae!c+2IL,<N*5I]9iSeE7@bQ7U*ncbOm5HuWfBp%s'ONImo@a[Ip^%&%#>j+4cqA[P70Q!,UZ-l_)_1EWO"AF/o?KS8CO^-A;X)ZdVpFAHB,p]p?(FqE8QDT:FjZR(mb9kSdfNJ'#0m*=AsBUL=rVJ!jiGQR%5(A3cdp0+Ebu^L$N2r+[gt*c$:-8K(3%-<.2`#4qq;IG'STa7;Po2s'\QYI7[<6n,qUij3R/om]/Ij^B++#uCH`''PDJ?8R8Krbb%-(jU4[W(]"7%htLol+#o9N*\cH=T.MZDCh"2egWL0(!*WN>g(e;]D96:5^'O:VK=G^/=f3/`5CSBM^Nm4-*'_A*mH2`6M1VC+#'3%oZ6[F^r+BaSW$&C\e`SN*C4f<W3&RE/W8=>ZiRFlK0:uNF<'WMda/2EA3-j`o>^IEFCpUhameOT2;G0+c7)D,]2\C0h90g[lCGVV%qH+Y_j2#,7)76s?,79'*@31Kse1hL6IU$pX<;=I;3d%*2o52*oP$F?.ehUpB3IOT>?&XtKf-V3A1H;RUm!HX!5K4Q8dGsm>A""3L%RpA,&$&[N[7\%/n>F%VKjss2)?]MJ?GrLB/N4;IB_j12uX^gXNb(gpTs4E"qiGe4G48B*D_mPJ#*A8M[`V%?3\?U?[1&j_c(*#@W%Y3oh2ZMAI0qc;!uRrgi!aTjo5L=_q+kMHmpp9'87_tdX)EiA)5q/H;1^:!cGGK7C^!0`J&*`87WeikF$Y=2,qVo6I+R)lsA0p)S$%rp-nqe*Cuc>&"o]3KR#'[2/.*GaZi2=..RI`[^MRB6#/d[WdjW##@T[Y,cc&%8J:$8a,'Y%_>aA1^%XYBisWefk_8Ncmg9?7\."I%::HjMYD3HZVFfF)@l;7_FPN`b31`$gHh_X31b;KAF;lp])1ELt=g(M3ltK!il>5_YGMNh$<nZI1MLGL36cA8N>mH+Hqd/MI\e;MX%"TXb!H35ddBQa1Di5;1DA>Ft3l=2l0c:ADJ[7VW[Q]W1m;e):L_!Ro>Ump<u;Vt.r,PB;L1/d"'-mSE0KJHH_[(cfkO@sAq1Xgg_%Zkor#3+AjD%85;<l`U<"f=Z[BS;%KPE"ia=>dho`WGoe\C1^3p'ok9IUW&d)A#7&MoNR?D$<M"E:,E]gDVq(&.\+.7]3UHj.&h0V%[W/jIV/(`'Q@f)Ti@B*4c0fg8_Y]l<fn,tgd0a?B0nGo+1E\.YZe$*K1)rc=g$FaaT'RQ@K5RaE[$j;t0`S@cb7bN9C"oSP&lH>&%(_=9K^K<@r;OmCsE5h>8djq?B&#P\#J(g>t\JKaa??oLd9nNJQM*LBKd;\mDme"q9pJGR8HMRPu:&G6SC)/bpJBjILXFKg3cH\)[%)-JrFcVRNkU:!<WW-Tn#f4LM8h7>+7?G)=Oh28p2YPKYYfVR3'n,5G!?^L-QXsr&khkggoJ"FCH:3laOYhANn_-u.i^GY+^D7gQ)%[CKDJ*oE#'[j[P@^t/P@33bUu-bJctIMCF]].(WMfIhcR2'5Prhfs,RIB#q`)j"KPTrRshPMMNh^TRM`<eL?JQV5tJbcojic..:8%r*jSm](VoJG<`7Co#C=#d!gH?faYm:k.>OZV'ddcqfHt$3q,/2_YiTGf%Xg>T1j]I\^Ob1-67NE=&MGGQY-5m[%1Z5[]ets,ddog%oekBZ';G6qbBKtFRR_uGfQN8/8Y0(l.f)$$:01/RatZulb=_9FWFFV7DJ:/mP$F8rWABB'E\4tDpBS`8\)c#_`@?M@5-AgW,'%g4%\A_X`Ec;W$pAJ25F:WcbrXGqdd(WAZ,>1[(.X;a5f8j_),iK-2Xt3]nmb0FcDLeX/6J6H4r%Jf*VQ7k9o4-]+O\Jp-[Ed!lZg%<*%Edt(EH0$a5F<bE^NdZj\2n)I;S$%W#fU']ldg`l3A2;h[D0G"1Zft_YSDDua[2pcdY0,)-ENkYNVQ7k9X,?9^0:T+:1%]K"-B_))%PtP2(YJODpFB(u7>@AkD9iojjg0Z1q:"Q$e9e`'>8i\1^bXAf%WlAsrKrJLel)I8`J&48qS$%WJ6[n-QflT(kRrC:A`&KYO0l6")%,dQ[7N_q:oJKH\;Xt#d@U.4F8flU6)FObSYNK[*"cY^t()j"De68i*aJbo0&;7#LLNZ>-dr5k/FVQ3U/C?PT;flS8koYG72>A-L.%39QZ+EPpb&flYcl*S@<$KPBWhJC2DqY?g#cI-:u(4"EfqUcY,b+blP=@JfY#""1_1/h4OpZmJSU?JQ_gb[g"h<TR]?S;KY.k/QNs%B4R`?d;g6H+9Fc2e9c&cW7FU-J!8%*j]YIC5u$o,JAJ^b2=RU<A8],^'-#J#+,4)WI=(2OAUj@p9WB!FJ(2Io-d1;)*"=c)R6*"B%FXm3^iStMc=-u:-m`$l#-gFbC8u*Ed:2gk,gfWcXlnWe`X6#u__bnS3PrsrSL$ndS1MiJk7S.J4rm[ghh5L(b4YGp;O)iP]BVkl:%NGT-ips*2(f-XS+L!oq03<6Qp/e<&@@2ppMTCP)c1%qi986;9[AF7O*"mSR8rKV^Uk0UNXJ/t"afGAWhTLN[e!fb1rL<(b-Y;#)(%^UQbYp#Qj83>`kIV2_WAhX]c)o<(!,C4ai05\tJg:qJ)"mWR^9`rUb9m4ob"b/q>F?A4\e(5HX!FnSa!Q&[3=X6!BE?%_CKWD1qn%Z3uKu8@WGo>l3p/_L5`mkhl3m^7*u^J3[op)P1i5\!XS(1f;H=DmN;hSXd9;YDoLirKf6K-JhqtnQsl]YDo6)I5Z7<$!3N4d-LBC%Rhrgh(QZrn(gd,T<MsWJgik\!O-)K-kELh.C(0L;9k7p$XX6)=h\,FE]F*\#X/=ItQe&a+1,_NM"3+7B[J'>#-bOL8OVO7?\(T!@%[N9[s`n_Jg?)#Zq&J;.C@ET"%Xm/rJ?/a(?5$$:F)`%#i7].?B;Viht6rfNC`h/"I$?tN0b%kACY1Ya/`$S=>cII9DY&QCD@]dh&%HI:_uN.Hgk9kqsMpPr]C\WPC3Wd@6uf_C<2+9&beVm/!!='?m#%_Ch\k`"oR+t>;Cj0-5MR`7Uj:2;m"`u5&DR!bM=Q-1+&^KhmK%@p0RA_U;KcS]EX@?G4+T?cNAH1%helD8&`;Qao2+E(8J>_2E^]S(-!N5g#M^U\HEhNhqrF.q'u9[kUcrPF0EU7b&/VV(oAo;HY3>%=(-b%f8[9:.j`0=0/THheu!UNY$Wj9Q@!GS,O^\!mSW7Zd*5qBAl8GGO6)ag3fdaN*7p1ZQS!U4X`Ts/Z-,;a3*8lI*'_IYld=7"%H0)-j_)\[FUg_D/'!!MBPaomViO-@WMXP90&(?c?(E_NC.7FcrqHcoM++/Dm^%gl!MEgK+DI7$gHKFZ_'!/hGQ0GF6p=V+P4QB`<%F/S0doAT8reNi]si;=K^W7j:K2pQlqXj3ub2ZNHiMdLU<mM[V$I9Q1>A#2#pNV$Au8(6c_:?.fKF\-hM8g!.Pg"'T$:?k(?i5,6'%rFe1tn+r[Kl9eilg;hK46gik']<[HiT:331o6@Gk#qu+ZGk]JBDtd,mMq?SWgco39pRq5T_=kp?\o^<`8t5XaqYFu5mba@cO$3j#%C-R#nnbpjXpJJ*j-I_HJ>Yk+Z(qeYRdtb9+0u^-&6D*FWoG*RCH1e<58bq/JlUPf`]CtUb[.!1]H1Lmui7Eq?-F(mF8uJ)enF#jp%C$R&9WODNLZPO?83]%QpfUY/SSH_+3l1e9&IQ*%,<-Ut!o7-2:Y4>TC,^V?"md._;pNG4j<>NYhQ!&9C#DAG0gpoE@Fbr/;pNG;E%TFDmP\SDl%8o'C<*\Js[Bdc/*;Z/J`JCsFGqIcS1>"0#\oWR#D8YQE5;krUc^pe'A5##_a'+`3_r[9@B@eFQ@]$`u\\_:CS/MC1X%IEX9YVX,tf-UtT=_/;su)sPgPQ2+X(_dNoTG^ni/:gL+ajk6*<9sjf@^R\_IAH*M/VmWe!#Ma+.2$qSajoC!acrc:4*Fi:9M[d$s%OI2A61u'BAetZobB(<;h?Otg2]AA*A@D5un>C.gF:c@lfPr#r82W,@KhO&7`+#DO3#V^Hgf6C<(CG3SDla!k';@hecIfR<o#6SmM%BVgbt?[h,0FaAg;,^Y#DV2r]d.IC%7#@5"s7#oeoKgcoKFF!%HD;=noD;9&m\)*Gb!BWY^PeW(p,GoMTBhHbIe)itZ6]>C0q>OL7%#1PNE0('f#9PdN?SQ\qQI,kN\]?46H*1Y2."L.tTQc!fZ:d(AC3-J938lVYqf5$.J%\VZc7a(pMRfcc@%nR4eOXo^"X`(!d^pZ7R%U\^10X/K+!>IMfYCmtMdTShEQ/AS\=<1,8j3X`0(,O!;OCs91&Qj#HOlt^Jr+"@Z&D%9rH)nG,'XZ6V_\&QG\]dW,@Q4jo]b#_Z,%D6cV+g3V_t/'?J3Bqrq4>EmI7aS+5Cnhm$b:9#]ah/QM#!H1k)q9![nJ#=]%<OJpM(Zh]r?TCSQ^/C.e2n/S91Uh!^C2g/TT?4m;%aPB\#Fo@'=jI4HO:juEZna;-PFoB=:[V]C'Y;,@GAM'CfFoB=o)lcnD^O^Sr9r+q!F&fu8)!Q&*qDF$Zg5*?qlhWIhls9hB(j5fD%pF<6?Q"rOD>1]r<Sr*#F-;`<t\Z4PSIS3nsYIR_e.Y+n.ldso8qT8s+qDD@ICRnfmTWVXC`*#)JEL_rnl`9l=N1mNAqT4\Zri1Dl%Au51NokX7SeDEMK>[>*64_g0MIfackRa4ldWQ-rHcMP+or</CC/T8"BI)FOcXNDCuV64/mPJDhl]NVbEldoClY9EMBI?rO#7ft4\%GD=0OCT?^P>h-#m>Xk^Yf+`1`<LE[T*_*-p=#K#DkfL>;C$cCb`VKL8Fo@a>]#;`U<a@r1m4/'_P^7^oo,\f4=!Q;hX/%M%3`\aW%?,'u$:"^LVI<GLCbBkX+gJ4EET/R5VWqpFXCdQUTmWR]cZdM=#c`#&))PO<@ICo>ndMla9lFMH)C#a'rq@1YpSk*/%k,Nktf&I^s%QM*/frjmQrQ/X<X.c%$ZIU0^/(9V#pY;5]hKXuW-Y@GK"okRTLpib-Vlh]:X<EAc3mae93\phQY]oH:JYIU[j3;*(#S(>jWpr6*a%kGj!%g9ZUoEh8`#qR*mr]gZ5Ak,Nl1*r&UtqDD@IX5(Z`W9`&?eSi5d=7((#)QW^kHf;uEldsR'3G)R3g6(a:H#eS.-WAW8,12#F%lhWIhL:E7<U97k0@OTOs`iA@Va%EP8?f/uHLirZb:M`YV[3O;rCQ8WPA_2rIf<9d9=Tc]6XR"KNRs4-r@b6C7ldso;Qc1sk?,,sm%i*Scd^@LgRH`^NB/l17gQ^BB.rIGDrhihQZ5%CNOnD6rFgb-.E2PgrMo?;3Rc9!Lm2MRS8B$Gu4_3jn+pWW06A;Od`gJ5I<4aXU0%B&h,m?n[#A*35jZoCL_a`qnQ4rV>]GdnEK^XTdJ.Me=]8:If1RT.Je\?JARc^O:QTC%(SQ\R=afml8rP[dF@S+$]/r&!jD*"MJX3%IF*?@mP&mkGgQt,hOI5jQNq_2\(plTlaPgFh!'mXFYEY+]`.ln7e#QcfDED)B>5Jm+"t6EK7eq0VnqQ8(Ginj>Fu\Vc_%AaSR:1L%R%@ZTbs"8)>.]03EW,XO5M`i9?g5e[mq98ul.kop]oAF.lcdS&R60-9rqbHOoc'glX4stC3d<^[q;ke/mF@uLQ).R:]6!;aD]PZI%2AL1KkNKh79%KL1(PZI7)q3YEVU'a@>b-06o>qA<pFAD?1;@qikA`5iFKD'\,p9IaUfuDX\ohe"Xcci*%-[+qnG13(o28@G1Sqf<%h)n[+G&V(WfREL*4*Y`CD"miOJ+JXT8SrM3X/4RO.o_Gt)WrA`D>h(mIduC`-=YU(DDpW[ij>cZgV8I1bj'lT\+U/S-KFEK4;o<N%YHTqI>:uPYr8c,Wl1pStf/b^TAGZZ4\VWa4GGeMCB0RQof!3rk#:u]S@.W0R3m67$dH02S`p2F&=mtA,j#:m?/_sd*\_<Y4H2%s;%c]\mo#7KuB_i3GJ=GOG<.h!9MT<GH&n[Y6=\A2HQocfpmbh8WNZ%CjfqLYrMcH[VHrPF#sN5%"2?T5T&r3^>-rFBP`C$YHH*Gj&W%ps/3_)k0(,XG4RV\sg);r>9pOT3jC(=Bfls#e*""h(jJi]BoLsgKSTerdZc4^>0NRqKV\tY'Ho]\3J'\5?M.*ShA);5Ie>dGUL9(%@!e_+j8MFb25%W_hAK?94:CX:\>AsiEH2B#mR9Zn&_<5j6Bg'X>f'!siLfHNIXS_8erhOY>lq+ZV:_AMREF.^n05Y*4+r*tiNI0f%CjbErBpZkYiC8$BN5AtFrum@IHt>+HWB[uoX@loW2tArCH1Yh0T?SJB2Wuh6a8,C5LnmbcA7E:G>-^2?m#0CDZ6c60/N=Ht]tfb)%pMR0OhV4O5q0DR%pA"Bq=8,JId(G5ohCj=e8R=B(qm/)"pL\@?*!GY/C^'44*9jXi-T5=>P'0V$HdP8o/Rq,n!rqoSg?TLM$(1a5%Oal)0([p:XhZjVaj418ejZUuJo\^`,A[;B<%DMnYgg>=&DB<Ef*%V(kCQrbP1VLG?k>fJ&:p-FkAb#Kn4NReLmG9tIMj_F8J"-%r%eLuD+'QG4RJ6b#SXBs34X?F)KhMRocHJ2k&o?k<CR..Ae^a&[$g`QA-rn0L\#(j[:GPWPD#1!0YZ9O1GW%#Enm'94]F*VVZ(/Id*%[N8F/7ps-(5%Z7Ks55!mi%#\h[In?%/.+Lpeo*3u=nrY!n0+n#l^K_io.YE9GK_Q+E&C2#5/s/l0rQSTl^c;H^[?M#XTp8%:N5MQ%OHM_:/j@pWcUm="riDolpm/n#e@8&>qg<KtY2M,ce/).4<r^^=&h+m<dC!N8D(UFcW2KB^#N',gn&+2K92Yd8'"@;A'EfJ+=RQ"g%I]VuY/8gRlk/AX4Dr1)g.H$B7f7h'qq_!1?e10;uD`uj\"J5?$\7,NNVXX6EcKpS?k)^s\D,3eXk^QAQ]Y4neEHu1'J*L3ReRC4?%b:imgOIgA2rq]Or_0l!Jcn8pIYCA+Kgm\3n$4gVaCO8Ri#7qI>!<*OQ4lqrdeRF<`!aaX^g'O*p^45Z.=PZ0.m`_%:a.O(;hj7^d%:DamELq]uD<L5?s,p;U*')")5pO5hF;m_QHo_puPC-&^;HL7S%C)-+gQ)pk<";I<*cZeWn"+.9T0^GfFTZ!"t9%$5-++[Vglq+GX%m-%V[e`WbV?.\AeN7[L0YoALQq)e%0edTLQX6+s]%0Q7!4:lbEA4V*0,]93dYU&'`N$P#A0`gS7[$G6p7$B=o?$J`FTk(pb9jZk%%KDZd=XG"=;0sdLjO.+IH2L)P-iHONHbH[3QmN0j`Cmj:FD*6?Ff?XWTO)OE32Y-_4flSgb<h8#/^Lf]Q,!NF+AH1$Jp8m_4Y`cEo%5rM?l@M4gdh#$d+WV>`+V>'<G[/ZEIfA>Q"qe+ch?dHDmIsAnTIpL0'pCFnUF8!BJnRZP:a<S.nj21]dQUcE&e>I^YmJV?Rbo`9r%f<<B4J,SXijm1;9UHP;JEHu1'pY9j=EsD)doF.2'@a<m\O(Zi;'lsS$(uM"^/*78[o6U\d?SQ3;XW#c`q((T$B;XAQR#F$][[#@b%SAG&2SjDsLbSc<(P6R"#B5hd4Si"mC=S5t4Qd9A7NFdV69FJqr?V>"JI=dUZFfi:Po@iU`N!i2c-tjEuWi[UR^5%bs_XOU0TPN#M%Tm-%Y[A=G9VfeSOG$`!(Y61A=k_$f-nh*?RKF^7hh\iUaFU7)(5[I03PW*CWn9COHTl<"OrG6`VR&>AB]K,T6@V5&g5m,F2a'IXn%=oNksp&:^jB*$7GCK,uHOTuhT;RRCmPGa>i<5OZF\0l*KZi=7uA6BLfPGqg7s/j#F3^,TSG5h+1cdSlTcHXZ"]n^%+GP^]Cqu#[A%e^=E/]RP*LF`MSM3OLcQHLKtX_hWMXs6/t=gX4NV=.6e]1,^;6n'[DD[oP\2T4Ms#i0uiP,XZ&>bNXZ>fDg<Uq#'4K]mIr#iQ%F3%_UnV^leek\I(6r%o78KtMUMWq-oYR(?Z+[!Vg.]HkPC+k?gdq-m&uc#hmqXJrh0)!KD+X?hCePOH9'].3Bb,u!I[7ATD)L^ZM?\$%1hN4_\*N;&k10ESgIH1]h4#K.]Qfo0h>DH`mcro97sA#f^>8/"C_t]Qm;BVJ)h5HpY'16Mna!Y+md6h!?\-Mg5Q7IG&!q`VGT5<7%-R1*::@1_;E0D$&M.<-;-6PTYg:44%93Y1;QlbCfE1Ut'dL0fQOUGVn)n!fTAN%"VhS+cA3n`kgf="c&B]hr!84fBLEF<@(62mRf%r*o]1,lc4q3jaB=Oam.j*RPtm/!!cnT71^-\*oPn_'2YTJaL_:C%cXOro(KcB)g5sYJB!'/&U1n=/)7ND6tIXL-/acm_$>BT1dmF%^FpaCTC_CY%rYuoHI6&JElQ-*LF]i$Ht8KXEgYd?G93K9nQ_8@I(i*]nM7[[f4juqldW;BFC@V3cfC@!9XJd%mS,5%0/ej&h\YbK%*raX#s7kRF96npH]hiRp?a35&8K6'ocM"APMH0<FO/)rukIoVf<[O0F2i\r,I$]>tp[[Uhc`MEKG&a@,'fu/UqSrN4f_C,+.Hl]U%qY`LD'p^d/`5(U9o1_&khlIahlOD5?q@SXG]Euh0nqIX?cL@a!J+DDFjcJ2!Dq`rK3Q/:3qtTMoId>7uP=HQ"a61(=!2M]\\ShZ-%=8gV)Xt+#MKsVL[?iKJ"83:6?&96]V+mjqFp]&ZJB[??*"Pl/m/"Hk;"j6J^Lo4^G\ZtfVWUa)Pj+n^^/(3C!Qp32`]V_S[k:\BC%h*-U\>("[s482L/?g_aX\MQhp-I:Ji'BbdAk)92jo?=&_Ve7o*gc$JgBDYq\)lnQU\Gc+eB[97/-tj]f^t\bXZmW!T>i49[#t;Vp%3m"bF?N2b4rqYj*B;_E^hn&KKPY^kcHEo1E&=%-p-5QeF3K;cb31\,FKVsUls1r;Na3_("7H<r"Fm_#)TW8ro?GDW9=En"pp#s]a%:j=GQU=;5Jfrt<tA\1U\1:g[n\>T2,Rq:dDb*^JrgQuD2-TTRofR],%,8\*1:r\m@>.EYL%/\#*kcWF!ph0$@@Z*-dAf=3nf9XEl%_qP#D&HIiN8n,-=d[$.@A!J>5elF:ma@g\Bp-D3Lk*RfVBV]Ii/@D3C=2GGj;M.:PPj%AGG^O7fQuM0,_bbjJ_9Rf4'_:LLGRcWe%"k08s6g'n5YN&L#B77i&MK-#.+$Nqm2qF"jP+*$T^T3NMARS?^rh<$QN^!K?8l"F;[/61iEd_'fQW8'OU!;InaiiE5hbhL0>[FDE%Vip*>P$$<m?h(ik94t<f`@%Qek+<YGnrVM1F-7?@[Z/m7-NOg8n%@?M_M?*#?Ok/\3j3BTgh+Y!l5[(0dJ]@)9/P&_Cg&"8U"P/D%A8cUo*^!cUJ]TVAW`*;gLB/3nGcl*j9L9,tDK.o0QFsZUduqV7:R:0]^\H:@UqQR"CZG3Dkr,]dY_F(8pfZf#XXl$IgBY2(NOo.3%M%g/l$3/n/k@S?2I6Rs@Vr+<-V_^+2aNL@%X5E\;Ej0QUrT@n`bQ!UJ45gnR2h:qf^KE9+7ep#J,k+HYB^]_LSt;J[(T)MVSXG,\%HfpaiIi_qq4?NL^rkGEiK\eoWm6/*H[5Q"M*l,*@Vrj[1_#ZY-Ip,*MdfHiFTG(#TKE&X`Ds*#W]6K%NDtrKu-dW=ueHp>mi5,H0%09>%HIf]E7PaZnRp&8GToaPWJkboonVF;+n7Ch^G8XrJF81a*sGna!G3cUC.o/nF90`>mmJmPYP:M4[NZe$Y'jqjoO^8_#:3YA8U%2p$\k.LpuF(5C0K`58=+(^kmuS.scrruZbB8I>IgDNlKI6Ol1tP'*I<TmS?W-:O:XTfgU,#t#F0!YhmUpg2Cn<#-+4V,9.)85^`&%6Psq*5^>oQ%>.@=pG<(=KEZO&?n&HBU)1-]U>PPnk;Imq^^jiX>mN3[P]ftNMHH`RBF=GZ:ALkO6iP^Z)[,'ICp=Kok@0]4''/;A%j"HQjn0L?*+Os"&.s`O8$@XL"K?-QG\-U?+N'UMX7GX4G2]Ro9%oYgC1h%`P<9+U,Ghro$/9+dQL+`m#nJnj2a<JmQ/=(hK3:fmT%WZ/lJUmn1p^>NLi&K9],;Bt1=&Z*%!A;)LT[k/AIHtcagP8oUo3RF0,T@\nN9TA]jVM311Jo1^mT5o;[nLRQX>g#9_E&3p*"uFNB%Z*80#nH+@jZ%ljmP^"D^=HLFj4I0(Z[*5!b7l7c^CoVt;+2TK=:>L]7A*?;"":O/HM1@.j)!5#<;`[uo7YlX&jH*)\9u0brGj:YM%'c2^S;h<R*Z)18`CD#BU_iDWR-3Uk+AYD4=pdG?bOcVmuC<AEM+P<b,^/JPP4!lM>ZU2AD_MhDc;_J.h%Pj5g(bK518V,0:r.e5`%7J'Ctd56KP,EMCEY>$bFA^bW^6nqUcL#oSUV7Uc_RZA1[$mPJm<6u*<57:Dj0/(Y$Spm<#hq5G_#^baX+%K\`]o<E>^JNabLe5rL%r7HjV!kn:B0eE%/@VH9jN@lF"5_Hk>(!t2N9&rnooG?Tn.>>$^kg+*h";\i=U.D.%#1G_.eJ(s&2S^N11))1l#(p;&@`)sXPj&Sf%8j,FhmBE2f4Yo*U"PQRsK]%m06uspaT+1@I^65?B/VgQK'sb4c@?(M"ONFD.o[6]165It@6]P;C2sXRRaScN3D5l8af8Z6RRS?0*%6`)Ms:mh^$Geb((X(BA)RtNK[:'?:aS%u[r5s+$cC?aoDs$:<#5XcM]ocQcH%p70!Emt'h;7'0Z8qOVW^)$n+6G9C]kTRh/0<?c<%WYH"p-L(J,@`8"N+3PA5QkUFa^-'2R+.EhBe01=2oIMM%LE.$D7o:hpN4P.>aa'IM`,LcOBag:gBIb\9prtLK*6(]I<9t`BHP3X6%U`o/R'$1h\NPcB2-$<,i`XB@(T&BW)ESU\UGV.HJ:LYcV(<8TC8n^co%ZNXecuKU/;U@1U8B=F*?suGB2p_VcKBNQrJlZL%'Fh10%5ZD`bKLF7ER;*nse>t>s[)S+491,oCJ0\!Z0Q0KrO9kcF[MOch@@h7<('@QtBkci>HBBs7h$-,`MtG^1,F^#PGMAa%9q+C;_[eiJ%8sm*F#@]M!ONY*$-\V:X66qOfATtF(OP!54M'Y.0&r@gZPQ0Z-'biKlMUrX+OQ-"VWrQ!?EB?t.5o/eNOKnXq0t0jabiga2KWK/2%9`u#7?U=N+fJcCgkqIWVZimou@Fm-[7-H<7d;<8pN1jF5q[:jSjd"R2HT&U+G88@2>k([la`6QER0@QC.UY,-r+G!hQWI]bN[q\/%ZEVFBCDqi!-jlQ.!_[!+==nO!$+Uh]XU:N=;W+.hFPi2noT,*4?p[-r)LfP,*W'U^@'lal3<H@]73Q4O=,/p1(S.jr2U-o"7!0o1%=VaN?]4YQlqJaG9YJkf6%!4MX.P1j3O3-/Wb:nfP4`JL0ZiDU8NZE.2h[I@i535rKPgF%8RY@@qXD"V6>I'>BBO!?F#hI35HCD6R%gt)'>+drFK+')a$`kesGHWhG3+ik>c.HkAqWX5h!W0'(_m(sO_>.;:&1.\*9.5"=53@4mqma**O47%t)%dSENM*N+i4s+r1N&IPC%M(.ha!6";%/?b**:9%5,ZS7\@TlV>bV39\ZJGpO3c=2+g3YiRt'KIY35[;]'B!iOn6B]?[mXq92'N.3uKZ/a(SWl2<6`8^S`b\1u%8?Y<=Xp?G@37H5A+sakTnZY,IQ0+[W=Q9L:(C(YI3+Z8#<^A<8YSh=ZLfs\0KEo<j%&<f)pu:Z2$U-'7UF^R\PqblOAla"==I6>Z%EWung=SPp2L9!f-YNUMAb2M2N5V:BqK;NMu\"[)c`%`Lo8;;#L:q'FReg8Z[e4kp"L]GMjaD38mR7YMN#*g;>$KX4SE/LlK'*hI@%&l0Q*"O-=H76r=2[F1!1+<kgHk!>*WgbS1ZFg*!".0C_GF9`OUG3iV>Pq1Y(6-H-+!L>$8Q&KCq!^s6j+QaT`253G2/J4:&.@&q$%+qfSrO[LH(UqX::H(9\UT6\YP"nuW+'b57M`Q[Bk=8I8Ph[h,+88GcRd+",tU6?F.SQ9@(bJ6`9E&M5l22]qKF>a+'esUVY!#"C=%.#88H3#au=(C#G(B7klifmmGQZtFr;%C/RFf3ftiE&R>_\u+j0A-[:OQp#1OD6W6&i,MEC-NJ3L#$j2f\\i^pUZF$YI*Bg_)"m/\%l=PRF4;IH.j=UYu,n7e'lOd_<;uL=RIUOLni5DjMD?3Z[82`:^(6-*B?u(od$k^0?!KuK]QO)8;LE1qs`$]i1Bj!"3Z,M_a84JUt%P\Yn@%OIl-#.,)G>F?70IM7esMm\2*[Om>4)\+q2F1.XXdK7DA;)c2V)f5'bW0F\lZf?T>.*uH;cOHSpkErKq%$IIj!`M%:\;qEJ%lthtiRc.3GKRG;Pf4a6"5.a)S8pt<FDOhL428s2WDC?bs%:DdHj*(,A'PI`__Y#5+HS2HWQ7;_nd`JlFg-,ST(Qd#I<(N'hLgu9q%"A8lp=d&CQ0)>cn,YgupJ[q"9X@HCPo+K(k:m*7/YtVD>\+EcfDM3)o/_3fr&f'`@NaoBtTuShEA]/%MX10lFLa$]j'Z`!olte!<%`E=!kd0GW^M&<o?M3clt],QD%6Yj.sn@\gt47f$FNOVgOmmo6Vn,a56JN-E`pDCf!9mC5:<BA`8[R-inieW]YAXd'=DE?JJi[HPc%iflk`TIh%nD"[IOG>r+3MV+s0Q6AJhR2>.`$&:q)4@iELT$R+?(_Bm&A'gR[;!Yl(Ja*8-XC[Fh0QK2_K`Wedj]#]""ti%+WMn`B%-0tIr,d^0acHM)bm5ZkhOZ<rKmtWm9,nbcdUgIU?pJ?*.StqNGP9a8iqF&3.J.CmcRP;1@L_Y2!jn`Es!hCUIdmDtc6:QKP$<WX^%Q&Qb/^u2HDri[O+"%0lVXThn'BGb/`8KtTV,&EN0@*#WID_i;hZmk,KBO*kB(6E/(:]VJ6IH,[qkK%c#:&fpX1\HZ2n.D6X(CA/i%:8c*#6mo)>OeWpQ4n)"$&9MZ\q`7M]6*^dn0>\^YBD5AsZPNY)Pl*?Ja]L-,?NjlBk.rJ:JXaPdD3Z"(E<(qD0=#;E7G(&4&+Aj`%d$]D0&$-4\&F1ANT^l?[6a5GM0s[ST!FZ85!Bas,an:4o`$3^NH9N+m0&ihMqG=`<5@jmVU_A<Lgfk]^&P$!7[P+@>L`KQZQ<8oU%mV,H0A$C'/;5'Hon<2mAg<ZlUdJ*^-<&??>&etSBVi#@:QCob(k@:U8)X<,HZjN3Z=@BOH@QfQ^.If)GH;q[C-gi+oSe946$ZK%$%dh_8[d2"Ch`e1Fk@c\i-<@GW:$/97950!GaUQ43l,+n.i@\d#?0,a1-oHJI2c`0<s#cpNu!'G3;*Wa[F6-T[4OsL0E?*4]qG_\Qc%etaj-V&X,_UaHn+ff$YjLT[Tlj(@C`--8*(4H&%.&kHi',Ql_c*rB&-AiCo"'[&\,\V3.F6,[MQ<91jJLpRNa&UdLll3SkKQ^EFk%@A+eEOM4O+b"7-#3J"f171MD8d:+5i$Medr&@CZ*;-$MG/</jVF@I"!_[&Q#UQ6['q6_K)1B/M<fb&gb*J#?^Eq>mA<.Qgn6,\"7%JfnX5K/UV!5RMZWOAs<(&1c"]"DO75A_uI3faJ2r>S-d"%*VMAPT)l:BEr)99\Nr9T=a_8L.`/78\cD_q7VmckT.\Zn5=$5DL%@@%["j&:'I.YX#6AVE(9ub,k#mWeLQ6eAFs08Z,g2aKoa@NlIYigtED1lD`*q;a(rmX/%T<[Q'iVD:$m:$rM$ZNW)*+PtS6Rp<r,mc?%":><*K4n*s7^!_9;$He>YuDl9LB_4e;?:N"Km8W>Qj"suo8J2NeuKYp*AUkm,^q][e!rs39`Ir+B\c$$_F$!H62cF<-U9g"!KnsH%O0H-M;Yd2!kEDPk&A>)IN0Z;,9*D,Y<D2.#Nj]C+=g`)]bGsrlGZ0)s:q&u3-B?,6=uppgk[Zd]3A*^\:_`C]8W-F8#c0Q-Ophj7%&-9`oG/th"!368AlOd/CJbLLim6RG\L^(&<,WRNO&je5p&RlOf.'r\[O0lbaN:3S_5T#VC(UaY6%\jV&Vi/P%+ZT1J1p@gSjs*>$%"\/AK&P>DdR`k;Q2BgGr<T5IS#Xr1A`6aTDTXYe(,*kSadO`Z)R]/VQ?3BXF=DJXi2_gbC%_r2<][1T%IN.eH6]X:GYn;OF=;=7r%O:*)%N#"+oSs7eF;2@=Wb`q(D`=bnc!d#V;-jqcfY<2QbD04cI+cPEU(e=nND#PRhd[:CiEG1+O&E0W>oOc&4>YbUqR5:\P8.p\$%;?U-%6:+S+21i1ZIC/1/MTg>VHr32=4=%_%8\`<5k[84%JNQWHc5C3pP/_e0AuUP6oG\ip4H..3H4iTs"0p$If:jDATFnB0:1+KB%jiYJ+Yt23kH6/n#,8?E!8>Z_!E)TaN$;>X_F;+Ho1`g4eO@Vf(!gCFHZ5<a>+8ZmN<('&iYOY(5:J%.UR>Kl2p`SjT0Ff6aR%d+c%Ag*!g!^U?TC,Yr?-?ghoOn,<`Uk^6SPjO(*):QCf:4S&^Ng73iT#bPBs&J8,9B/A*:(f:nPJO?aoR'=?(f4l>\eRQf#&hX2XPe?_%$\O^;0rI4([G+T'X18gLJIugf?O=^*"St*A#"&PlX`Hkle2h]^W1ro`_++U+X6,8"k\WgV5sZZo!onE$d'hq1()dg^.!0otJ7Ih/%^$"cV/D`CZT];gTF6+S7jWn:Q[odNWV^t;pC.pCcWOlK+2Fu[mYTdXE/>%fZO3LKVM#AC0V_R#1@u6W))sXS]I=/7KDZh"#Cp!+U%-P"&&d"rJ]A-?&#f6,67]U06Bk-9.X/6I&"/ddNX/icULW@+qb"=:ko!/W6@2P/MHA+a7dN<-5TZJ>UTkVs01rn_5j'<FYDT`nq2%AQidJ/;gil91hR9O]teh>G(^^SKUVI^FpX[FXW)&Tee[H.1HKFRm<dn!PMJP!6Y*+g8GI2E1i"a)^Jh@#)OXpNWiO%E0SUFi]cfH%+kKDs#W^+C%Lt:p"!Aa-XBOE\OGG*<L$er.Y9u$+P,<bcV^W/iLI+d%=rCQ*ii.l$m;rSi(u<#:U5uhpiq+s_oQ1MbFYKb"HR3.P%?ATQM_-ofUYf)O`i*,%q#M2is1`DRHK>WZ1&E1aF?920h!$k4FrFf.8r+<$`I\E6g#B/VHS0NNSl6$\63_7Jn%ME:%!KfniZ2G?"%f)$<&2bSh/&(<Cj"]],jF>O<JHC=u6>tldYg"GYVP;qjI@BR73-]V=E'i1O6Qc?nm"RTY]a17-?_AEI>1.%d-66Dn2O4&AYM%WTq%@8I52P=(k@8RgE(,U#(^OEdc_+a,_OUC<cSWsK<;EjLC]WsOj(,3`g)N%un+S\-9>.6Q0i2`&(7"CPM0!jf$VMcj*p&uVf_\"c8'%W!dY'NA6MDcK%nr8)IHNP<l"F8Rf]i,VaI"!CB8fF#EX4UYU-F@m'V5e"e/MBEA1b0'.7Uf-S&pU5VQ6m(,ZFXf':1!4G5r1O^Xt%U^G3;1oZ"d;l-B`iPDHlmu]lOTfI#M!^`B-F#@Cu$(d5L.mM#u_^+q\9b)6e]Ymq.N\_$9O^H$T=O/4oifq?-]r&ZR:D.@F`-?fp%AWjPgN%T$&l"P1*nHBfqc<k,9+?`H1WRB1)qBK=rI29aQiZ([UK>u;l]FVD9@6@8?YuP[(9fQ`!?"Z)M**LEF&Nd]69GE38q,D$&%.I<OtM&/+B-AcE$hh0#!KS\&tQT\'+[.,t]ck&7%Uo+Nk6_6hE'4PYuX?cYOkA'Q!/VFbsD$Ua"6eO[9BHL,+Nj1caYgXiY:`Lp*%(krXEk7F=Impo0;7ck\F!FpDXC"_$g_XtWE1CB;MOq\,T`<&>/MHML%_W9(B&8NK0r_W51+=cG!BLpE<M6Ub(8<ca81EpAObNYt"%DTV:HloC#Q%sJ^t[PMCr@MtpqBin#eeM!cF:P>69$U"5S<A5uG2]a$\9"npU@qc=hW-/f3'ZIO*gGqY?ho)$)7$9*a7\NGuH*l>C%'UhE^RaiNsEMdpdoH>*f$HHSq62!-26COMaVcsP#Qc5>F4+WEgOZ5cri@]41]\V<W#-Pt_.^ad_W@d0^C(30ZfMHbi2;aa*8Rf-M%`)F0NW^KZ=LpT>djpZ![RALqgY'5:VYT%p%F'QI:W"%ktl6Og*-YD+VS[)IHJpMrf2E%ib:UH18%;LO:/ih,ne.+8=2%nM6)_8%r%7n0o*<as"ZGfoa*f[C=Mp2hAeXPSKZ'6jm5EX.r1^n:XOLB*6eO[VM`$I6bo7*PQfQodtXOP)7KGac`Q+4CA'(Rq;Ebnt@Nn.+7d%d9^sDQnAqkQu4'-r?TBu,n`-h!o<#p[qPc;!M>_$q3Mf^Hk@![]@[EA`>3GLcs^f!)GJAF_ROd5lnWF>F"kRT)6%SU1bQD\$mGl+%@;ZQ9bd?5'G<P<QK:RYaX:Bl'F3n<4%KaNC*+jZ1::WAed(-*EV?P"d].%D)DcO'0Rt;-V;m7t<JsfoM7qN6?.oU/&MVaa]kR]ZX%qflN3?l#u]M4=q:3^E*I>n-jS%KfCta`UZ6@2BN]d)iZ1=@e?HHr3YL59?\Zd*U2XfLfi@_=oAD(gB\EC'kWDpf(QEf_:U4ZGf`Z%8ZH84-p7\FI>!rlXi9akR7C%]XJSV;`QnO\S4Xp@ZtXp25sZFZa#"[XZ;i&tN#05kB/PLn\9KR?c64b?Zb6u7dNR7,`:-(uE)=uj%5g\DS7@J-1UM/>P`%][Z3M%"VRN3+Tm#0AWbQNl<KY,+A4n^&<>!<Nbj^'(VKV2^U'3M-6/r(b.(*lX0O[:7#M,aRp0D$W0Jl[(o%?;>g"BeM)X$e$sFTti9i.2ff/aZ/aUBfR_Vejq@.X@f4I3GR,jJ;>]'OMiceHp=JC7_IZq-I8ce?<Fg@+BjAb2&7E.ml?>m2dEnm%e&l`t)R5U.--c_?,''][)/8glVBJE4fq]"!4N,l;&gMJo=CRZOXX+O[V*t(jq\B4AGSXI=d%Ye0+QOP8!19"n"G`\?#J6D%g@e;N%VdZ_41+oUt=I<Xs*!JsH=_DP,$YUEB1K03H:I$WrQ&p#+P1CD$q*R5uSJW8*Un._U;6s&d^;Za.(MZS9T;LRZ5>.#N)_Q@IZk@B<%0_42\AOOJ:d+`*45hJd8<u&I&aZP3rE*<XH$^3+c(KuZ`L"9ZL'L@(5C33Oi:!)nD`'4jNb8<*84Cu-ko*$4BLZs/T'hiSY9Vd;E%n0/*kWNleLE3-m%KQ.p%L(pMT;?@Q()W8IW&:J/@@P9E-XmAVQEPA%iY'?!=/^VS4BW-Zq;%t,6]r5FX"Ds.^(,.1q;+lrrB)?);%gHLsK7;<lqOn<p7%P$_ddMr[*Bjt_Ko09R]/.nX,)bc^C&n?"6:`&G\DM,Em74&ODXD!a<`"[-U::MTZN+IW5AQ`KR8".$QFdZSN%]c.^!Y:rT#^/9W9;3hOS&I'7O*(GbkBe#k04=!stj'j\L2@hdR9O]!^Mq!qe`.lr'=QIi:eRI;d^;nC1)$_/48_!;,"qRCcE3=s*%rhQtDq\Z6W,P<VZH<oYLEA7Yl1Wa^!Mm:"k6#mPk14gK/bc+O7E&2`piM+5k5KdNeT7ofK9CGkSLEYA)V>XP]cX@VlIL<F0EYD3*%cMe[AWCWjMb<iX?4We0g`=^Q5*K9c@<%s9:LXHfJ?lk_4(]@gaM+E4S!jS7%9tHLYV&mVm8]<`Mhp++.">NKIV/5kZ8P8q1$K]%$%=X/`,6r-\kdiL*`I7dDrdGiZE9_`KRqh8==eo$Gg=Y9eF@WUC#&Q*O+,s5>83AEHJ/]6o7P[iMQPKSR$M3<FKh^_6f!HUb5GkrCa%2*TF>G/SYb9oW)W-ob9[B0ChbJH<*A!3;jqp_jhI:_k+eAKXTfmWhWk;MLC3S8ttWIQgfC"dk<n)2Mp''>JF84A*;R7*#($f_8K@%24YP0*7?3jQuj5oHG]!G5\SSr%A_>rVHSX*QK7csQBCHl!,9O\&4QL:j_c3(ko1g$"kgEO'Pans,cdg3rIpPSTTbHiXoVFkJhRhm%[V@U]Nm6.n&r6EsJ"2]qBP(f;Mgd/:kYR^"$8i4`,\QtTKNcPj]rBirGo@f%Qm`?b"dK@iL$@1t('H'6Qs'nsW$9M;jpR4]Ta2WS%6=JkG"3pCm=lqr6kmSbkkTCu;)XfD:d=l1m#A-"X:2,B:Wo-Q&4)#'9q%!b2jW7k97UnE(I#/3%"XXg/*i1D=!N-se)NaP[$*CLV%?%Rk3bUR'(=b!5d!Kr4!SHP7W9Hlea/XDd?$*?Y5.m`'5_2CiR2fo[g5)'`&_Dj=0`%e+A=r36sV=/%3ZnQ-\;X;;#MQWjsCPW-J%Gb^pb.1HTM%AmKFH8j@LY:;I#4?>*N;RFooKbJeua:8mp9/IXsn-)aNZIq8)fA2a&gZWf#$e_0q#AL:X).MT`3K?OrS1TkX#8ei>%"gN%S+JoZ/c$9:5HtSs;a>h`NPL:hMp7YGEKd),s&u$V&"=EsM@R1h*qAB#H"L$0d&W:=3%l(\t`.F4l96HU[jTTcY$).ke-:kLD%aG\'>=F$:i*E&dfPESh>/kRD8@boHlc3asDL)TZU?d&5/Q2nKi;BhOcSKnuEn+G>R843c@m.gX)[6,ITNYY+GYuW8^+brls.hj]Y%401/1RAZE[CUOPfR\:e"btrt*;c-@m*6]PZTTMUp<b4T=&C]p4Gr*9P6*a`lGDJ+E4\Qfh!jb%qe8;D4r3BR,`rDgAJ*]Hm`Dub0%*&/eNM5rHORRE*lCG;aI8kdQlU9*A>-@"j9DQ,Sj8m)W0n:cX\[RKQ<e!O)m-)URW`'p$9]HRh4W']d"I'Zs$$J$\T!)!]>K%Ebt%6>QaSd#Dp`ZUeQ>dnMq>)=OWZ/KEcY$\QRsO(Wp0EcKV<`C>@:%3l1M\!#Jp!4-*)/CAPj^`/$'C^.b)hMn1DVAhgV\NRi=B%'9p%F"hKTN<FY4RIYN\,W;*RgGKNmoIT.d+-7a=o+D\ul'0s]P1\RR.\97j+qiXb7*N*u0[WD0[uErb]ra^H).r:XY`^LK,InFC]8"5I%Y2Q=K?,JS:D&TRR6>/2&2[tP19`pJ>eW*s>r=ci20i-o.J[<4(@d$Mg>@f"Vq))i1VDAI&du]C=1aHZk%>jVPJOgVN)n^)qdVMWD%;SsXIeiUP@47nh#\pcaX(gV`bHbKuHR,q(PM,&Ga7tG2R+qg:GE';J;4tRI%8e3/GW[8RpWYZp]aW6Pd$fhVX/$?gtCo.!"*[cH:%45mR\2WG&m:NA`GM6]ghRCT[19jJlBE\ioJOh(#a(/+?!6O@)nV6@8alQDC]mkqJn+VtJVA+(kR;DN*k7c&BdHpNT+*Q]4VEN'&O%p0CEpOq5-C9sDXYO^q1DpGU4!,"-8..^MSgL,B1!gQBF]]S1/*$^iQh1.sTK3&QKUH9]9!!_gbAq[jjRUdDT\R*Y,B7KW,RGam8L%%k3lDOgJC6icZQ!ab;$0]d/_S%1$MleXC\,5eOH.%ktVX`"Geb:MUN+m5WbEM\3>@'I.9G[i7?OlpcMe9?$9fJ<\M$&0hg.2o8K^%p;*5("d(Jl!Dt$,'dT(6rZ[qc&J"si2C"'Gc,a=fMlFF\`lA^[)2^\J"B(5BLm;1qRE`f]Ai$a2c!KI7i&2h3;B[h7PFI]Pb[uMU%en-Y5>m8QpN=/Eu7ejr)=?3s`-:aV6ds'$Hbt'$j1Qn-YN$QE4&L*@e*;ekDc.'tmd=M&Xi,t*.ALI@2%+_0]$a%niL.E*G_l/BU%@Y[?.Bb*9,E[.-Sd]_d_/2QjIcq<7Z>S82oPQ6Ctp*?MrS-<U_m[<X#gbmCe\\Y):?=N9"cQ\Y[a'ZK_d3alh7m3GfL%;47^-1*&%fC9n`]Q?hD(Ppbr%Hb(K**p'#/^rCPDFr$qPn;"eE\pG-XD&;?1a*7j;6Zk`8D3ID29iO-N3U?(1->h"\Uk!B.g)J"8o&&To,_\0%6P<.BhnOD.h[O1VfZ]jsTb3dcKek+bWO?RkDA1!C:W;if.")Q,7UgQ2BgFNl3S'4=$s+5jSHiW<oZo"YCRN?G0ZO5tH-aBPFnQ4>%71p-Qpsp=#Qc=&HKR43hE&]u01XqtRfsF%+U@C_+87mtCjn3qD0pH_E_Um[,lj-:olW@W)opWJU@@7Z"G!L:1@%CAKjhtRcYR[k*%9h`&Ip!.];JO@-`Q`<4%B+eKuJ0O:lJ]KH(9R!H`0oW3/CR0NrPaFEkFH+Bp&TUFOjsF6t4_;6\MQX*^TFq.9bmGfM]D?QTf-B[,%j32Wso0E&i]AlG`_83U_#,]%"jC1Gb%P4rR>im<O$W.s*-Q=^>=<o,L]i?]*'i"NMHA#ECSpiETS+3",.1ro/),0>9&n=W9WLI-^%?AV>pj@Y)"<Om&6kBM"jF_9oJQ:_$W,"Bn?R*Jr,7YdDBZ@UR@*/n"/9@"kFA8]*^VH!@?*=Jr)f0+f9=?K,eXp^1I!(#@s6Wn*p%"b=8qY/7YjqMf7OXfQVVAp1q:5C.JOjlc0]H0>(DQiA%"I5sI0S%ar4_dB:TT-%?DSt-rt?2Q\Z0-]nCH$j49le-IErrZ67P@+~>%AI9_PrivateDataEnd